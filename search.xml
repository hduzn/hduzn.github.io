<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>Python Excel表格格式设置</title>
      <link href="/2025/01/15/Python-Excel%E8%A1%A8%E6%A0%BC%E6%A0%BC%E5%BC%8F%E8%AE%BE%E7%BD%AE/"/>
      <url>/2025/01/15/Python-Excel%E8%A1%A8%E6%A0%BC%E6%A0%BC%E5%BC%8F%E8%AE%BE%E7%BD%AE/</url>
      
        <content type="html"><![CDATA[<p>用Python读取、操作Excel可以看这篇：<a href="/2022/12/04/Python-Pandas%E4%BD%BF%E7%94%A8%E4%B8%BE%E4%BE%8B/" title="Python Pandas使用举例">Python Pandas使用举例</a></p><p>这一篇主要介绍一些格式设置。</p><a id="more"></a><h3 id="1-生成Excel文件"><a href="#1-生成Excel文件" class="headerlink" title="1.生成Excel文件"></a>1.生成Excel文件</h3><p>以下是读取Excel文件后，生成一个新的Excel文件的示例。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"></span><br><span class="line"><span class="comment"># 获得当前项目目录</span></span><br><span class="line">proj_path = os.getcwd()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 读取 test.xlsx 文件，把所有内容读取出来，生成一个新的文件 output_test.xlsx</span></span><br><span class="line">ex_file = os.path.join(proj_path, <span class="string">&#x27;test.xlsx&#x27;</span>)</span><br><span class="line">df = pd.read_excel(ex_file)</span><br><span class="line"></span><br><span class="line">output_file = os.path.join(proj_path, <span class="string">&#x27;output_test.xlsx&#x27;</span>)</span><br><span class="line">df.to_excel(output_file, index=<span class="literal">False</span>)</span><br></pre></td></tr></table></figure><h3 id="2-设置字体并且居中对齐"><a href="#2-设置字体并且居中对齐" class="headerlink" title="2.设置字体并且居中对齐"></a>2.设置字体并且居中对齐</h3><p>生成的表格中默认的字体是“宋体”。比如把字体设置为：Arial</p><p><strong>居中对齐</strong>：</p><ul><li>horizontal=’center’：水平居中</li><li>vertical=’center’：垂直居中</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"><span class="keyword">from</span> openpyxl.styles <span class="keyword">import</span> Font, Alignment</span><br><span class="line"></span><br><span class="line"><span class="comment"># 获得当前项目目录</span></span><br><span class="line">proj_path = os.getcwd()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 读取 test.xlsx 文件，把所有内容读取出来，生成一个新的文件 output_test.xlsx</span></span><br><span class="line">ex_file = os.path.join(proj_path, <span class="string">&#x27;test.xlsx&#x27;</span>)</span><br><span class="line">df = pd.read_excel(ex_file)</span><br><span class="line"></span><br><span class="line">output_file = os.path.join(proj_path, <span class="string">&#x27;output_test.xlsx&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 使用ExcelWriter设置格式</span></span><br><span class="line"><span class="keyword">with</span> pd.ExcelWriter(output_file, engine=<span class="string">&#x27;openpyxl&#x27;</span>) <span class="keyword">as</span> writer:</span><br><span class="line">    df.to_excel(writer, index=<span class="literal">False</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 获取工作表</span></span><br><span class="line">    worksheet = writer.sheets[<span class="string">&#x27;Sheet1&#x27;</span>]</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 设置字体为Arial和居中对齐</span></span><br><span class="line">    <span class="keyword">for</span> row <span class="keyword">in</span> worksheet.iter_rows():</span><br><span class="line">        <span class="keyword">for</span> cell <span class="keyword">in</span> row:</span><br><span class="line">            cell.font = Font(name=<span class="string">&#x27;Arial&#x27;</span>, size=<span class="number">11</span>)</span><br><span class="line">            cell.alignment = Alignment(horizontal=<span class="string">&#x27;center&#x27;</span>, vertical=<span class="string">&#x27;center&#x27;</span>)</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="3-设置合适的列宽"><a href="#3-设置合适的列宽" class="headerlink" title="3.设置合适的列宽"></a>3.设置合适的列宽</h3><p>1).添加了 <code>get_column_width</code> 函数来精确计算字符串宽度：</p><ul><li>中文字符计为2.5个单位宽度</li><li>非中文字符计为1个单位宽度</li></ul><p>2).对每个单元格内容使用这个函数计算实际需要的宽度<br>3).最后统一加4个单位的边距</p><p>如果宽度还是不够的话，可以这么做：</p><ul><li>增加中文字符的权重（从2.5改为更大的数值）</li><li>增加边距（从+4改为更大的数值）</li><li>或者两者都调整</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"><span class="keyword">from</span> openpyxl.styles <span class="keyword">import</span> Font, Alignment</span><br><span class="line"></span><br><span class="line"><span class="comment"># 获得当前项目目录</span></span><br><span class="line">proj_path = os.getcwd()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 读取 test.xlsx 文件，把所有内容读取出来，生成一个新的文件 output_test.xlsx</span></span><br><span class="line">ex_file = os.path.join(proj_path, <span class="string">&#x27;test.xlsx&#x27;</span>)</span><br><span class="line">df = pd.read_excel(ex_file)</span><br><span class="line"></span><br><span class="line">output_file = os.path.join(proj_path, <span class="string">&#x27;output_test.xlsx&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 使用ExcelWriter设置格式</span></span><br><span class="line"><span class="keyword">with</span> pd.ExcelWriter(output_file, engine=<span class="string">&#x27;openpyxl&#x27;</span>) <span class="keyword">as</span> writer:</span><br><span class="line">    df.to_excel(writer, index=<span class="literal">False</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 获取工作表</span></span><br><span class="line">    worksheet = writer.sheets[<span class="string">&#x27;Sheet1&#x27;</span>]</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 设置字体为Arial和居中对齐</span></span><br><span class="line">    <span class="keyword">for</span> row <span class="keyword">in</span> worksheet.iter_rows():</span><br><span class="line">        <span class="keyword">for</span> cell <span class="keyword">in</span> row:</span><br><span class="line">            cell.font = Font(name=<span class="string">&#x27;Arial&#x27;</span>, size=<span class="number">11</span>)</span><br><span class="line">            cell.alignment = Alignment(horizontal=<span class="string">&#x27;center&#x27;</span>, vertical=<span class="string">&#x27;center&#x27;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 设置列宽</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get_column_width</span>(<span class="params">text</span>):</span></span><br><span class="line">        <span class="comment"># 计算字符串中中文和非中文字符的宽度</span></span><br><span class="line">        width = <span class="number">0</span></span><br><span class="line">        <span class="keyword">for</span> char <span class="keyword">in</span> <span class="built_in">str</span>(text):</span><br><span class="line">            <span class="keyword">if</span> <span class="string">&#x27;\u4e00&#x27;</span> &lt;= char &lt;= <span class="string">&#x27;\u9fff&#x27;</span>:  <span class="comment"># 中文字符</span></span><br><span class="line">                width += <span class="number">2.5</span></span><br><span class="line">            <span class="keyword">else</span>:  <span class="comment"># 非中文字符</span></span><br><span class="line">                width += <span class="number">1</span></span><br><span class="line">        <span class="keyword">return</span> width</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> column <span class="keyword">in</span> worksheet.columns:</span><br><span class="line">        max_width = <span class="number">0</span></span><br><span class="line">        column_name = column[<span class="number">0</span>].column_letter</span><br><span class="line">        </span><br><span class="line">        <span class="comment"># 获取该列所有单元格的最大宽度</span></span><br><span class="line">        <span class="keyword">for</span> cell <span class="keyword">in</span> column:</span><br><span class="line">            <span class="keyword">try</span>:</span><br><span class="line">                cell_width = get_column_width(cell.value)</span><br><span class="line">                <span class="keyword">if</span> cell_width &gt; max_width:</span><br><span class="line">                    max_width = cell_width</span><br><span class="line">            <span class="keyword">except</span>:</span><br><span class="line">                <span class="keyword">pass</span></span><br><span class="line">        </span><br><span class="line">        <span class="comment"># 设置列宽（额外添加一些边距）</span></span><br><span class="line">        adjusted_width = max_width + <span class="number">4</span></span><br><span class="line">        worksheet.column_dimensions[column_name].width = adjusted_width</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="4-设置边框线"><a href="#4-设置边框线" class="headerlink" title="4.设置边框线"></a>4.设置边框线</h3><p>1).导入了边框相关的类：Border和Side<br>2).创建了一个统一的边框样式 thin_border：</p><ul><li>四个边都使用细线样式（’thin’）</li><li>包括左、右、上、下四个边</li></ul><p>3).在设置单元格样式时，同时设置了字体、对齐和边框</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"><span class="keyword">from</span> openpyxl.styles <span class="keyword">import</span> Font, Alignment, Border, Side</span><br><span class="line"></span><br><span class="line"><span class="comment"># 获得当前项目目录</span></span><br><span class="line">proj_path = os.getcwd()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 读取 test.xlsx 文件，把所有内容读取出来，生成一个新的文件 output_test.xlsx</span></span><br><span class="line">ex_file = os.path.join(proj_path, <span class="string">&#x27;test.xlsx&#x27;</span>)</span><br><span class="line">df = pd.read_excel(ex_file)</span><br><span class="line"></span><br><span class="line">output_file = os.path.join(proj_path, <span class="string">&#x27;output_test.xlsx&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 使用ExcelWriter设置格式</span></span><br><span class="line"><span class="keyword">with</span> pd.ExcelWriter(output_file, engine=<span class="string">&#x27;openpyxl&#x27;</span>) <span class="keyword">as</span> writer:</span><br><span class="line">    df.to_excel(writer, index=<span class="literal">False</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 获取工作表</span></span><br><span class="line">    worksheet = writer.sheets[<span class="string">&#x27;Sheet1&#x27;</span>]</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 创建边框样式</span></span><br><span class="line">    thin_border = Border(</span><br><span class="line">        left=Side(style=<span class="string">&#x27;thin&#x27;</span>),</span><br><span class="line">        right=Side(style=<span class="string">&#x27;thin&#x27;</span>),</span><br><span class="line">        top=Side(style=<span class="string">&#x27;thin&#x27;</span>),</span><br><span class="line">        bottom=Side(style=<span class="string">&#x27;thin&#x27;</span>)</span><br><span class="line">    )</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 设置字体为Arial、居中对齐和边框</span></span><br><span class="line">    <span class="keyword">for</span> row <span class="keyword">in</span> worksheet.iter_rows():</span><br><span class="line">        <span class="keyword">for</span> cell <span class="keyword">in</span> row:</span><br><span class="line">            cell.font = Font(name=<span class="string">&#x27;Arial&#x27;</span>, size=<span class="number">11</span>)</span><br><span class="line">            cell.alignment = Alignment(horizontal=<span class="string">&#x27;center&#x27;</span>, vertical=<span class="string">&#x27;center&#x27;</span>)</span><br><span class="line">            cell.border = thin_border</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 设置列宽</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get_column_width</span>(<span class="params">text</span>):</span></span><br><span class="line">        <span class="comment"># 计算字符串中中文和非中文字符的宽度</span></span><br><span class="line">        width = <span class="number">0</span></span><br><span class="line">        <span class="keyword">for</span> char <span class="keyword">in</span> <span class="built_in">str</span>(text):</span><br><span class="line">            <span class="keyword">if</span> <span class="string">&#x27;\u4e00&#x27;</span> &lt;= char &lt;= <span class="string">&#x27;\u9fff&#x27;</span>:  <span class="comment"># 中文字符</span></span><br><span class="line">                width += <span class="number">2.5</span></span><br><span class="line">            <span class="keyword">else</span>:  <span class="comment"># 非中文字符</span></span><br><span class="line">                width += <span class="number">1</span></span><br><span class="line">        <span class="keyword">return</span> width</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> column <span class="keyword">in</span> worksheet.columns:</span><br><span class="line">        max_width = <span class="number">0</span></span><br><span class="line">        column_name = column[<span class="number">0</span>].column_letter</span><br><span class="line">        </span><br><span class="line">        <span class="comment"># 获取该列所有单元格的最大宽度</span></span><br><span class="line">        <span class="keyword">for</span> cell <span class="keyword">in</span> column:</span><br><span class="line">            <span class="keyword">try</span>:</span><br><span class="line">                cell_width = get_column_width(cell.value)</span><br><span class="line">                <span class="keyword">if</span> cell_width &gt; max_width:</span><br><span class="line">                    max_width = cell_width</span><br><span class="line">            <span class="keyword">except</span>:</span><br><span class="line">                <span class="keyword">pass</span></span><br><span class="line">        </span><br><span class="line">        <span class="comment"># 设置列宽（额外添加一些边距）</span></span><br><span class="line">        adjusted_width = max_width + <span class="number">4</span></span><br><span class="line">        worksheet.column_dimensions[column_name].width = adjusted_width</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="5-设置标题行样式"><a href="#5-设置标题行样式" class="headerlink" title="5.设置标题行样式"></a>5.设置标题行样式</h3><p>1).设置标题行的行高<br>默认行高通常是15左右</p><p>2).冻结首行<br>‘A2’表示从第2行开始冻结，也就是冻结第1行</p><p>3).设置【F列标题】的填充色为【黄色】<br>4).设置【E列】所有有内容的单元格填充为【橙色】<br>5).设置【B列】所有有内容的单元格字体为【红色】</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 1).设置标题行的行高</span></span><br><span class="line">worksheet.row_dimensions[<span class="number">1</span>].height = <span class="number">25</span>  <span class="comment"># 标题行高度设为25</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 2).冻结首行</span></span><br><span class="line">worksheet.freeze_panes = <span class="string">&#x27;A2&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 3).设置F列标题的填充色为黄色</span></span><br><span class="line">f_cell = worksheet[<span class="string">&#x27;F1&#x27;</span>]</span><br><span class="line">f_cell.fill = PatternFill(start_color=<span class="string">&#x27;FFFF00&#x27;</span>, end_color=<span class="string">&#x27;FFFF00&#x27;</span>, fill_type=<span class="string">&#x27;solid&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 4).设置E列所有有内容的单元格填充为橙色</span></span><br><span class="line"><span class="keyword">for</span> cell <span class="keyword">in</span> worksheet[<span class="string">&#x27;E&#x27;</span>]:</span><br><span class="line">    <span class="keyword">if</span> cell.value:  <span class="comment"># 如果单元格有内容</span></span><br><span class="line">        cell.fill = PatternFill(start_color=<span class="string">&#x27;FFA500&#x27;</span>, end_color=<span class="string">&#x27;FFA500&#x27;</span>, fill_type=<span class="string">&#x27;solid&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 5).设置B列所有有内容的单元格字体为红色</span></span><br><span class="line">    <span class="keyword">for</span> cell <span class="keyword">in</span> worksheet[<span class="string">&#x27;B&#x27;</span>]:</span><br><span class="line">        <span class="keyword">if</span> cell.value:  <span class="comment"># 如果单元格有内容</span></span><br><span class="line">            cell.font = Font(name=<span class="string">&#x27;Arial&#x27;</span>, size=<span class="number">11</span>, color=<span class="string">&#x27;FF0000&#x27;</span>)</span><br></pre></td></tr></table></figure><p>最后完整效果如下：<br><img                       lazyload                     src="/images/loading.svg"                     data-src="/img/python-excel-geshi.png"                                     ></p><p>完整代码如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"><span class="keyword">from</span> openpyxl.styles <span class="keyword">import</span> Font, Alignment, Border, Side, PatternFill</span><br><span class="line"></span><br><span class="line"><span class="comment"># 获得当前项目目录</span></span><br><span class="line">proj_path = os.getcwd()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 读取 test.xlsx 文件，把所有内容读取出来，生成一个新的文件 output_test.xlsx</span></span><br><span class="line">ex_file = os.path.join(proj_path, <span class="string">&#x27;test.xlsx&#x27;</span>)</span><br><span class="line">df = pd.read_excel(ex_file)</span><br><span class="line"></span><br><span class="line">output_file = os.path.join(proj_path, <span class="string">&#x27;output_test.xlsx&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 使用ExcelWriter设置格式</span></span><br><span class="line"><span class="keyword">with</span> pd.ExcelWriter(output_file, engine=<span class="string">&#x27;openpyxl&#x27;</span>) <span class="keyword">as</span> writer:</span><br><span class="line">    df.to_excel(writer, index=<span class="literal">False</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 获取工作表</span></span><br><span class="line">    worksheet = writer.sheets[<span class="string">&#x27;Sheet1&#x27;</span>]</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 创建边框样式</span></span><br><span class="line">    thin_border = Border(</span><br><span class="line">        left=Side(style=<span class="string">&#x27;thin&#x27;</span>),</span><br><span class="line">        right=Side(style=<span class="string">&#x27;thin&#x27;</span>),</span><br><span class="line">        top=Side(style=<span class="string">&#x27;thin&#x27;</span>),</span><br><span class="line">        bottom=Side(style=<span class="string">&#x27;thin&#x27;</span>)</span><br><span class="line">    )</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 设置标题行的行高</span></span><br><span class="line">    worksheet.row_dimensions[<span class="number">1</span>].height = <span class="number">25</span>  <span class="comment"># 标题行高度设为25</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 设置字体为Arial、居中对齐和边框</span></span><br><span class="line">    <span class="keyword">for</span> row <span class="keyword">in</span> worksheet.iter_rows():</span><br><span class="line">        <span class="keyword">for</span> cell <span class="keyword">in</span> row:</span><br><span class="line">            cell.font = Font(name=<span class="string">&#x27;Arial&#x27;</span>, size=<span class="number">11</span>)</span><br><span class="line">            cell.alignment = Alignment(horizontal=<span class="string">&#x27;center&#x27;</span>, vertical=<span class="string">&#x27;center&#x27;</span>)</span><br><span class="line">            cell.border = thin_border</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 设置F列标题的填充色为黄色</span></span><br><span class="line">    f_cell = worksheet[<span class="string">&#x27;F1&#x27;</span>]</span><br><span class="line">    f_cell.fill = PatternFill(start_color=<span class="string">&#x27;FFFF00&#x27;</span>, end_color=<span class="string">&#x27;FFFF00&#x27;</span>, fill_type=<span class="string">&#x27;solid&#x27;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 设置E列所有有内容的单元格填充为橙色</span></span><br><span class="line">    <span class="keyword">for</span> cell <span class="keyword">in</span> worksheet[<span class="string">&#x27;E&#x27;</span>]:</span><br><span class="line">        <span class="keyword">if</span> cell.value:  <span class="comment"># 如果单元格有内容</span></span><br><span class="line">            cell.fill = PatternFill(start_color=<span class="string">&#x27;FFA500&#x27;</span>, end_color=<span class="string">&#x27;FFA500&#x27;</span>, fill_type=<span class="string">&#x27;solid&#x27;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 设置B列所有有内容的单元格字体为红色</span></span><br><span class="line">    <span class="keyword">for</span> cell <span class="keyword">in</span> worksheet[<span class="string">&#x27;B&#x27;</span>]:</span><br><span class="line">        <span class="keyword">if</span> cell.value:  <span class="comment"># 如果单元格有内容</span></span><br><span class="line">            cell.font = Font(name=<span class="string">&#x27;Arial&#x27;</span>, size=<span class="number">11</span>, color=<span class="string">&#x27;FF0000&#x27;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 设置列宽</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get_column_width</span>(<span class="params">text</span>):</span></span><br><span class="line">        <span class="comment"># 计算字符串中中文和非中文字符的宽度</span></span><br><span class="line">        width = <span class="number">0</span></span><br><span class="line">        <span class="keyword">for</span> char <span class="keyword">in</span> <span class="built_in">str</span>(text):</span><br><span class="line">            <span class="keyword">if</span> <span class="string">&#x27;\u4e00&#x27;</span> &lt;= char &lt;= <span class="string">&#x27;\u9fff&#x27;</span>:  <span class="comment"># 中文字符</span></span><br><span class="line">                width += <span class="number">2.5</span></span><br><span class="line">            <span class="keyword">else</span>:  <span class="comment"># 非中文字符</span></span><br><span class="line">                width += <span class="number">1</span></span><br><span class="line">        <span class="keyword">return</span> width</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> column <span class="keyword">in</span> worksheet.columns:</span><br><span class="line">        max_width = <span class="number">0</span></span><br><span class="line">        column_name = column[<span class="number">0</span>].column_letter</span><br><span class="line">        </span><br><span class="line">        <span class="comment"># 获取该列所有单元格的最大宽度</span></span><br><span class="line">        <span class="keyword">for</span> cell <span class="keyword">in</span> column:</span><br><span class="line">            <span class="keyword">try</span>:</span><br><span class="line">                cell_width = get_column_width(cell.value)</span><br><span class="line">                <span class="keyword">if</span> cell_width &gt; max_width:</span><br><span class="line">                    max_width = cell_width</span><br><span class="line">            <span class="keyword">except</span>:</span><br><span class="line">                <span class="keyword">pass</span></span><br><span class="line">        </span><br><span class="line">        <span class="comment"># 设置列宽（额外添加一些边距）</span></span><br><span class="line">        adjusted_width = max_width + <span class="number">4</span></span><br><span class="line">        worksheet.column_dimensions[column_name].width = adjusted_width</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 冻结首行</span></span><br><span class="line">    worksheet.freeze_panes = <span class="string">&#x27;A2&#x27;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Linux服务器安装Jupyter Notebook服务</title>
      <link href="/2024/12/24/Linux%E6%9C%8D%E5%8A%A1%E5%99%A8%E5%AE%89%E8%A3%85JupyterNotebook%E6%9C%8D%E5%8A%A1/"/>
      <url>/2024/12/24/Linux%E6%9C%8D%E5%8A%A1%E5%99%A8%E5%AE%89%E8%A3%85JupyterNotebook%E6%9C%8D%E5%8A%A1/</url>
      
        <content type="html"><![CDATA[<p>主要在局域网使用，方便<mark>共享</mark>演示使用。</p><p>不然自己用的话，直接安装下就可以了。我用的服务器是Ubuntu。</p><a id="more"></a><p>安装步骤：</p><h3 id="1-安装notebook"><a href="#1-安装notebook" class="headerlink" title="1.安装notebook"></a>1.安装notebook</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip3 install notebook</span><br></pre></td></tr></table></figure><h3 id="2-生成配置文件"><a href="#2-生成配置文件" class="headerlink" title="2.生成配置文件"></a>2.生成配置文件</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">jupyter notebook --generate-config</span><br></pre></td></tr></table></figure><p>运行可以可以看到在哪个目录下生成了配置文件：jupyter_notebook_config.py</p><p>比如生成的目录为：<code>/home/ubuntu/.jupyter/jupyter_notebook_config.py</code></p><h3 id="3-修改配置文件"><a href="#3-修改配置文件" class="headerlink" title="3.修改配置文件"></a>3.修改配置文件</h3><p>我是直接用ftp把文件下载下来修改后再上传的，也可以用vi直接修改配置文件。</p><p>修改了以下几项内容，默认都是用<code>#</code>进行了注释的，去掉<code>#</code>后修改就行。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 配置 IP 地址和端口</span></span><br><span class="line">c.ServerApp.ip = <span class="string">&#x27;0.0.0.0&#x27;</span></span><br><span class="line">c.ServerApp.port = <span class="number">8888</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 设置密码</span></span><br><span class="line">c.ServerApp.password = <span class="string">&#x27;argon2:$argon2id$v=12$m=10240,t=10,p=8$f6UG+gtSSPaaaaaaaaaaa&#x27;</span></span><br><span class="line">c.ServerApp.password_required = <span class="literal">False</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 防止自动打开浏览器</span></span><br><span class="line">c.ServerApp.open_browser = <span class="literal">False</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 禁用 token 验证</span></span><br><span class="line">c.ServerApp.token = <span class="string">&#x27;&lt;DEPRECATED&gt;&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 确保文件浏览器没有被禁用</span></span><br><span class="line">c.ServerApp.disable_check_xsrf = <span class="literal">False</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 配置默认工作目录和根目录</span></span><br><span class="line">c.ServerApp.notebook_dir = <span class="string">&#x27;/home/ubuntu/jupyter/code&#x27;</span></span><br><span class="line">c.ServerApp.root_dir = <span class="string">&#x27;/home/ubuntu/jupyter/code&#x27;</span></span><br></pre></td></tr></table></figure><p>这里的password是需要运行后生成的，<br>运行<code>python3 -c &quot;from jupyter_server.auth import passwd; print(passwd())&quot;</code>后会提示输入密码，输入密码后就会显示 argon2这一行，生成了密码哈希值（用的是argon2算法）。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Enter password: </span><br><span class="line">Verify password:</span><br></pre></td></tr></table></figure><p>反正我是局域网使用，密码可以直接设为空，就直接回车就行。<br>Jupyter Server（JupyterLab 3.x 及更高版本）中是默认的加密方式是argon2，原来旧版本应该用的是 SHA-1。</p><h3 id="4-运行服务"><a href="#4-运行服务" class="headerlink" title="4.运行服务"></a>4.运行服务</h3><p>直接测试，运行 <code>jupyter notebook</code>。</p><p>看到有这样的提示就可以了。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[I 2024-12-24 10:00:00.000 ServerApp] The Jupyter Server 2.14.2 is running at:</span><br><span class="line">[I 2024-12-24 10:00:00.000 ServerApp] http:&#x2F;&#x2F;127.0.0.1:8888&#x2F;tree</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>通过浏览器访问：<code>http://&lt;your-server-ip&gt;:8888</code>就行。</p><h3 id="5-使用脚本文件后台运行服务"><a href="#5-使用脚本文件后台运行服务" class="headerlink" title="5.使用脚本文件后台运行服务"></a>5.使用脚本文件后台运行服务</h3><p>测试成功后，就用脚本文件在后台运行。</p><p><strong>1).启动脚本 (start_jupyter.sh)</strong></p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 后台启动 Jupyter Notebook</span></span><br><span class="line">nohup jupyter notebook --no-browser --port=8888 --ip=0.0.0.0 &gt; /home/ubuntu/jupyter/notebook.log 2&gt;&amp;1 &amp;</span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;Jupyter Notebook started in the background.&quot;</span></span><br></pre></td></tr></table></figure><p>说明：</p><blockquote><p>nohup：用于让进程在退出终端后继续运行。<br>–no-browser：阻止自动打开浏览器。<br>–port=8888：设置 Jupyter 使用的端口（根据需要调整）。<br>–ip=0.0.0.0：允许所有 IP 地址访问 Jupyter。<br>/home/ubuntu/jupyter/notebook.log 2&gt;&amp;1：将输出和错误重定向到日志文件中。</p></blockquote><p><strong>2).停止脚本 (stop_jupyter.sh)</strong></p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 查找并停止 Jupyter Notebook</span></span><br><span class="line">pkill -f <span class="string">&quot;jupyter-notebook&quot;</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;Jupyter Notebook stopped.&quot;</span></span><br></pre></td></tr></table></figure><p><strong>3).设置脚本权限</strong><br>依次执行以下命令：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">chmod +x start_jupyter.sh</span><br><span class="line">chmod +x stop_jupyter.sh</span><br></pre></td></tr></table></figure><p><strong>4).运行脚本</strong></p><p>启动 Jupyter Notebook：<code>./start_jupyter.sh</code><br>停止 Jupyter Notebook：<code>./stop_jupyter.sh</code></p><p><strong>站内其它关于jupyter notebook的文章：</strong><a href="/2024/01/28/Jupyter-Notebook%E5%AE%89%E8%A3%85%E4%BD%BF%E7%94%A8/" title="Jupyter Notebook安装使用">Jupyter Notebook安装使用</a></p>]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Tailwind框架分页示例</title>
      <link href="/2024/10/06/Tailwind%E6%A1%86%E6%9E%B6%E5%88%86%E9%A1%B5%E7%A4%BA%E4%BE%8B/"/>
      <url>/2024/10/06/Tailwind%E6%A1%86%E6%9E%B6%E5%88%86%E9%A1%B5%E7%A4%BA%E4%BE%8B/</url>
      
        <content type="html"><![CDATA[<p>本示例展示了如何使用Tailwind CSS框架创建一个简单的分页功能。通过这个示例，你可以学习如何在HTML中使用Tailwind CSS类来设计页面布局，并通过JavaScript实现分页逻辑。</p><p>关于Tailwind的部署使用看这篇：<a href="/2024/06/02/TailwindCSS%E5%85%A5%E9%97%A8%E4%BD%93%E9%AA%8C/" title="Tailwind CSS入门体验">Tailwind CSS入门体验</a></p><a id="more"></a><p><strong>功能说明：</strong></p><ul><li>1.页面布局 ：使用Tailwind CSS类来设计页面的布局，包括标题、表格和分页控件。</li><li>2.分页控件 ：通过JavaScript动态生成页码，并实现翻页功能。</li><li>3.每页显示数量 ：用户可以通过下拉框选择每页显示的题目数量，支持5、10、20和全部显示。</li><li>4.翻页功能 ：提供“第1页”、“上一页”、“下一页”和“最后一页”按钮，方便用户快速翻页。</li></ul><h3 id="1-HTML结构"><a href="#1-HTML结构" class="headerlink" title="1.HTML结构"></a>1.HTML结构</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;zh-CN&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>分页示例<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">link</span> <span class="attr">href</span>=<span class="string">&quot;https://cdn.jsdelivr.net/npm/tailwindcss@2.2.19/dist/tailwind.min.css&quot;</span> <span class="attr">rel</span>=<span class="string">&quot;stylesheet&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span> <span class="attr">class</span>=<span class="string">&quot;bg-gray-100&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;container mx-auto py-5&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;bg-white shadow border border-orange-700 rounded-sm mt-3&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;bg-white text-black p-4 flex justify-center items-center&quot;</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">h2</span> <span class="attr">class</span>=<span class="string">&quot;mb-0 text-4xl&quot;</span>&gt;</span>题目查询<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;p-4&quot;</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">table</span> <span class="attr">class</span>=<span class="string">&quot;min-w-full bg-white shadow-md border border-gray-400 rounded border-collapse text-center&quot;</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">thead</span> <span class="attr">class</span>=<span class="string">&quot;bg-blue-100&quot;</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;<span class="name">th</span> <span class="attr">class</span>=<span class="string">&quot;border border-gray-300 px-4 py-2&quot;</span>&gt;</span>ID<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;<span class="name">th</span> <span class="attr">class</span>=<span class="string">&quot;border border-gray-300 px-4 py-2&quot;</span>&gt;</span>问题<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;/<span class="name">thead</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">tbody</span> <span class="attr">id</span>=<span class="string">&quot;question-table&quot;</span>&gt;</span></span><br><span class="line">                        <span class="comment">&lt;!-- 示例题目数据 --&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">tr</span> <span class="attr">class</span>=<span class="string">&quot;hover:bg-gray-100&quot;</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;<span class="name">td</span> <span class="attr">class</span>=<span class="string">&quot;border border-gray-300 px-4 py-2&quot;</span>&gt;</span>1<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;<span class="name">td</span> <span class="attr">class</span>=<span class="string">&quot;border border-gray-300 px-4 py-2 text-left&quot;</span>&gt;</span>问题一<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">tr</span> <span class="attr">class</span>=<span class="string">&quot;hover:bg-gray-100&quot;</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;<span class="name">td</span> <span class="attr">class</span>=<span class="string">&quot;border border-gray-300 px-4 py-2&quot;</span>&gt;</span>2<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;<span class="name">td</span> <span class="attr">class</span>=<span class="string">&quot;border border-gray-300 px-4 py-2 text-left&quot;</span>&gt;</span>问题二<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">tr</span> <span class="attr">class</span>=<span class="string">&quot;hover:bg-gray-100&quot;</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;<span class="name">td</span> <span class="attr">class</span>=<span class="string">&quot;border border-gray-300 px-4 py-2&quot;</span>&gt;</span>3<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;<span class="name">td</span> <span class="attr">class</span>=<span class="string">&quot;border border-gray-300 px-4 py-2 text-left&quot;</span>&gt;</span>问题三<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">tr</span> <span class="attr">class</span>=<span class="string">&quot;hover:bg-gray-100&quot;</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;<span class="name">td</span> <span class="attr">class</span>=<span class="string">&quot;border border-gray-300 px-4 py-2&quot;</span>&gt;</span>4<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;<span class="name">td</span> <span class="attr">class</span>=<span class="string">&quot;border border-gray-300 px-4 py-2 text-left&quot;</span>&gt;</span>问题四<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">tr</span> <span class="attr">class</span>=<span class="string">&quot;hover:bg-gray-100&quot;</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;<span class="name">td</span> <span class="attr">class</span>=<span class="string">&quot;border border-gray-300 px-4 py-2&quot;</span>&gt;</span>5<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;<span class="name">td</span> <span class="attr">class</span>=<span class="string">&quot;border border-gray-300 px-4 py-2 text-left&quot;</span>&gt;</span>问题五<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">tr</span> <span class="attr">class</span>=<span class="string">&quot;hover:bg-gray-100&quot;</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;<span class="name">td</span> <span class="attr">class</span>=<span class="string">&quot;border border-gray-300 px-4 py-2&quot;</span>&gt;</span>6<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;<span class="name">td</span> <span class="attr">class</span>=<span class="string">&quot;border border-gray-300 px-4 py-2 text-left&quot;</span>&gt;</span>问题六<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">tr</span> <span class="attr">class</span>=<span class="string">&quot;hover:bg-gray-100&quot;</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;<span class="name">td</span> <span class="attr">class</span>=<span class="string">&quot;border border-gray-300 px-4 py-2&quot;</span>&gt;</span>7<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;<span class="name">td</span> <span class="attr">class</span>=<span class="string">&quot;border border-gray-300 px-4 py-2 text-left&quot;</span>&gt;</span>问题七<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">tr</span> <span class="attr">class</span>=<span class="string">&quot;hover:bg-gray-100&quot;</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;<span class="name">td</span> <span class="attr">class</span>=<span class="string">&quot;border border-gray-300 px-4 py-2&quot;</span>&gt;</span>8<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;<span class="name">td</span> <span class="attr">class</span>=<span class="string">&quot;border border-gray-300 px-4 py-2 text-left&quot;</span>&gt;</span>问题八<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">tr</span> <span class="attr">class</span>=<span class="string">&quot;hover:bg-gray-100&quot;</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;<span class="name">td</span> <span class="attr">class</span>=<span class="string">&quot;border border-gray-300 px-4 py-2&quot;</span>&gt;</span>9<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;<span class="name">td</span> <span class="attr">class</span>=<span class="string">&quot;border border-gray-300 px-4 py-2 text-left&quot;</span>&gt;</span>问题九<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">tr</span> <span class="attr">class</span>=<span class="string">&quot;hover:bg-gray-100&quot;</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;<span class="name">td</span> <span class="attr">class</span>=<span class="string">&quot;border border-gray-300 px-4 py-2&quot;</span>&gt;</span>10<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;<span class="name">td</span> <span class="attr">class</span>=<span class="string">&quot;border border-gray-300 px-4 py-2 text-left&quot;</span>&gt;</span>问题十<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">                        <span class="comment">&lt;!-- 更多示例数据 --&gt;</span></span><br><span class="line">                    <span class="tag">&lt;/<span class="name">tbody</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">table</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;bg-gray-100 text-center py-4&quot;</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;inline-flex items-center space-x-2&quot;</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">&quot;per_page&quot;</span> <span class="attr">class</span>=<span class="string">&quot;text-lg&quot;</span>&gt;</span>每页显示:<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;per_page&quot;</span> <span class="attr">class</span>=<span class="string">&quot;border border-gray-300 rounded-md px-2 py-1 text-lg&quot;</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">&quot;5&quot;</span>&gt;</span>5<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">&quot;10&quot;</span>&gt;</span>10<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">&quot;20&quot;</span>&gt;</span>20<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">&quot;all&quot;</span>&gt;</span>全部<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">                <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;flex justify-center space-x-4 mt-6 mb-6&quot;</span> <span class="attr">id</span>=<span class="string">&quot;pagination-controls&quot;</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">button</span> <span class="attr">onclick</span>=<span class="string">&quot;goToFirstPage()&quot;</span> <span class="attr">class</span>=<span class="string">&quot;btn bg-blue-600 text-white py-2 px-4 rounded-md hover:bg-blue-400&quot;</span>&gt;</span>第1页<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">button</span> <span class="attr">onclick</span>=<span class="string">&quot;goToPreviousPage()&quot;</span> <span class="attr">class</span>=<span class="string">&quot;btn bg-blue-600 text-white py-2 px-4 rounded-md hover:bg-blue-400&quot;</span>&gt;</span>上一页<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"></span><br><span class="line">                    <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;page_select&quot;</span> <span class="attr">class</span>=<span class="string">&quot;border border-gray-300 rounded-md px-2 py-1 text-lg&quot;</span> <span class="attr">onchange</span>=<span class="string">&quot;goToPage(this.value)&quot;</span>&gt;</span></span><br><span class="line">                        <span class="comment">&lt;!-- 动态生成页码 --&gt;</span></span><br><span class="line">                    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"></span><br><span class="line">                    <span class="tag">&lt;<span class="name">button</span> <span class="attr">onclick</span>=<span class="string">&quot;goToNextPage()&quot;</span> <span class="attr">class</span>=<span class="string">&quot;btn bg-blue-600 text-white py-2 px-4 rounded-md hover:bg-blue-400&quot;</span>&gt;</span>下一页<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">button</span> <span class="attr">onclick</span>=<span class="string">&quot;goToLastPage()&quot;</span> <span class="attr">class</span>=<span class="string">&quot;btn bg-blue-600 text-white py-2 px-4 rounded-md hover:bg-blue-400&quot;</span>&gt;</span>最后一页<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">        <span class="comment">// 脚本部分</span></span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="2-JavaScript逻辑"><a href="#2-JavaScript逻辑" class="headerlink" title="2.JavaScript逻辑"></a>2.JavaScript逻辑</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 全局变量</span></span><br><span class="line"><span class="keyword">let</span> currentPage = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">let</span> perPage = <span class="number">5</span>; <span class="comment">// 默认每页显示5个题目</span></span><br><span class="line"><span class="keyword">let</span> totalItems = <span class="number">10</span>; <span class="comment">// 总题目数</span></span><br><span class="line"><span class="keyword">let</span> totalPages = <span class="built_in">Math</span>.ceil(totalItems / perPage);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 初始化</span></span><br><span class="line"><span class="built_in">window</span>.onload = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    updatePageSelect();</span><br><span class="line">    paginate();</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 获取下拉框的选择</span></span><br><span class="line"><span class="built_in">document</span>.getElementById(<span class="string">&#x27;per_page&#x27;</span>).addEventListener(<span class="string">&#x27;change&#x27;</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    perPage = <span class="built_in">this</span>.value === <span class="string">&#x27;all&#x27;</span> ? totalItems : <span class="built_in">parseInt</span>(<span class="built_in">this</span>.value);</span><br><span class="line">    totalPages = <span class="built_in">Math</span>.ceil(totalItems / perPage);</span><br><span class="line">    currentPage = <span class="number">1</span>; <span class="comment">// 每次修改显示数量时，重置为第一页</span></span><br><span class="line">    updatePageSelect();</span><br><span class="line">    paginate();</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 更新页码下拉框</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">updatePageSelect</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">const</span> pageSelect = <span class="built_in">document</span>.getElementById(<span class="string">&#x27;page_select&#x27;</span>);</span><br><span class="line">    pageSelect.innerHTML = <span class="string">&#x27;&#x27;</span>; <span class="comment">// 清空当前选项</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">1</span>; i &lt;= totalPages; i++) &#123;</span><br><span class="line">        <span class="keyword">const</span> option = <span class="built_in">document</span>.createElement(<span class="string">&#x27;option&#x27;</span>);</span><br><span class="line">        option.value = i;</span><br><span class="line">        option.textContent = <span class="string">`第<span class="subst">$&#123;i&#125;</span>页`</span>;</span><br><span class="line">        <span class="keyword">if</span> (i === currentPage) &#123;</span><br><span class="line">            option.selected = <span class="literal">true</span>; <span class="comment">// 选中当前页</span></span><br><span class="line">        &#125;</span><br><span class="line">        pageSelect.appendChild(option);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 分页逻辑</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">paginate</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">const</span> tableRows = <span class="built_in">document</span>.querySelectorAll(<span class="string">&#x27;#question-table tr&#x27;</span>);</span><br><span class="line">    tableRows.forEach(<span class="function">(<span class="params">row, index</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (index &gt;= (currentPage - <span class="number">1</span>) * perPage &amp;&amp; index &lt; currentPage * perPage) &#123;</span><br><span class="line">            row.style.display = <span class="string">&#x27;&#x27;</span>;  <span class="comment">// 当前页显示</span></span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            row.style.display = <span class="string">&#x27;none&#x27;</span>;  <span class="comment">// 其他页隐藏</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 跳转到指定页</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">goToPage</span>(<span class="params">page</span>) </span>&#123;</span><br><span class="line">    currentPage = <span class="built_in">parseInt</span>(page);</span><br><span class="line">    paginate();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 翻页功能</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">goToFirstPage</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    currentPage = <span class="number">1</span>;</span><br><span class="line">    paginate();</span><br><span class="line">    updatePageSelect();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">goToPreviousPage</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (currentPage &gt; <span class="number">1</span>) &#123;</span><br><span class="line">        currentPage--;</span><br><span class="line">        paginate();</span><br><span class="line">        updatePageSelect();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">goToNextPage</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (currentPage &lt; totalPages) &#123;</span><br><span class="line">        currentPage++;</span><br><span class="line">        paginate();</span><br><span class="line">        updatePageSelect();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">goToLastPage</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    currentPage = totalPages;</span><br><span class="line">    paginate();</span><br><span class="line">    updatePageSelect();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>演示：<br><img                       lazyload                     src="/images/loading.svg"                     data-src="/img/Tailwind_pagination_demo.png"                      style="zoom: 75%;"                ></p>]]></content>
      
      
      <categories>
          
          <category> HTML </category>
          
      </categories>
      
      
        <tags>
            
            <tag> HTML </tag>
            
            <tag> Tailwind </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Ollama+OpenWebui搭建本地大模型(Docker版)</title>
      <link href="/2024/09/28/Ollama-OpenWebui%E6%90%AD%E5%BB%BA%E6%9C%AC%E5%9C%B0%E5%A4%A7%E6%A8%A1%E5%9E%8B-Docker%E7%89%88/"/>
      <url>/2024/09/28/Ollama-OpenWebui%E6%90%AD%E5%BB%BA%E6%9C%AC%E5%9C%B0%E5%A4%A7%E6%A8%A1%E5%9E%8B-Docker%E7%89%88/</url>
      
        <content type="html"><![CDATA[<p>Ollama 是一个便于本地部署和运行大型语言模型（Large Language Models, LLMs）的工具。</p><p>本文将介绍如何使用 Docker 安装和使用 Ollama 和 Open WebUI，并下载模型进行使用。</p><p>没有Docker的话，只需要安装 Python后，用 pip 命令照样可以安装 Open Webui，再下载模型，同样也可以用。</p><a id="more"></a><h2 id="Ollama-Docker-安装"><a href="#Ollama-Docker-安装" class="headerlink" title="Ollama Docker 安装"></a>Ollama Docker 安装</h2><p>开源的大型语言模型平台 Ollama 提供了强大的模型管理功能，允许用户下载、上传和管理各种预训练的语言模型。用户可以根据自己的需求选择合适的模型，并进行定制化配置。</p><p>Ollama项目在Github上 目前有 91.1k的星。</p><p>官网：<a class="link"   href="https://ollama.com/" >https://ollama.com/<i class="fas fa-external-link-alt"></i></a><br>模型：<a class="link"   href="https://ollama.com/library" >https://ollama.com/library<i class="fas fa-external-link-alt"></i></a><br>Github：<a class="link"   href="https://github.com/ollama/ollama" >https://github.com/ollama/ollama<i class="fas fa-external-link-alt"></i></a><br>Docker：<a class="link"   href="https://hub.docker.com/r/ollama/ollama/tags" >https://hub.docker.com/r/ollama/ollama/tags<i class="fas fa-external-link-alt"></i></a></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 1.拉取 Ollama Docker 镜像</span></span><br><span class="line">docker pull ollama/ollama:latest</span><br><span class="line"></span><br><span class="line"><span class="comment"># 2.创建容器（需要映射目录，比如我这是：D:\ollama）</span></span><br><span class="line">docker run -d -v D:\ollama:/root/.ollama -p 11434:11434 --name ollama ollama/ollama</span><br><span class="line"></span><br><span class="line"><span class="comment"># 3.下载模型 llama3.1:8b</span></span><br><span class="line">docker <span class="built_in">exec</span> -it ollama ollama run llama3.1:8b</span><br></pre></td></tr></table></figure><p>完成第2步后，打开浏览器，访问 <code>http://localhost:11434</code>，可以看到 Ollama is running 在运行了。</p><p>运行第3步后，等待模型下载完成，就直接可以使用该模型聊天了。（第一次没有该模型会自动下载该模型）</p><p>在模型页面上可以查看自己需要下载的模型。</p><h2 id="Open-WebUI-Docker-安装"><a href="#Open-WebUI-Docker-安装" class="headerlink" title="Open WebUI Docker 安装"></a>Open WebUI Docker 安装</h2><p>Open WebUI 是一种可扩展的、功能丰富且用户友好的自托管 WebUI，旨在完全离线运行。它支持各种LLM运行器，包括 Ollama 和与 OpenAI 兼容的 API。</p><p>该项目在Github上 目前有 40.6k的星。</p><p>Github：<a class="link"   href="https://github.com/open-webui/open-webui" >https://github.com/open-webui/open-webui<i class="fas fa-external-link-alt"></i></a><br>文档：<a class="link"   href="https://docs.openwebui.com/" >https://docs.openwebui.com/<i class="fas fa-external-link-alt"></i></a></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 1.拉取镜像</span></span><br><span class="line">docker pull dyrnq/open-webui:main</span><br><span class="line"></span><br><span class="line"><span class="comment"># 2.创建容器（需要映射目录，比如我是：D:\open-webui,映射的端口我这是8186）</span></span><br><span class="line">docker run -d -p 8186:8080 --add-host=host.docker.internal:host-gateway -v D:\open-webui:/app/backend/data --name open-webui --restart always dyrnq/open-webui:main</span><br></pre></td></tr></table></figure><p>完成第2步后，打开浏览器，访问 <code>http://localhost:8080</code>，即可开始使用 Open WebUI。用邮箱注册下就可以了。</p><p>如果没有下载模型需要先下载模型，如果前面在ollama上下载过了，这里直接就选择模型就能用了。</p><img                       lazyload                     src="/images/loading.svg"                     data-src="/img/Ollama_OpenWebui.png"                      style="zoom: 50%;"                ><h2 id="pip-命令安装使用-Open-Webui"><a href="#pip-命令安装使用-Open-Webui" class="headerlink" title="pip 命令安装使用 Open Webui"></a>pip 命令安装使用 Open Webui</h2><p>安装过 Python的话，没有Docker也可以用。直接用 pip 命令安装 OpenWebui后，直接在上面下载模型就行。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 安装</span></span><br><span class="line">pip install open-webui</span><br><span class="line"></span><br><span class="line"><span class="comment"># 启动</span></span><br><span class="line">open-webui serve</span><br></pre></td></tr></table></figure><p>打开浏览器，访问 <code>http://localhost:8080</code></p><p>然后是可以下载模型的。去模型页面上看 <a class="link"   href="https://ollama.com/library" >https://ollama.com/library<i class="fas fa-external-link-alt"></i></a> 然后比如要下载 llama3.1:8b 写上就能下载了。</p>]]></content>
      
      
      <categories>
          
          <category> AI </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Docker </tag>
            
            <tag> AI </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Locust分布式负载测试工具简介</title>
      <link href="/2024/08/28/Locust%E5%88%86%E5%B8%83%E5%BC%8F%E8%B4%9F%E8%BD%BD%E6%B5%8B%E8%AF%95%E5%B7%A5%E5%85%B7%E7%AE%80%E4%BB%8B/"/>
      <url>/2024/08/28/Locust%E5%88%86%E5%B8%83%E5%BC%8F%E8%B4%9F%E8%BD%BD%E6%B5%8B%E8%AF%95%E5%B7%A5%E5%85%B7%E7%AE%80%E4%BB%8B/</url>
      
        <content type="html"><![CDATA[<p>Locust 是一个开源的分布式负载测试工具，用于模拟大量并发用户访问指定的目标系统或服务。它特别适合测试 Web 应用程序的性能，可以通过自定义用户行为脚本来模拟复杂的使用场景。</p><p>主要特点：</p><ul><li>Python 驱动：用户行为使用 Python 脚本编写，灵活且易于扩展。</li><li>Web 界面：内置的 Web 界面可用于配置测试和实时监控。</li><li>分布式测试：可以轻松扩展至多台机器，模拟上万名用户。</li><li>可扩展性：通过插件和扩展，可以实现自定义的测试逻辑和报告。</li></ul><a id="more"></a><h2 id="使用教程"><a href="#使用教程" class="headerlink" title="使用教程"></a>使用教程</h2><h3 id="1-安装-Locust"><a href="#1-安装-Locust" class="headerlink" title="1.安装 Locust"></a>1.安装 Locust</h3><p>当然，前提是安装了Python，因为这个是用Python脚本来用的。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install locust</span><br></pre></td></tr></table></figure><p>安装完后，可以通过 <code>locust --version</code> 命令查看是否安装成功。</p><p>如果在Cursor或VS Code等编辑器的powershell中运行命令找不到，但在终端中能运行，明明已经把命令添加到系统环境变量了。可以通过一下方法解决。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 1.用 以下命令查询 powershell 的PATH环境变量</span></span><br><span class="line">   <span class="variable">$env</span>:PATH</span><br><span class="line"></span><br><span class="line"><span class="comment"># 2.如果路径不在其中，用以下命令添加路径</span></span><br><span class="line">   <span class="variable">$env</span>:PATH += <span class="string">&quot;;C:\Users\[用户名]\AppData\Roaming\Python\Python39\Scripts&quot;</span></span><br></pre></td></tr></table></figure><h3 id="2-编写-Locust-测试脚本"><a href="#2-编写-Locust-测试脚本" class="headerlink" title="2. 编写 Locust 测试脚本"></a>2. 编写 Locust 测试脚本</h3><p>创建一个 Python 脚本 locustfile.py，用于定义用户行为。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> locust <span class="keyword">import</span> HttpUser, task, between</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"></span><br><span class="line"><span class="comment"># 预设测试参数</span></span><br><span class="line">os.environ[<span class="string">&#x27;LOCUST_HOST&#x27;</span>] = <span class="string">&#x27;http://192.168.31.175:9090&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 设置 Locust Web 界面端口</span></span><br><span class="line">os.environ[<span class="string">&#x27;LOCUST_WEB_PORT&#x27;</span>] = <span class="string">&#x27;8089&#x27;</span>  <span class="comment"># 这里不设置默认为8089，可以修改</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">WebsiteUser</span>(<span class="params">HttpUser</span>):</span></span><br><span class="line">    wait_time = between(<span class="number">1</span>, <span class="number">5</span>)</span><br><span class="line"></span><br><span class="line"><span class="meta">    @task</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">load_specific_page</span>(<span class="params">self</span>):</span></span><br><span class="line">        self.client.get(<span class="string">&quot;/&quot;</span>) <span class="comment"># /plays/kongtiao.html</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 运行 locust -f locustfile.py</span></span><br></pre></td></tr></table></figure><p>解释：</p><ul><li>HttpUser：定义一个用户类，包含模拟的用户行为。</li><li>wait_time：用户在两次任务之间的等待时间，这里设置为 1 到 5 秒之间随机选择。</li><li>load_main_page：定义一个任务，用户将访问根路径 /。</li><li>sys.argv：允许从命令行接收输入的 URL。</li></ul><h3 id="3-运行-Locust-测试"><a href="#3-运行-Locust-测试" class="headerlink" title="3.运行 Locust 测试"></a>3.运行 Locust 测试</h3><p>使用以下命令运行 Locust：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">locust -f locustfile.py</span><br></pre></td></tr></table></figure><p>打开浏览器并访问 <a class="link"   href="http://localhost:8089/" >http://localhost:8089<i class="fas fa-external-link-alt"></i></a> 可以在界面上设置并发用户数量、生成率等参数，并启动测试。</p><p><strong>性能测试参数（部分）</strong>：</p><ul><li>Type： 请求的类型，例如GET/POST。</li><li>Name：请求的路径。</li><li>Requests：当前请求的数量。</li><li>Fails：当前请求失败的数量。</li><li>Median：中间值，单位毫秒，一半的服务器响应时间低于该值，而另一半高于该值。</li><li>Average：平均值，单位毫秒，所有请求的平均响应时间。</li><li>Max：请求的最大服务器响应时间，单位毫秒。</li></ul><p>点击【CHARTS】菜单，可以查看性能图表。</p>]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ffmpeg：多媒体处理利器及常用命令详解</title>
      <link href="/2024/06/23/ffmpeg%E5%A4%9A%E5%AA%92%E4%BD%93%E5%A4%84%E7%90%86%E5%88%A9%E5%99%A8%E5%8F%8A%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4%E8%AF%A6%E8%A7%A3/"/>
      <url>/2024/06/23/ffmpeg%E5%A4%9A%E5%AA%92%E4%BD%93%E5%A4%84%E7%90%86%E5%88%A9%E5%99%A8%E5%8F%8A%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4%E8%AF%A6%E8%A7%A3/</url>
      
        <content type="html"><![CDATA[<p>FFmpeg 是一款功能强大的跨平台多媒体框架，可用于各种音视频处理任务。它提供一系列命令行工具，用于转换、编辑、合并、拆分、滤镜、流化等操作。FFmpeg <strong>开源免费</strong>，支持多种操作系统，包括 Windows、Linux 和 macOS。</p><p>可以执行音频和视频多种格式的录影、转换、串流功能，包含了libavcodec——这是一个用于多个项目中音频和视频的解码器库，以及libavformat——一个音频与视频格式转换库。</p><a id="more"></a><h2 id="一、下载FFmpeg"><a href="#一、下载FFmpeg" class="headerlink" title="一、下载FFmpeg"></a>一、下载FFmpeg</h2><h3 id="1-下载FFmpeg"><a href="#1-下载FFmpeg" class="headerlink" title="1.下载FFmpeg"></a>1.下载FFmpeg</h3><p>官网就可以下载 FFmpeg：（<a class="link"   href="http://ffmpeg.org/download.html" >http://ffmpeg.org/download.html<i class="fas fa-external-link-alt"></i></a> ）</p><p>Windows系统的话，选择【Windows EXE Files】-&gt;【Windows builds from gyan.dev】。</p><p>页面上的都可以下载，比如我这直接下载【release builds】中的 ffmpeg-release-essentials.7z，目前最新的版本。如下图所示：<br><img                       lazyload                     src="/images/loading.svg"                     data-src="/img/ffmpeg_download_m3u8_1.png"                      style="zoom: 50%;"                ></p><h3 id="2-添加到环境变量"><a href="#2-添加到环境变量" class="headerlink" title="2.添加到环境变量"></a>2.添加到环境变量</h3><p>下载后是个压缩包，直接解压出来。比如我这解压出来是个 ffmpeg-5.0.1-essentials_build 目录，然后直接把这个目录下的<strong>bin目录</strong>添加到系统环境变量就行。（怎么添加环境变量，百度一下就有）</p><p>因为bin目录下有 ffmpeg.exe 可执行程序，我们在命令行里用 ffmpeg命令时，用的就是这个。</p><h2 id="二、常用命令"><a href="#二、常用命令" class="headerlink" title="二、常用命令"></a>二、常用命令</h2><h3 id="1-音-视频格式转换"><a href="#1-音-视频格式转换" class="headerlink" title="1.音/视频格式转换"></a>1.音/视频格式转换</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 视频格式转换</span></span><br><span class="line">ffmpeg -i input_video.mp4 output_video.avi</span><br><span class="line"></span><br><span class="line"><span class="comment"># 音频格式转换（比特率192kbps）</span></span><br><span class="line">ffmpeg -i input.wav -codec:a libmp3lame -b:a 192k output.mp3</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">命令详解：</span><br><span class="line">-i input_video.mp4：指定输入视频文件。</span><br><span class="line">output_video.avi：输出的视频文件。</span><br><span class="line">-codec:a libmp3lame：指定使用libmp3lame编解码器进行MP3编码。</span><br><span class="line">-b:a 192k：音频比特率192kbps。</span><br></pre></td></tr></table></figure><h3 id="2-从视频中提取音频"><a href="#2-从视频中提取音频" class="headerlink" title="2.从视频中提取音频"></a>2.从视频中提取音频</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ffmpeg -i input_video.mp4 -vn -acodec libmp3lame output_audio.mp3</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">命令详解：</span><br><span class="line">-i input.mp4：指定输入视频文件。</span><br><span class="line">-vn：禁用视频流，只处理音频流。</span><br><span class="line">-acodec libmp3lame：指定音频编解码器为LAME MP3。</span><br><span class="line">output_audio.mp3：指定输出音频文件。</span><br></pre></td></tr></table></figure><h3 id="3-音-视频剪辑"><a href="#3-音-视频剪辑" class="headerlink" title="3.音/视频剪辑"></a>3.音/视频剪辑</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 视频剪辑（剪辑出从10秒到20秒视频）</span></span><br><span class="line">ffmpeg -i input_video.mp4 -ss 00:00:10 -to 00:00:20 -c copy output_video.mp4</span><br><span class="line"></span><br><span class="line"><span class="comment"># 音频剪辑（剪辑出从1分30秒到1分45秒音频）</span></span><br><span class="line">ffmpeg -i input_audio.mp3 -ss 00:01:30 -to 00:01:45 -c copy output_clip.mp3</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">命令详解：</span><br><span class="line">-ss 00:01:30：指定剪辑的开始时间，这里是从1分30秒开始。</span><br><span class="line">-to 00:01:45：指定剪辑的结束时间，这里是1分45秒。</span><br><span class="line">-c copy：指定使用相同的音频编解码器和格式进行复制。</span><br></pre></td></tr></table></figure><h3 id="4-合并音视频"><a href="#4-合并音视频" class="headerlink" title="4.合并音视频"></a>4.合并音视频</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">ffmpeg -i video.mp4 -i audio.mp3 -c:v copy -c:a aac output.mp4</span><br><span class="line"></span><br><span class="line"><span class="comment"># 都不重新编码，速度快，但文件质量可能会略微下降</span></span><br><span class="line">ffmpeg -i video.mp4 -i audio.mp3 -c copy output.mp4</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">命令详解：</span><br><span class="line">-i video.mp4：输入视频文件</span><br><span class="line">-i audio.mp3：输入音频文件</span><br><span class="line">-c:v copy：&#96;-c:v&#96;指定视频编解码器，copy表示直接复制视频流不重新编码。</span><br><span class="line">-c:a aac：&#96;-c:a&#96;指定音频编解码器，aac表示将音频重新编码为AAC格式。</span><br><span class="line">output.mp4：输出的视频文件</span><br><span class="line"></span><br><span class="line">还可以添加其它参数：</span><br><span class="line">1.音频延迟0.5秒（-itsoffset 0.5）</span><br><span class="line">ffmpeg -i video.mp4 -itsoffset 0.5 -i audio.mp3 -c:v copy -c:a aac output.mp4</span><br><span class="line"></span><br><span class="line">2.音频音量减半（-filter_complex &quot;[1:a]volume&#x3D;0.5[a]&quot;）</span><br><span class="line">ffmpeg -i video.mp4 -i audio.mp3 -filter_complex &quot;[1:a]volume&#x3D;0.5[a]&quot; -map 0:v -map &quot;[a]&quot; -c:v copy -c:a aac output.mp4</span><br></pre></td></tr></table></figure><h3 id="5-调整视频分辨率"><a href="#5-调整视频分辨率" class="headerlink" title="5.调整视频分辨率"></a>5.调整视频分辨率</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ffmpeg -i input.mp4 -vf scale=1280:720 output.mp4</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">命令详解：</span><br><span class="line">-vf scale&#x3D;1280:720：分辨率调整为1280x720。</span><br></pre></td></tr></table></figure><h3 id="6-为视频添加字幕"><a href="#6-为视频添加字幕" class="headerlink" title="6.为视频添加字幕"></a>6.为视频添加字幕</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ffmpeg -i input.mp4 -vf subtitle=subtitle.srt output.mp4</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">命令详解：</span><br><span class="line">-vf subtitle&#x3D;subtitle.srt：添加 subtitle.srt 字幕。</span><br></pre></td></tr></table></figure><h3 id="7-下载m3u8格式的视频"><a href="#7-下载m3u8格式的视频" class="headerlink" title="7.下载m3u8格式的视频"></a>7.下载m3u8格式的视频</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 1.直接下载（一般默认最清晰的版本）</span></span><br><span class="line">ffmpeg -i m3u8地址 -c copy output.mp4</span><br><span class="line"></span><br><span class="line"><span class="comment"># 2.添加参数下载（确保音频格式符合 MP4 容器的要求，以避免兼容性问题。）</span></span><br><span class="line">ffmpeg -i m3u8地址 -c copy -bsf:a aac_adtstoasc output.mp4</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">命令详解：</span><br><span class="line">-i m3u8地址：要下载的m3u8地址。</span><br><span class="line">-c copy：复制音视频流，不重新编码。</span><br><span class="line">-bsf:a aac_adtstoasc：用于对音频流进行格式转换，将AAC ADTS格式转换为AAC ASC格式。AAC ADTS格式常用于HTTP流传输，而AAC ASC格式常用于MP4文件。</span><br></pre></td></tr></table></figure><h3 id="8-合并多个音-视频文件"><a href="#8-合并多个音-视频文件" class="headerlink" title="8.合并多个音/视频文件"></a>8.合并多个音/视频文件</h3><p>音频与视频是一样的，以下用视频举例。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 1.文件数量少，直接合并</span></span><br><span class="line">ffmpeg -i <span class="string">&quot;concat:part1.mp4|part2.mp4|part3.mp4&quot;</span> -c copy output1.mp4</span><br><span class="line"></span><br><span class="line"><span class="comment"># 2.文件较多时</span></span><br><span class="line"><span class="comment"># 需要创建一个filelist.txt文件，存放需要合并的视频文件名</span></span><br><span class="line">ffmpeg -f concat -safe 0 -i filelist.txt -c copy output2.mp4</span><br></pre></td></tr></table></figure><p>filelist.txt 文件内容如下：</p><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">file &#x27;F:\video\1.ts&#x27;</span><br><span class="line">file &#x27;F:\video\2.ts&#x27;</span><br><span class="line">file &#x27;F:\video\3.ts&#x27;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">命令详解：</span><br><span class="line">-f concat：指定用 concat 格式。</span><br><span class="line">-safe 0：允许文件名包含不安全字符（如空格）。</span><br><span class="line">-i filelist.txt：输入文件列表。</span><br><span class="line">-c copy：直接复制视频和音频流，不重新编码。</span><br><span class="line">output2.mp4：输出文件。</span><br></pre></td></tr></table></figure><h2 id="三、博客内其它相关文章"><a href="#三、博客内其它相关文章" class="headerlink" title="三、博客内其它相关文章"></a>三、博客内其它相关文章</h2><ul><li><a href="/2022/12/18/yt-dlp-%E4%BD%BF%E7%94%A8%E6%95%99%E7%A8%8B/" title="yt-dlp 使用教程">yt-dlp 使用教程</a></li><li><a href="/2022/09/21/%E7%94%A8ffmpeg%E5%90%88%E5%B9%B6%E5%A4%9A%E4%B8%AAts%E8%A7%86%E9%A2%91%E6%96%87%E4%BB%B6/" title="用ffmpeg合并多个ts视频文件">用ffmpeg合并多个ts视频文件</a></li><li><a href="/2022/05/03/%E7%94%A8ffmpeg%E4%B8%8B%E8%BD%BDm3u8%E6%A0%BC%E5%BC%8F%E8%A7%86%E9%A2%91/" title="用FFmpeg下载m3u8格式视频">用FFmpeg下载m3u8格式视频</a></li><li><a href="/2022/04/09/you-get%20%E4%BD%BF%E7%94%A8%E6%95%99%E7%A8%8B/" title="you-get 使用教程">you-get 使用教程</a></li><li><a href="/2022/04/09/youtube-dl%20%E4%BD%BF%E7%94%A8%E6%95%99%E7%A8%8B/" title="youtube-dl 使用教程">youtube-dl 使用教程</a></li></ul><p>yt-dlp与you-get、youtube-dl 这两差不多，yt-dlp 能下载包括油管视频在内的不少视频了。都是一款采用Python 编写的免费、开源、命令行程序，主要是用来下载视频的。</p>]]></content>
      
      
      <categories>
          
          <category> Software </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Software </tag>
            
            <tag> ffmpeg </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Tailwind CSS入门体验</title>
      <link href="/2024/06/02/TailwindCSS%E5%85%A5%E9%97%A8%E4%BD%93%E9%AA%8C/"/>
      <url>/2024/06/02/TailwindCSS%E5%85%A5%E9%97%A8%E4%BD%93%E9%AA%8C/</url>
      
        <content type="html"><![CDATA[<p>Tailwind CSS 的工作原理是扫描所有 HTML 文件、JavaScript 组件和任何其他类名称模板，生成相应的样式，然后将它们写入静态 CSS 文件。<br>它快速、灵活且可靠—— 具有零运行时间。</p><p>毕竟不会写前端，原来的页面都直接简单的用Bootstrap 框架，然后看到现在挺多用Tailwind CSS的，就试试，看了下效果的确比Bootstrap肯定是丰富很多的。（反正都是让AI调整，没啥基础也没关系，能差不多看懂html就行了）</p><p>官网文档：<a class="link"   href="https://tailwind.nodejs.cn/docs/" >https://tailwind.nodejs.cn/docs/<i class="fas fa-external-link-alt"></i></a></p><a id="more"></a><p>官网也有提供体验网址：<a class="link"   href="https://play.tailwindcss.com/" >https://play.tailwindcss.com/<i class="fas fa-external-link-alt"></i></a></p><h2 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h2><ul><li>1.安装Node.js。这个反正用Hexo博客和Gitbook的，之前都已经有装好了。</li><li>2.Nginx等服务器。</li></ul><h2 id="体验步骤"><a href="#体验步骤" class="headerlink" title="体验步骤"></a>体验步骤</h2><p>基本上看官方文档上 Tailwind CLI上面有具体的步骤。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 1.创建项目目录</span></span><br><span class="line">mkdir my-tailwind-project</span><br><span class="line"><span class="built_in">cd</span> my-tailwind-project</span><br><span class="line"></span><br><span class="line"><span class="comment"># 2.初始化npm项目（已安装node）</span></span><br><span class="line">npm init -y</span><br><span class="line"></span><br><span class="line"><span class="comment"># 3.安装Tailwind CSS和所需依赖</span></span><br><span class="line">npm install -D tailwindcss</span><br><span class="line">npx tailwindcss init</span><br></pre></td></tr></table></figure><p>4.创建Tailwind CSS配置文件tailwind.config.js</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/** <span class="doctag">@type <span class="type">&#123;import(&#x27;tailwindcss&#x27;).Config&#125;</span> </span>*/</span></span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  content: [<span class="string">&quot;./src/**/*.&#123;html,js&#125;&quot;</span>],</span><br><span class="line">  theme: &#123;</span><br><span class="line">    extend: &#123;&#125;,</span><br><span class="line">  &#125;,</span><br><span class="line">  plugins: [],</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>5.将 Tailwind 指令添加到 CSS（src/input.css）</p><p>需要先在项目目录下创建src目录，再创建input.css文件。内容如下：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">@tailwind</span> base;</span><br><span class="line"><span class="keyword">@tailwind</span> components;</span><br><span class="line"><span class="keyword">@tailwind</span> utilities;</span><br></pre></td></tr></table></figure><p>6.编译Tailwind CSS</p><p>在 package.json 文件中添加一个脚本</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&quot;scripts&quot;: &#123;</span><br><span class="line">  &quot;build:css&quot;: &quot;npx tailwindcss -i ./src/input.css -o ./src/output.css --minify&quot;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>7.在src目录下创建 index.html 文件</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">title</span>&gt;</span>WebStackPage Navigation<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">link</span> <span class="attr">href</span>=<span class="string">&quot;dist/output.css&quot;</span> <span class="attr">rel</span>=<span class="string">&quot;stylesheet&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span> <span class="attr">class</span>=<span class="string">&quot;bg-gray-100&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">nav</span> <span class="attr">class</span>=<span class="string">&quot;bg-white shadow-md&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;container mx-auto p-4 flex justify-between items-center&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span> <span class="attr">class</span>=<span class="string">&quot;text-2xl font-bold text-gray-800&quot;</span>&gt;</span>WebStackPage<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#home&quot;</span> <span class="attr">class</span>=<span class="string">&quot;text-gray-700 hover:text-gray-900 px-3 py-2 rounded-md text-sm font-medium&quot;</span>&gt;</span>Home<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#categories&quot;</span> <span class="attr">class</span>=<span class="string">&quot;text-gray-700 hover:text-gray-900 px-3 py-2 rounded-md text-sm font-medium&quot;</span>&gt;</span>Categories<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#about&quot;</span> <span class="attr">class</span>=<span class="string">&quot;text-gray-700 hover:text-gray-900 px-3 py-2 rounded-md text-sm font-medium&quot;</span>&gt;</span>About<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#contact&quot;</span> <span class="attr">class</span>=<span class="string">&quot;text-gray-700 hover:text-gray-900 px-3 py-2 rounded-md text-sm font-medium&quot;</span>&gt;</span>Contact<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">nav</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">main</span> <span class="attr">class</span>=<span class="string">&quot;container mx-auto mt-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">section</span> <span class="attr">id</span>=<span class="string">&quot;home&quot;</span> <span class="attr">class</span>=<span class="string">&quot;my-8&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">h2</span> <span class="attr">class</span>=<span class="string">&quot;text-3xl font-bold text-gray-800&quot;</span>&gt;</span>Welcome to WebStackPage<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">&quot;mt-2 text-gray-600&quot;</span>&gt;</span>A curated list of useful websites and resources.<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">section</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">section</span> <span class="attr">id</span>=<span class="string">&quot;categories&quot;</span> <span class="attr">class</span>=<span class="string">&quot;my-8&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">h2</span> <span class="attr">class</span>=<span class="string">&quot;text-2xl font-bold text-gray-800&quot;</span>&gt;</span>Categories<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4 mt-4&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;bg-white p-6 rounded-lg shadow-md&quot;</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">h3</span> <span class="attr">class</span>=<span class="string">&quot;text-xl font-semibold text-gray-800&quot;</span>&gt;</span>Development<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">ul</span> <span class="attr">class</span>=<span class="string">&quot;mt-2&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;https://developer.mozilla.org/&quot;</span> <span class="attr">class</span>=<span class="string">&quot;text-blue-500 hover:underline&quot;</span>&gt;</span>MDN Web Docs<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;https://stackoverflow.com/&quot;</span> <span class="attr">class</span>=<span class="string">&quot;text-blue-500 hover:underline&quot;</span>&gt;</span>Stack Overflow<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;https://github.com/&quot;</span> <span class="attr">class</span>=<span class="string">&quot;text-blue-500 hover:underline&quot;</span>&gt;</span>GitHub<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;bg-white p-6 rounded-lg shadow-md&quot;</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">h3</span> <span class="attr">class</span>=<span class="string">&quot;text-xl font-semibold text-gray-800&quot;</span>&gt;</span>Design<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">ul</span> <span class="attr">class</span>=<span class="string">&quot;mt-2&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;https://dribbble.com/&quot;</span> <span class="attr">class</span>=<span class="string">&quot;text-blue-500 hover:underline&quot;</span>&gt;</span>Dribbble<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;https://www.behance.net/&quot;</span> <span class="attr">class</span>=<span class="string">&quot;text-blue-500 hover:underline&quot;</span>&gt;</span>Behance<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;https://www.canva.com/&quot;</span> <span class="attr">class</span>=<span class="string">&quot;text-blue-500 hover:underline&quot;</span>&gt;</span>Canva<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;bg-white p-6 rounded-lg shadow-md&quot;</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">h3</span> <span class="attr">class</span>=<span class="string">&quot;text-xl font-semibold text-gray-800&quot;</span>&gt;</span>Learning<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">ul</span> <span class="attr">class</span>=<span class="string">&quot;mt-2&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;https://www.coursera.org/&quot;</span> <span class="attr">class</span>=<span class="string">&quot;text-blue-500 hover:underline&quot;</span>&gt;</span>Coursera<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;https://www.udemy.com/&quot;</span> <span class="attr">class</span>=<span class="string">&quot;text-blue-500 hover:underline&quot;</span>&gt;</span>Udemy<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;https://www.khanacademy.org/&quot;</span> <span class="attr">class</span>=<span class="string">&quot;text-blue-500 hover:underline&quot;</span>&gt;</span>Khan Academy<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">section</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">section</span> <span class="attr">id</span>=<span class="string">&quot;about&quot;</span> <span class="attr">class</span>=<span class="string">&quot;my-8&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">h2</span> <span class="attr">class</span>=<span class="string">&quot;text-2xl font-bold text-gray-800&quot;</span>&gt;</span>About<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">&quot;mt-2 text-gray-600&quot;</span>&gt;</span>WebStackPage is a curated list of useful websites and resources for developers, designers, and learners.<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">section</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">section</span> <span class="attr">id</span>=<span class="string">&quot;contact&quot;</span> <span class="attr">class</span>=<span class="string">&quot;my-8&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">h2</span> <span class="attr">class</span>=<span class="string">&quot;text-2xl font-bold text-gray-800&quot;</span>&gt;</span>Contact<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">&quot;mt-2 text-gray-600&quot;</span>&gt;</span>Get in touch with us through our contact form or email.<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">section</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">main</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>8.构建css文件</p><p>通过以下命令构建 output.css 文件。每次修改 index.html 中的文件后，添加了新的class，就运行下面的指令重新构建 css文件。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm run build:css</span><br></pre></td></tr></table></figure><p>最后，把 index.html文件和output.css文件一起放到nginx目录中就可以访问了。</p><p>PS.VS Code中也有Tailwind CSS IntelliSense 插件。很方便调整一些颜色之类的。</p>]]></content>
      
      
      <categories>
          
          <category> HTML </category>
          
      </categories>
      
      
        <tags>
            
            <tag> HTML </tag>
            
            <tag> Tailwind </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Postgresql数据库启动失败invalid primary checkpoint record</title>
      <link href="/2024/05/23/Postgresql%E6%95%B0%E6%8D%AE%E5%BA%93%E5%90%AF%E5%8A%A8%E5%A4%B1%E8%B4%A5invalid-primary-checkpoint-record/"/>
      <url>/2024/05/23/Postgresql%E6%95%B0%E6%8D%AE%E5%BA%93%E5%90%AF%E5%8A%A8%E5%A4%B1%E8%B4%A5invalid-primary-checkpoint-record/</url>
      
        <content type="html"><![CDATA[<p>电脑可能自动更新重启了后，Postgresql的服务突然就不行了，启动不了了。我是用 Docker创建的postgresql的容器，一直在 Restarting。</p><p>然后看了下日志LOG，内容如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">LOG:  starting PostgreSQL 12.17 on x86_64-pc-linux-musl, compiled by gcc (Alpine 13.2.1_git20231014) 13.2.1 20231014, 64-bit</span><br><span class="line">2024-05-23 09:10:15 2024-05-23 01:10:15.368 UTC [1] LOG:  listening on IPv4 address &quot;0.0.0.0&quot;, port 5432</span><br><span class="line">2024-05-23 09:10:15 2024-05-23 01:10:15.368 UTC [1] LOG:  listening on IPv6 address &quot;::&quot;, port 5432</span><br><span class="line">2024-05-23 09:10:15 2024-05-23 01:10:15.420 UTC [1] LOG:  listening on Unix socket &quot;&#x2F;var&#x2F;run&#x2F;postgresql&#x2F;.s.PGSQL.5432&quot;</span><br><span class="line">2024-05-23 09:10:15 2024-05-23 01:10:15.591 UTC [22] LOG:  database system was interrupted; last known up at 2024-05-22 07:06:03 UTC</span><br><span class="line">2024-05-23 09:10:22 2024-05-23 01:10:22.387 UTC [22] LOG:  invalid record length at 0&#x2F;2475D98: wanted 24, got 0</span><br><span class="line">2024-05-23 09:10:22 2024-05-23 01:10:22.387 UTC [22] LOG:  invalid primary checkpoint record</span><br><span class="line">2024-05-23 09:10:22 2024-05-23 01:10:22.387 UTC [22] PANIC:  could not locate a valid checkpoint record</span><br><span class="line">2024-05-23 09:10:22 2024-05-23 01:10:22.387 UTC [1] LOG:  startup process (PID 22) was terminated by signal 6: Aborted</span><br><span class="line">2024-05-23 09:10:22 2024-05-23 01:10:22.387 UTC [1] LOG:  aborting startup due to startup process failure</span><br><span class="line">2024-05-23 09:10:22 2024-05-23 01:10:22.389 UTC [1] LOG:  database system is shut down</span><br></pre></td></tr></table></figure><p>看到关键的应该是这句 <mark>invalid primary checkpoint record</mark></p><a id="more"></a><p>然后先问了下AI助手，回答如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">根据日志显示，PostgreSQL启动过程中出现了错误，具体是因为数据库系统中断导致无法定位有效的检查点记录。这可能是由于数据文件损坏或其他原因导致的数据库系统异常。</span><br><span class="line"></span><br><span class="line">解决方法：</span><br><span class="line">1. 尝试使用pg_resetwal命令来重置WAL日志文件，该命令可以修复一些WAL文件相关的问题。</span><br><span class="line">2. 如果重置WAL文件无效，可以尝试使用pg_resetxlog命令来重置XLOG文件。</span><br><span class="line">3. 如果以上方法都无效，可能需要考虑恢复数据库备份或者重新初始化数据库。</span><br><span class="line"></span><br><span class="line">请注意，在尝试任何修复操作之前，请务必备份数据库文件，以免造成数据丢失。</span><br></pre></td></tr></table></figure><p>感觉就是因为电脑自动重启导致的问题。于是网上去搜了下<mark>postgresql数据库启动失败 invalid primary checkpoint record</mark></p><p>找到了解决方法。</p><p>步骤：</p><p><strong>1.查看自己容器使用的docker镜像</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker images</span><br></pre></td></tr></table></figure><p>结果关于postgres的关键信息如下，这里关注TAG是不是latest，我这里用的是 12.17-alpine3.19。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">REPOSITORY                 TAG</span><br><span class="line">postgres                   12.17-alpine3.19</span><br></pre></td></tr></table></figure><p><strong>2.找到容器映射的目录</strong></p><p>比如我的容器名是：postgres</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker inspect postgres</span><br></pre></td></tr></table></figure><p>运行以上命令后，得到关键信息：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&quot;Mounts&quot;: [</span><br><span class="line">           &#123;</span><br><span class="line">               &quot;Type&quot;: &quot;bind&quot;,</span><br><span class="line">               &quot;Source&quot;: &quot;E:\\Docker\\PostgreSQL\\data&quot;,</span><br><span class="line">               &quot;Destination&quot;: &quot;&#x2F;var&#x2F;lib&#x2F;postgresql&#x2F;data&quot;,</span><br><span class="line">               &quot;Mode&quot;: &quot;&quot;,</span><br><span class="line">               &quot;RW&quot;: true,</span><br><span class="line">               &quot;Propagation&quot;: &quot;rprivate&quot;</span><br><span class="line">           &#125;</span><br><span class="line">       ],</span><br></pre></td></tr></table></figure><p>这里 Source 后面就是本地映射的目录（我这里是Windows系统，这个没有关系），Destination后面就是对应的容器中的目录。</p><p><strong>3.停止当前容器</strong></p><p>比如我的容器名是：postgres</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker stop postgres</span><br></pre></td></tr></table></figure><p><strong>4.重点解决过程</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 1.进入新的docker容器</span></span><br><span class="line"><span class="comment"># -v 后面的参数是本地的映射目录:容器中的目录（通过docker inspect postgres得到的信息）</span></span><br><span class="line"><span class="comment"># postgres:12.17-alpine3.19 是镜像名:TAG，如果不写后面的，默认是latest</span></span><br><span class="line">docker run -it -v E:\Docker\PostgreSQL\data:/var/lib/postgresql/data postgres:12.17-alpine3.19 /bin/bash</span><br><span class="line"></span><br><span class="line"><span class="comment"># 2.切换到postgres用户方法执行以下命令</span></span><br><span class="line">su postgres</span><br><span class="line"></span><br><span class="line"><span class="comment"># 3.执行 pg_resetwal 命令</span></span><br><span class="line">pg_resetwal -f /var/lib/postgresql/data</span><br><span class="line"></span><br><span class="line">结果如下：</span><br><span class="line">Write-ahead <span class="built_in">log</span> reset</span><br><span class="line">````</span><br><span class="line"></span><br><span class="line">那就ok了！再启动容器，就没问题了！</span><br><span class="line"></span><br><span class="line">PS.如果执行 pg_resetwal 报错如下：</span><br></pre></td></tr></table></figure><p>pg_resetwal: error: lock file “postmaster.pid” exists<br>pg_resetwal: Is a server running?  If not, delete the lock file and try again</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">那就先执行以下命令，再重新执行 pg_resetwal 命令。</span><br><span class="line">&#96;&#96;&#96;bash</span><br><span class="line">rm &#x2F;var&#x2F;lib&#x2F;postgresql&#x2F;data&#x2F;postmaster.pid</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Postgresql </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Postgresql </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>frp客户端容器启动失败</title>
      <link href="/2024/03/30/frp%E5%AE%A2%E6%88%B7%E7%AB%AF%E5%AE%B9%E5%99%A8%E5%90%AF%E5%8A%A8%E5%A4%B1%E8%B4%A5/"/>
      <url>/2024/03/30/frp%E5%AE%A2%E6%88%B7%E7%AB%AF%E5%AE%B9%E5%99%A8%E5%90%AF%E5%8A%A8%E5%A4%B1%E8%B4%A5/</url>
      
        <content type="html"><![CDATA[<p>直接用Docker上的frp，突然某一天，frp的客户端这边连不上了，查看日志提示：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">frp login to server failed EOF</span><br></pre></td></tr></table></figure><p>但是，在群晖上的frp客户端好像是正常使用的。</p><a id="more"></a><p>在网上查了下，说是：</p><blockquote><p>原来frp在v0.25.0版本后增加了一个客户端选项，支持了tls传输，也就是传说中的非对称加密，原来在frps初始化服务时，在内存中已经为我们生成了一个简易的TLS服务！</p><p>开启的办法很简单，在客户端原来的 [common] 配置中加入t1s_enable = true 即可！</p></blockquote><p>于是，直接在 frpc.ini 配置文件的 [common] 处后面加上一行：</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">t1s＿enable = true</span><br></pre></td></tr></table></figure><p>再重新建了下容器，就ok了。</p><p>用docker搭建frp的教程：<a href="/2022/06/18/Docker%E6%90%AD%E5%BB%BAfrp%E5%86%85%E7%BD%91%E7%A9%BF%E9%80%8F%E6%9C%8D%E5%8A%A1%E5%99%A8/" title="Docker搭建frp内网穿透服务器">Docker搭建frp内网穿透服务器</a></p>]]></content>
      
      
      <categories>
          
          <category> Docker </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
            <tag> Docker </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Python Jupyter使用海龟画图(Turtle)</title>
      <link href="/2024/02/24/Python-Jupyter%E4%BD%BF%E7%94%A8%E6%B5%B7%E9%BE%9F%E7%94%BB%E5%9B%BETurtle/"/>
      <url>/2024/02/24/Python-Jupyter%E4%BD%BF%E7%94%A8%E6%B5%B7%E9%BE%9F%E7%94%BB%E5%9B%BETurtle/</url>
      
        <content type="html"><![CDATA[<p>正常我们使用Turtle海龟画图，只需要安装PythonTurtle库就行了。</p><p>但在 Jupyter中，因为是在web网页上，所以还需要安装别的，所以用的是 ipyturtle3 库，安装的时候会把依赖库都安装上。</p><p>注意：<mark>不是 ipyturtle 而是 ipyturtle3，ipyturtle是旧的了。</mark></p><a id="more"></a><h2 id="普通安装"><a href="#普通安装" class="headerlink" title="普通安装"></a>普通安装</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install PythonTurtle</span><br></pre></td></tr></table></figure><p>使用举例：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 画6个正方形</span></span><br><span class="line"><span class="comment"># 导入库</span></span><br><span class="line"><span class="keyword">import</span> turtle <span class="keyword">as</span> t</span><br><span class="line"></span><br><span class="line"><span class="comment"># 画图形</span></span><br><span class="line"><span class="keyword">for</span> x <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">6</span>):</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">4</span>):</span><br><span class="line">        t.forward(<span class="number">50</span>)</span><br><span class="line">        t.left(<span class="number">90</span>)</span><br><span class="line">    t.left(<span class="number">60</span>)</span><br><span class="line"><span class="comment"># 完成</span></span><br><span class="line">t.done()</span><br></pre></td></tr></table></figure><h2 id="Jupyter中普通安装"><a href="#Jupyter中普通安装" class="headerlink" title="Jupyter中普通安装"></a>Jupyter中普通安装</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install ipyturtle3</span><br></pre></td></tr></table></figure><p>就是前面导入的库不同，需要初始化一下环境。用到canvas。</p><p>下面基础画图的代码，就基本上可以用一样的。</p><p>使用举例：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 导入库</span></span><br><span class="line"><span class="keyword">import</span> ipyturtle3 <span class="keyword">as</span> turtle</span><br><span class="line"><span class="keyword">from</span> ipyturtle3 <span class="keyword">import</span> hold_canvas</span><br><span class="line"></span><br><span class="line"><span class="comment"># 初始化</span></span><br><span class="line">myCanvas = turtle.Canvas(width=<span class="number">500</span>,height=<span class="number">300</span>) <span class="comment"># 创建一个画布</span></span><br><span class="line">myTS = turtle.TurtleScreen(myCanvas) <span class="comment"># 创建一个海龟屏幕，它是海龟绘图的容器</span></span><br><span class="line"></span><br><span class="line">myTS.clear() <span class="comment"># 清除屏幕</span></span><br><span class="line">t = turtle.Turtle(myTS) <span class="comment"># 创建一个海龟</span></span><br><span class="line">display(myCanvas) <span class="comment"># 显示画布</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 画图形</span></span><br><span class="line"><span class="keyword">for</span> x <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">6</span>):</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">4</span>):</span><br><span class="line">        t.forward(<span class="number">50</span>)</span><br><span class="line">        t.left(<span class="number">90</span>)</span><br><span class="line">    t.left(<span class="number">60</span>)</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="官方页面中的例子"><a href="#官方页面中的例子" class="headerlink" title="官方页面中的例子"></a>官方页面中的例子</h3><p>官方页面：<a class="link"   href="https://pypi.org/project/ipyturtle3/" >https://pypi.org/project/ipyturtle3/<i class="fas fa-external-link-alt"></i></a></p><p>例子（让gpt中文注释了下）</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> ipyturtle3 <span class="keyword">as</span> turtle</span><br><span class="line"><span class="keyword">from</span> ipyturtle3 <span class="keyword">import</span> hold_canvas</span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建一个画布</span></span><br><span class="line">myCanvas=turtle.Canvas(width=<span class="number">500</span>,height=<span class="number">250</span>)</span><br><span class="line">display(myCanvas)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建一个海龟屏幕，它是海龟绘图的容器</span></span><br><span class="line">myTS=turtle.TurtleScreen(myCanvas)</span><br><span class="line">myTS.clear()  <span class="comment"># 清除屏幕</span></span><br><span class="line">myTS.bgcolor(<span class="string">&quot;lightgreen&quot;</span>)  <span class="comment"># 设置背景颜色为浅绿色</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建两个海龟，bob和jess</span></span><br><span class="line">bob=turtle.Turtle(myTS)</span><br><span class="line">jess=turtle.Turtle(myTS,isHolonomic=<span class="literal">True</span>)  <span class="comment"># jess是全向的，可以在任何方向上移动</span></span><br><span class="line">jess.shape(<span class="string">&quot;square&quot;</span>)  <span class="comment"># 设置jess的形状为正方形</span></span><br><span class="line">bob.shape(<span class="string">&quot;turtle&quot;</span>)  <span class="comment"># 设置bob的形状为海龟</span></span><br><span class="line"></span><br><span class="line">myTS.delay(<span class="number">200</span>)  <span class="comment"># 设置延迟为200毫秒</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 非全向海龟bob的移动示例</span></span><br><span class="line">bob.forward(<span class="number">50</span>)  <span class="comment"># 向前移动50个单位</span></span><br><span class="line">bob.left(<span class="number">90</span>)  <span class="comment"># 向左转90度</span></span><br><span class="line">bob.forward(<span class="number">50</span>)</span><br><span class="line">bob.left(<span class="number">90</span>)</span><br><span class="line">bob.forward(<span class="number">50</span>)</span><br><span class="line">bob.left(<span class="number">90</span>)</span><br><span class="line">bob.forward(<span class="number">50</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 全向海龟jess的移动示例</span></span><br><span class="line">jess.moveleft(<span class="number">200</span>)  <span class="comment"># 向左移动200个单位</span></span><br><span class="line">jess.moveup(<span class="number">100</span>)  <span class="comment"># 向上移动100个单位</span></span><br><span class="line">jess.moveright(<span class="number">100</span>)  <span class="comment"># 向右移动100个单位</span></span><br><span class="line">jess.movedown(<span class="number">100</span>)  <span class="comment"># 向下移动100个单位</span></span><br><span class="line">jess.turnright(<span class="number">45</span>)  <span class="comment"># 向右转45度</span></span><br><span class="line">jess.turn(-<span class="number">45</span>)  <span class="comment"># 向左转45度</span></span><br><span class="line">jess.distance_at_angle(<span class="number">50</span>,<span class="number">45</span>)  <span class="comment"># 在45度角移动50个单位</span></span><br><span class="line"></span><br><span class="line">myTS.clear()  <span class="comment"># 清除屏幕</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 绘制彩虹苯环</span></span><br><span class="line">colors = [<span class="string">&#x27;red&#x27;</span>, <span class="string">&#x27;purple&#x27;</span>, <span class="string">&#x27;blue&#x27;</span>, <span class="string">&#x27;green&#x27;</span>, <span class="string">&#x27;orange&#x27;</span>, <span class="string">&#x27;yellow&#x27;</span>]  <span class="comment"># 颜色列表</span></span><br><span class="line">t = turtle.Turtle(myTS)  <span class="comment"># 创建一个新的海龟t</span></span><br><span class="line">myTS.bgcolor(<span class="string">&#x27;black&#x27;</span>)  <span class="comment"># 设置背景颜色为黑色</span></span><br><span class="line"><span class="keyword">for</span> x <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">50</span>):  <span class="comment"># 循环50次</span></span><br><span class="line">    <span class="keyword">with</span>(hold_canvas(myCanvas)):  <span class="comment"># 在画布上绘图</span></span><br><span class="line">        t.pencolor(colors[x%<span class="number">6</span>])  <span class="comment"># 设置画笔颜色</span></span><br><span class="line">        t.width(x//<span class="number">100</span> + <span class="number">1</span>)  <span class="comment"># 设置画笔宽度</span></span><br><span class="line">        t.forward(x)  <span class="comment"># 向前移动x个单位</span></span><br><span class="line">        t.left(<span class="number">59</span>)  <span class="comment"># 向左转59度</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>VSCode中制作思维导图(Markmap)</title>
      <link href="/2024/01/29/VSCode%E4%B8%AD%E5%88%B6%E4%BD%9C%E6%80%9D%E7%BB%B4%E5%AF%BC%E5%9B%BEMarkmap/"/>
      <url>/2024/01/29/VSCode%E4%B8%AD%E5%88%B6%E4%BD%9C%E6%80%9D%E7%BB%B4%E5%AF%BC%E5%9B%BEMarkmap/</url>
      
        <content type="html"><![CDATA[<p>Markmap是在VS Code中的思维导图插件（扩展）。</p><p>平常做的思维导图用的是 Xmind。这个主要看到在VS Code中用这个插件，可以直接用markdown语言写，一键预览，还可以导出成 html 网页，正好放到博客中，就很方便了。</p><a id="more"></a><h2 id="一、安装Markmap扩展"><a href="#一、安装Markmap扩展" class="headerlink" title="一、安装Markmap扩展"></a>一、安装Markmap扩展</h2><ul><li>1.打开VS Code，点击左侧的扩展图标（或按下Ctrl+Shift+X快捷键）。</li><li>2.搜索“markmap”，看到一个黄色三叉戟的图标就是了，点击“安装”。</li></ul><h2 id="二、制作思维导图"><a href="#二、制作思维导图" class="headerlink" title="二、制作思维导图"></a>二、制作思维导图</h2><h3 id="1-创建文件"><a href="#1-创建文件" class="headerlink" title="1.创建文件"></a>1.创建文件</h3><p>它的文件名为 <code>*.mm.md</code> 是.md的markdown文件，但前面多了 .mm。</p><p>比如 demo.mm.md：</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">---</span><br><span class="line">markmap:</span><br><span class="line">  colorFreezeLevel: 2</span><br><span class="line">---</span><br><span class="line"></span><br><span class="line"><span class="section"># markmap</span></span><br><span class="line"></span><br><span class="line"><span class="section">## Links</span></span><br><span class="line"></span><br><span class="line"><span class="bullet">-</span> <span class="xml">&lt;https://markmap.js.org/&gt;</span></span><br><span class="line"><span class="bullet">-</span> [<span class="string">GitHub</span>](<span class="link">https://github.com/gera2ld/markmap</span>)</span><br><span class="line"></span><br><span class="line"><span class="section">## Related Projects</span></span><br><span class="line"></span><br><span class="line"><span class="bullet">-</span> [<span class="string">coc-markmap</span>](<span class="link">https://github.com/gera2ld/coc-markmap</span>)</span><br><span class="line"><span class="bullet">-</span> [<span class="string">gatsby-remark-markmap</span>](<span class="link">https://github.com/gera2ld/gatsby-remark-markmap</span>)</span><br><span class="line"></span><br><span class="line"><span class="section">## Features</span></span><br><span class="line"></span><br><span class="line"><span class="bullet">-</span> links</span><br><span class="line"><span class="bullet">-</span> <span class="strong">**strong**</span> ~~del~~ <span class="emphasis">*italic*</span> ==highlight==</span><br><span class="line"><span class="bullet">-</span> multiline</span><br><span class="line">  text</span><br><span class="line"><span class="bullet">-</span> <span class="code">`inline code`</span></span><br><span class="line"></span><br><span class="line"><span class="bullet">-</span> Katex</span><br><span class="line"><span class="bullet">  -</span> $x = &#123;-b \pm \sqrt&#123;b^2-4ac&#125; \over 2a&#125;$</span><br><span class="line"><span class="bullet">  -</span> [<span class="string">More Katex Examples</span>](<span class="link">#?d=gist:af76a4c245b302206b16aec503dbe07b:katex.md</span>)</span><br><span class="line"><span class="bullet">-</span> Now we can wrap very very very very long text based on <span class="code">`maxWidth`</span> option</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="2-生成思维导图"><a href="#2-生成思维导图" class="headerlink" title="2.生成思维导图"></a>2.生成思维导图</h3><p>点击右上角的 三叉戟图标，就可以直接</p><p>效果如图（把 js代码的代码内容删掉了，跟markdown中一样用```）：</p><img                       lazyload                     src="/images/loading.svg"                     data-src="/img/VSCode_markmap_1.png"                      style="zoom: 50%;"                ><p>如果要把 html 放到网页中，注意里面用到几个文件，默认是 <code>cdn.jsdeliver.net/npm</code>下的，第1次打开的时候可能有点慢，可以下载下来放到本地：</p><ul><li>style.css: <a class="link"   href="https://cdn.jsdelivr.net/npm/markmap-toolbar@0.15.6/dist/style.css" >https://cdn.jsdelivr.net/npm/markmap-toolbar@0.15.6/dist/style.css<i class="fas fa-external-link-alt"></i></a></li><li>d3.min.js: <a class="link"   href="https://cdn.jsdelivr.net/npm/d3@7.8.5/dist/d3.min.js" >https://cdn.jsdelivr.net/npm/d3@7.8.5/dist/d3.min.js<i class="fas fa-external-link-alt"></i></a></li><li><code>browser/index.js</code>: <a class="link"   href="https://cdn.jsdelivr.net/npm/markmap-view@0.15.6/dist/browser/index.js" >https://cdn.jsdelivr.net/npm/markmap-view@0.15.6/dist/browser/index.js<i class="fas fa-external-link-alt"></i></a></li><li><code>toolbar*/index.js</code>: <a class="link"   href="https://cdn.jsdelivr.net/npm/markmap-toolbar@0.15.6/dist/index.js" >https://cdn.jsdelivr.net/npm/markmap-toolbar@0.15.6/dist/index.js<i class="fas fa-external-link-alt"></i></a></li></ul>]]></content>
      
      
      <categories>
          
          <category> VSCode </category>
          
      </categories>
      
      
        <tags>
            
            <tag> VSCode </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Jupyter Notebook安装使用</title>
      <link href="/2024/01/28/Jupyter-Notebook%E5%AE%89%E8%A3%85%E4%BD%BF%E7%94%A8/"/>
      <url>/2024/01/28/Jupyter-Notebook%E5%AE%89%E8%A3%85%E4%BD%BF%E7%94%A8/</url>
      
        <content type="html"><![CDATA[<p>Jupyter Notebook 是一个开源的交互式笔记本环境，可以用于数据分析、可视化、机器学习等任务。它支持多种编程语言，包括 Python、R、Julia 等，但最常用的是 Python。</p><p>Jupyter Notebook 的主要特点包括：</p><ul><li>交互性：Jupyter Notebook 提供了一个交互式的界面，可以在笔记本中编写和执行代码，并即时查看结果。这种交互性使得它非常适合用于数据探索、实验和教学。</li><li>可视化：Jupyter Notebook 支持丰富的数据可视化功能，可以通过绘图库（如 Matplotlib、Seaborn、Plotly 等）创建各种图表和图形。<a id="more"></a></li><li>文档编写：Jupyter Notebook 不仅可以编写和运行代码，还可以创建富文本笔记，包括标题、段落、数学公式、图像等。这使得它成为编写数据分析报告、教学材料和技术文档的理想工具。</li><li>代码复用：Jupyter Notebook 支持将代码分割成多个单元格，并可以按顺序执行。这使得代码的复用和调试更加方便。</li><li>扩展性：Jupyter Notebook 可以通过安装扩展插件来增强其功能。这些插件可以提供额外的编辑器功能、自动补全、代码检查等。</li></ul><p>使用 Jupyter Notebook，你可以在一个笔记本中编写和运行代码，同时记录和展示代码的执行结果、图表和解释。这种交互式和可视化的方式使得数据分析和实验更加直观和易于理解。</p><h2 id="安装运行Jupyter-Notebook"><a href="#安装运行Jupyter-Notebook" class="headerlink" title="安装运行Jupyter Notebook"></a>安装运行Jupyter Notebook</h2><p>这个官网上就有：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install notebook</span><br></pre></td></tr></table></figure><p>安装后在命令行窗口运行：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">jupyter notebook</span><br></pre></td></tr></table></figure><p>运行后，会自动打开网页，进入jupyter notebook，就可以开始使用了。</p><h2 id="写个bat脚本运行-Jupyter-Notebook"><a href="#写个bat脚本运行-Jupyter-Notebook" class="headerlink" title="写个bat脚本运行 Jupyter Notebook"></a>写个bat脚本运行 Jupyter Notebook</h2><p>在Windows系统中，可以写个简单的bat脚本，双击运行后就可以直接打开notebook（就不用每次打开命令行输入命令运行了）</p><p>比如把以下内容保存成一个 abc.bat 文件，双击后就可以运行。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">@<span class="built_in">echo</span> off</span><br><span class="line"></span><br><span class="line">rem Create python folder <span class="keyword">if</span> it doesn<span class="string">&#x27;t exist</span></span><br><span class="line"><span class="string">if not exist C:\python ( </span></span><br><span class="line"><span class="string">  mkdir C:\python</span></span><br><span class="line"><span class="string">)</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">cd C:\python</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">start /min jupyter notebook</span></span><br></pre></td></tr></table></figure><p>以上脚本的执行步骤为：</p><ul><li>1.会在C盘创建python目录（如果没有就创建）;</li><li>2.进入该 python目录；</li><li>3.运行 notebook。</li></ul><p><code>/min</code> 参数表示会以最小化的方式运行，可以在任务栏找到它。</p><h2 id="JupyterLab"><a href="#JupyterLab" class="headerlink" title="JupyterLab"></a>JupyterLab</h2><p>自用的话，推荐使用 JupyterLab，Notebook的升级版本，功能更多，支持Debug调试。</p><p>1.安装 JupyterLab</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install jupyterlab</span><br></pre></td></tr></table></figure><p>2.运行</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">jupyter-lab</span><br></pre></td></tr></table></figure><p>写个脚本的话一样的，把上面的命令改一下就行了。</p>]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Python SQLAlchemy使用举例</title>
      <link href="/2023/12/24/Python-SQLAlchemy%E4%BD%BF%E7%94%A8%E4%B8%BE%E4%BE%8B/"/>
      <url>/2023/12/24/Python-SQLAlchemy%E4%BD%BF%E7%94%A8%E4%B8%BE%E4%BE%8B/</url>
      
        <content type="html"><![CDATA[<p>SQLAlchemy 提供了 ORM 功能，可以将 Python 对象映射到关系数据库中的表，从而简化了数据访问。它允许开发人员使用 Python 对关系数据库进行 SQL 操作，而不必直接编写 SQL 查询语句。</p><p>SQLAlchemy 支持多种数据库，包括 MySQL、PostgreSQL、SQLite、Oracle、MSSQL 等。</p><p>自己主要在 Flask中使用，所以安装的是 flask_sqlalchemy 库，安装：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install flask_sqlalchemy</span><br></pre></td></tr></table></figure><a id="more"></a><h3 id="1-初始化-创建表"><a href="#1-初始化-创建表" class="headerlink" title="1.初始化(创建表)"></a>1.初始化(创建表)</h3><p>创建 User 类对应的表 users。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> flask_sqlalchemy <span class="keyword">import</span> SQLAlchemy</span><br><span class="line"></span><br><span class="line">current_dir = os.getcwd()</span><br><span class="line">db_file = os.path.join(current_dir, <span class="string">&#x27;static&#x27;</span>, <span class="string">&#x27;db&#x27;</span>, <span class="string">&#x27;data.db&#x27;</span>)</span><br><span class="line"><span class="comment"># 配置数据库地址</span></span><br><span class="line">app.config[<span class="string">&#x27;SQLALCHEMY_DATABASE_URI&#x27;</span>] = <span class="string">f&#x27;sqlite:///<span class="subst">&#123;db_file&#125;</span>&#x27;</span></span><br><span class="line"><span class="comment"># 跟踪数据库的修改--&gt;不建议开启未来的版本中会移除</span></span><br><span class="line">app.config[<span class="string">&#x27;SQLALCHEMY_TRACK_MODIFICATIONS&#x27;</span>] = <span class="literal">False</span></span><br><span class="line"></span><br><span class="line">db = SQLAlchemy(app)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 数据库的模型,需要继承db. Model</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">User</span>(<span class="params">db.Model</span>) :</span></span><br><span class="line">    __tablename__ = <span class="string">&quot;users&quot;</span></span><br><span class="line">    <span class="built_in">id</span> = db.Column(db.Integer, primary_key=<span class="literal">True</span>)</span><br><span class="line">    name = db.Column(db.String(<span class="number">64</span>)) <span class="comment"># 用户名</span></span><br><span class="line">    password = db.Column(db.String(<span class="number">128</span>)) <span class="comment"># 密码</span></span><br><span class="line">    phone = db.Column(db.String(<span class="number">11</span>), unique=<span class="literal">True</span>) <span class="comment"># 手机号</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># db init</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">db_init</span>():</span></span><br><span class="line">    <span class="keyword">with</span> app.app_context():</span><br><span class="line">        <span class="comment"># 删除表</span></span><br><span class="line">        db.drop_all()</span><br><span class="line">        <span class="comment"># 创建表</span></span><br><span class="line">        db.create_all()</span><br><span class="line"></span><br><span class="line">db_init()</span><br></pre></td></tr></table></figure><h3 id="2-增（插入数据）"><a href="#2-增（插入数据）" class="headerlink" title="2.增（插入数据）"></a>2.增（插入数据）</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">insert_test_data</span>():</span></span><br><span class="line">    <span class="comment"># 插入一条数据</span></span><br><span class="line">    new_user = User(name=<span class="string">&#x27;张三&#x27;</span>,password=<span class="string">&#x27;123&#x27;</span>,phone=<span class="string">&#x27;12345674567&#x27;</span>)</span><br><span class="line">    db.session.add(new_user)</span><br><span class="line">    db.session.commit()</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 插入多条数据</span></span><br><span class="line">    users = [</span><br><span class="line">        User(name=<span class="string">&#x27;张三&#x27;</span>, password=<span class="string">&#x27;123&#x27;</span>, phone=<span class="string">&#x27;12345678901&#x27;</span>),</span><br><span class="line">        User(name=<span class="string">&#x27;李四&#x27;</span>, password=<span class="string">&#x27;456&#x27;</span>, phone=<span class="string">&#x27;12345678902&#x27;</span>),</span><br><span class="line">        <span class="comment"># 更多用户...</span></span><br><span class="line">    ]</span><br><span class="line">    db.session.add_all(users)</span><br><span class="line">    db.session.commit()</span><br></pre></td></tr></table></figure><h3 id="3-删（删除数据）"><a href="#3-删（删除数据）" class="headerlink" title="3.删（删除数据）"></a>3.删（删除数据）</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">delete_user</span>(<span class="params">phone</span>):</span></span><br><span class="line">    <span class="comment"># 删除一个用户</span></span><br><span class="line">    <span class="comment"># 获取这个用户的 User 对象</span></span><br><span class="line">    user = User.query.filter_by(phone=phone).first()</span><br><span class="line">    <span class="comment"># 如果这个用户存在</span></span><br><span class="line">    <span class="keyword">if</span> user:</span><br><span class="line">        <span class="comment"># 删除这个用户</span></span><br><span class="line">        db.session.delete(user)</span><br><span class="line">        db.session.commit()</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 批量删除用户</span></span><br><span class="line">    del_phones = [<span class="string">&#x27;12345678801&#x27;</span>, <span class="string">&#x27;12345678802&#x27;</span>, <span class="string">&#x27;12345678803&#x27;</span>]</span><br><span class="line">    User.query.<span class="built_in">filter</span>(User.phone.in_(del_phones)).delete(synchronize_session=<span class="literal">False</span>)</span><br><span class="line">    db.session.commit()</span><br></pre></td></tr></table></figure><h3 id="4-改（修改数据）"><a href="#4-改（修改数据）" class="headerlink" title="4.改（修改数据）"></a>4.改（修改数据）</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">change_password</span>(<span class="params">phone, new_password</span>):</span></span><br><span class="line">    <span class="comment"># 获取这个用户的 User 对象</span></span><br><span class="line">    user = User.query.filter_by(phone=phone).first()</span><br><span class="line">    <span class="comment"># 如果这个用户存在</span></span><br><span class="line">    <span class="keyword">if</span> user:</span><br><span class="line">        <span class="comment"># 修改这个用户的密码</span></span><br><span class="line">        user.password = new_password</span><br><span class="line">        db.session.commit()</span><br></pre></td></tr></table></figure><h3 id="5-查（查询数据）"><a href="#5-查（查询数据）" class="headerlink" title="5.查（查询数据）"></a>5.查（查询数据）</h3><p>filter_by 和 filter 都是 SQLAlchemy 中用于过滤查询结果的方法，但是它们的使用方式和功能有一些不同。</p><ul><li>filter_by: 是一个简化的过滤方法，它接受关键字参数，每个关键字参数表示一个等于条件。</li><li>filter: 是一个更通用的过滤方法，它接受任何条件表达式。也就是说用的范围更广。</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># filter_by</span></span><br><span class="line"><span class="comment"># 查询一条记录，一个条件</span></span><br><span class="line">user = User.query.filter_by(phone=phone).first()</span><br><span class="line"><span class="comment"># 查询一条记录，多个条件</span></span><br><span class="line">user = User.query.filter_by(phone=phone, password=password).first()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查询多条记录</span></span><br><span class="line">users = User.query.filter_by(name=name).<span class="built_in">all</span>()</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> sqlalchemy <span class="keyword">import</span> and_</span><br><span class="line"><span class="comment"># filter</span></span><br><span class="line"><span class="comment"># 查询一条记录，一个条件</span></span><br><span class="line">user = User.query.<span class="built_in">filter</span>(User.name==<span class="string">&#x27;张三&#x27;</span>).first()</span><br><span class="line"><span class="comment"># 查询一条记录，多个条件</span></span><br><span class="line">user = User.query.<span class="built_in">filter</span>(and_(User.phone==phone, User.password==password)).first()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查询多条记录</span></span><br><span class="line">users = User.query.<span class="built_in">filter</span>(User.name == name).<span class="built_in">all</span>()</span><br><span class="line"><span class="comment"># 查询所有张开头的用户</span></span><br><span class="line">users = User.query.<span class="built_in">filter</span>(User.name.like(<span class="string">&#x27;张%&#x27;</span>)).<span class="built_in">all</span>()</span><br><span class="line"><span class="comment"># 查询phones列表中的所有用户</span></span><br><span class="line">phones = [<span class="string">&#x27;12345678801&#x27;</span>, <span class="string">&#x27;12345678802&#x27;</span>, <span class="string">&#x27;12345678803&#x27;</span>]</span><br><span class="line">users = User.query.<span class="built_in">filter</span>(User.phone.in_(phones)).<span class="built_in">all</span>()</span><br></pre></td></tr></table></figure><p>PS.用 User.query.filter_by 和用 db.session.query(User).filter_by 功能上是一样的。</p>]]></content>
      
      
      <categories>
          
          <category> 数据库 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
            <tag> Flask </tag>
            
            <tag> SQLAlchemy </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Python Flask下载文件链接有中文时编码问题</title>
      <link href="/2023/12/18/Python-Flask%E4%B8%8B%E8%BD%BD%E6%96%87%E4%BB%B6%E9%93%BE%E6%8E%A5%E6%9C%89%E4%B8%AD%E6%96%87%E6%97%B6%E7%BC%96%E7%A0%81%E9%97%AE%E9%A2%98/"/>
      <url>/2023/12/18/Python-Flask%E4%B8%8B%E8%BD%BD%E6%96%87%E4%BB%B6%E9%93%BE%E6%8E%A5%E6%9C%89%E4%B8%AD%E6%96%87%E6%97%B6%E7%BC%96%E7%A0%81%E9%97%AE%E9%A2%98/</url>
      
        <content type="html"><![CDATA[<p>写了个小网页，实现的功能是：</p><ul><li>1.在前端网页选择项中选择指定内容；</li><li>2.传送给后端服务器，查询数据库找出相应的内容；</li><li>3.并把这些内容存放Excel表格后，把下载链接提供回前端页面上显示。</li></ul><p>然后下载数据文件。</p><a id="more"></a><p>在Windows系统中测试的时候没有任何问题。</p><p>然后把项目部署到Docker（Linux），然后发现Linux系统中不行了，因为Excel数据文件名也是中文，然后就有了编码问题。</p><p>搜了下后，发现用 <code> urllib.parse</code>库的 quote（编码）, unquote（解码）来解决。</p><p>其间还碰到一个小问题，就是：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">在Windows系统中，文件路径使用反斜杠（\）作为路径分隔符。</span><br><span class="line">而在Linux系统中，文件路径使用正斜杠（/）作为路径分隔符。</span><br><span class="line"></span><br><span class="line">因此，在Windows系统中，filename的值为static\ex_data\数据.xlsx，而在Linux系统中，filename的值为static/ex_data/数据.xlsx。</span><br><span class="line"></span><br><span class="line">在进行URL编码时，正斜杠（/）不会被编码，而反斜杠（\）会被编码为%5C。</span><br></pre></td></tr></table></figure><h3 id="解决方法案例"><a href="#解决方法案例" class="headerlink" title="解决方法案例"></a>解决方法案例</h3><p><strong>编码前的关键代码：</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">...</span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/download&#x27;</span>, methods=[<span class="string">&#x27;GET&#x27;</span>, <span class="string">&#x27;POST&#x27;</span>]</span>)</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">download</span>():</span></span><br><span class="line">    ...</span><br><span class="line">    <span class="keyword">if</span> request.method == <span class="string">&#x27;POST&#x27;</span>:</span><br><span class="line">        ...</span><br><span class="line">        <span class="comment"># 将查询结果数据写入 Excel 表格</span></span><br><span class="line">        filename = write_to_excel(data, ex_filename)</span><br><span class="line">        <span class="comment"># 生成下载链接</span></span><br><span class="line">        download_url = url_for(<span class="string">&#x27;download_file&#x27;</span>, filename=filename)</span><br><span class="line">    ...</span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/download_file/&lt;path:filename&gt;&#x27;</span>, methods=[<span class="string">&#x27;GET&#x27;</span>]</span>)</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">download_file</span>(<span class="params">filename</span>):</span></span><br><span class="line">    <span class="keyword">return</span> send_file(filename, as_attachment=<span class="literal">True</span>)</span><br><span class="line">...</span><br><span class="line"></span><br><span class="line"><span class="comment"># 将数据写入 Excel 表格</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">write_to_excel</span>(<span class="params">data, ex_filename</span>):</span></span><br><span class="line">    df = pd.DataFrame(data)</span><br><span class="line">    ex_path = os.path.join(<span class="string">&#x27;static&#x27;</span>, <span class="string">&#x27;ex_data&#x27;</span>)</span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> os.path.exists(ex_path):</span><br><span class="line">        os.makedirs(ex_path)</span><br><span class="line">    file_path = os.path.join(ex_path, <span class="string">f&#x27;<span class="subst">&#123;ex_filename&#125;</span>.xlsx&#x27;</span>)</span><br><span class="line">    df.to_excel(file_path, index=<span class="literal">False</span>)</span><br><span class="line">    <span class="keyword">return</span> file_path</span><br></pre></td></tr></table></figure><p><strong>编码后的关键代码：</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> urllib.parse <span class="keyword">import</span> quote, unquote</span><br><span class="line">...</span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/download&#x27;</span>, methods=[<span class="string">&#x27;GET&#x27;</span>, <span class="string">&#x27;POST&#x27;</span>]</span>)</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">download</span>():</span></span><br><span class="line">    ...</span><br><span class="line">    <span class="keyword">if</span> request.method == <span class="string">&#x27;POST&#x27;</span>:</span><br><span class="line">        ...</span><br><span class="line">        <span class="comment"># 将查询结果数据写入 Excel 表格</span></span><br><span class="line">        filename = write_to_excel(data, ex_filename)</span><br><span class="line">        <span class="comment"># 生成下载链接，使用编码的文件名</span></span><br><span class="line">        encoded_filename = urllib.parse.quote(filename)</span><br><span class="line">        download_url = url_for(<span class="string">&#x27;download_file&#x27;</span>, filename=encoded_filename)</span><br><span class="line">    ...</span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/download_file/&lt;path:filename&gt;&#x27;</span>, methods=[<span class="string">&#x27;GET&#x27;</span>]</span>)</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">download_file</span>(<span class="params">filename</span>):</span></span><br><span class="line">    <span class="comment"># 解码</span></span><br><span class="line">    decoded_filename = urllib.parse.unquote(filename)</span><br><span class="line">    <span class="keyword">return</span> send_file(decoded_filename, as_attachment=<span class="literal">True</span>)</span><br><span class="line">...</span><br><span class="line"></span><br><span class="line"><span class="comment"># 将数据写入 Excel 表格</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">write_to_excel</span>(<span class="params">data, ex_filename</span>):</span></span><br><span class="line">    df = pd.DataFrame(data)</span><br><span class="line">    ex_path = os.path.join(<span class="string">&#x27;static&#x27;</span>, <span class="string">&#x27;ex_data&#x27;</span>)</span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> os.path.exists(ex_path):</span><br><span class="line">        os.makedirs(ex_path)</span><br><span class="line">    file_path = os.path.join(ex_path, <span class="string">f&#x27;<span class="subst">&#123;ex_filename&#125;</span>.xlsx&#x27;</span>)</span><br><span class="line">    df.to_excel(file_path, index=<span class="literal">False</span>)</span><br><span class="line">    <span class="keyword">return</span> file_path</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
            <tag> Flask </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hexo使用Valine评论无法显示问题</title>
      <link href="/2023/12/12/Hexo%E4%BD%BF%E7%94%A8Valine%E8%AF%84%E8%AE%BA%E6%97%A0%E6%B3%95%E6%98%BE%E7%A4%BA%E9%97%AE%E9%A2%98/"/>
      <url>/2023/12/12/Hexo%E4%BD%BF%E7%94%A8Valine%E8%AF%84%E8%AE%BA%E6%97%A0%E6%B3%95%E6%98%BE%E7%A4%BA%E9%97%AE%E9%A2%98/</url>
      
        <content type="html"><![CDATA[<p>用的 Keep主题，主题的配置文件中关于这个Valine 评论的配置就以下内容：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Valine</span></span><br><span class="line"><span class="comment"># See: https://github.com/xCss/Valine</span></span><br><span class="line"><span class="attr">valine:</span></span><br><span class="line">  <span class="attr">appid:</span> <span class="string">U************************sz</span></span><br><span class="line">  <span class="attr">appkey:</span> <span class="string">y************************m7</span></span><br><span class="line">  <span class="attr">placeholder:</span> <span class="string">请在此输入您的留言</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><a id="more"></a><p>然后之前也挂过，所以找了位置，在主题目录下的 <code>layout\_partial\comment</code> 目录下有文件 valine.ejs 是实现这个评论模块的。</p><p>相关内容如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;div class&#x3D;&quot;valine-container&quot;&gt;</span><br><span class="line">        &lt;script &lt;%&#x3D; theme.pjax.enable &#x3D;&#x3D;&#x3D; true ? &#39;data-pjax&#39; : &#39;&#39; %&gt;</span><br><span class="line">                src&#x3D;&quot;&#x2F;&#x2F;unpkg.com&#x2F;valine@latest&#x2F;dist&#x2F;Valine.min.js&quot;&gt;&lt;&#x2F;script&gt;</span><br><span class="line">        &lt;div id&#x3D;&quot;vcomments&quot;&gt;&lt;&#x2F;div&gt;</span><br></pre></td></tr></table></figure><p>主要就是 <code>src=&quot;//unpkg.com/valine@latest/dist/Valine.min.js&quot;</code>这里引用的这个文件的链接访问不了了，访问地址是：<a class="link"   href="https://unpkg.com/valine@latest/dist/Valine.min.js" >https://unpkg.com/valine@latest/dist/Valine.min.js<i class="fas fa-external-link-alt"></i></a>，看看能不能打开。</p><p>就是被墙了，所以导致评论模块显示不出来了。</p><p><strong>解决方法：</strong></p><ul><li>1.保存一个 Valine.min.js 文件，放到主题目录下的 <code>source\js</code>目录中；</li><li>2.修改 valine.ejs文件，把 <code>src=&quot;//unpkg.com/valine@latest/dist/Valine.min.js&quot;</code>这句改成以下内容，引用本地文件就行了。<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">src&#x3D;&quot;&#x2F;js&#x2F;Valine.min.js&quot;</span><br></pre></td></tr></table></figure>顺手提供一个Valine.min.js 1.5.1下载地址：</li></ul><p><a class="link"   href="https://gitee.com/hduzn/share_files/blob/master/Valine.min.js" >https://gitee.com/hduzn/share_files/blob/master/Valine.min.js<i class="fas fa-external-link-alt"></i></a></p>]]></content>
      
      
      <categories>
          
          <category> Hexo </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Hexo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SQL语句以及在Python中的应用</title>
      <link href="/2023/12/01/SQL%E8%AF%AD%E5%8F%A5%E4%BB%A5%E5%8F%8A%E5%9C%A8Python%E4%B8%AD%E7%9A%84%E5%BA%94%E7%94%A8/"/>
      <url>/2023/12/01/SQL%E8%AF%AD%E5%8F%A5%E4%BB%A5%E5%8F%8A%E5%9C%A8Python%E4%B8%AD%E7%9A%84%E5%BA%94%E7%94%A8/</url>
      
        <content type="html"><![CDATA[<p>本文记录一些自己使用过的SQL语句，以及在Python中的应用。</p><a id="more"></a><h2 id="SQL语句"><a href="#SQL语句" class="headerlink" title="SQL语句"></a>SQL语句</h2><h3 id="一、学生得分数据表"><a href="#一、学生得分数据表" class="headerlink" title="一、学生得分数据表"></a>一、学生得分数据表</h3><p>字段数据举例如下：</p><table><thead><tr><th>id</th><th>name</th><th>class_no</th><th>stu_id</th><th>lesson</th><th>score</th></tr></thead><tbody><tr><td>1</td><td>张三</td><td>501</td><td>1</td><td>lesson1</td><td>10</td></tr><tr><td>2</td><td>张三</td><td>501</td><td>1</td><td>lesson2</td><td>9</td></tr></tbody></table><p>表设计如下：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> &quot;stu_data&quot; (</span><br><span class="line">  &quot;id&quot; <span class="type">INTEGER</span> <span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="keyword">PRIMARY</span> KEY AUTOINCREMENT,</span><br><span class="line">  &quot;name&quot; TEXT <span class="keyword">NOT</span> <span class="keyword">NULL</span>,</span><br><span class="line">  &quot;class_no&quot; <span class="type">INTEGER</span> <span class="keyword">NOT</span> <span class="keyword">NULL</span>,</span><br><span class="line">  &quot;stu_id&quot; <span class="type">INTEGER</span> <span class="keyword">NOT</span> <span class="keyword">NULL</span>,</span><br><span class="line">  &quot;lesson&quot; TEXT,</span><br><span class="line">  &quot;score&quot; <span class="type">INTEGER</span>,</span><br><span class="line">  <span class="keyword">UNIQUE</span> (&quot;id&quot; <span class="keyword">ASC</span>)</span><br><span class="line">);</span><br></pre></td></tr></table></figure><h3 id="1-查询同一个班级每个学生所有lesson的score总和"><a href="#1-查询同一个班级每个学生所有lesson的score总和" class="headerlink" title="1.查询同一个班级每个学生所有lesson的score总和"></a>1.查询同一个班级每个学生所有lesson的score总和</h3><ul><li>按学号 stu_id 排序用 <code>ORDER BY t1.stu_id</code>；</li><li>按总分排序用 <code>ORDER BY total_score DESC</code>，<code>DESC</code>表示降序排序；</li><li>统计非0的个数用<code>COUNT(CASE WHEN t1.score &gt; 0 THEN 1 ELSE NULL END) AS non_zero_count</code>。</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 查询同一个班级每个学生所有lesson的score总和</span></span><br><span class="line"><span class="comment">-- [&#x27;班级&#x27;, &#x27;学号&#x27;, &#x27;姓名&#x27;, &#x27;总分&#x27;, &#x27;非0分的次数&#x27;]</span></span><br><span class="line"><span class="keyword">SELECT</span> t1.class_no, t1.stu_id, t1.name, <span class="built_in">SUM</span>(t1.score) <span class="keyword">AS</span> total_score,</span><br><span class="line"><span class="built_in">COUNT</span>(<span class="keyword">CASE</span> <span class="keyword">WHEN</span> t1.score <span class="operator">&gt;</span> <span class="number">0</span> <span class="keyword">THEN</span> <span class="number">1</span> <span class="keyword">ELSE</span> <span class="keyword">NULL</span> <span class="keyword">END</span>) <span class="keyword">AS</span> non_zero_count</span><br><span class="line"><span class="keyword">FROM</span> stu_data t1  </span><br><span class="line"><span class="keyword">WHERE</span> t1.class_no <span class="operator">=</span> <span class="number">506</span></span><br><span class="line"><span class="keyword">GROUP</span> <span class="keyword">BY</span> t1.name, t1.class_no</span><br><span class="line"><span class="comment">-- ORDER BY t1.stu_id</span></span><br><span class="line"><span class="keyword">ORDER</span> <span class="keyword">BY</span> total_score <span class="keyword">DESC</span></span><br></pre></td></tr></table></figure><h3 id="2-查询同一个lesson每个班级class-no的平均分"><a href="#2-查询同一个lesson每个班级class-no的平均分" class="headerlink" title="2.查询同一个lesson每个班级class_no的平均分"></a>2.查询同一个lesson每个班级class_no的平均分</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 查询同一个项目lesson每个班级class_no的平均分</span></span><br><span class="line"><span class="comment">-- [&#x27;项目&#x27;, &#x27;班级&#x27;, &#x27;平均分&#x27;, &#x27;去除0分后的平均分&#x27;, &#x27;非0分的次数&#x27;]</span></span><br><span class="line"><span class="keyword">SELECT</span></span><br><span class="line">    t1.lesson,</span><br><span class="line">    t1.class_no,</span><br><span class="line">    ROUND(<span class="built_in">AVG</span>(t1.score), <span class="number">2</span>) <span class="keyword">AS</span> avg_score,</span><br><span class="line">    ROUND(<span class="built_in">SUM</span>(<span class="keyword">CASE</span> <span class="keyword">WHEN</span> t1.score <span class="operator">&gt;</span> <span class="number">0</span> <span class="keyword">THEN</span> t1.score <span class="keyword">ELSE</span> <span class="keyword">NULL</span> <span class="keyword">END</span>) <span class="operator">/</span>  </span><br><span class="line">          <span class="built_in">COUNT</span>(<span class="keyword">CASE</span> <span class="keyword">WHEN</span> t1.score <span class="operator">&gt;</span> <span class="number">0</span> <span class="keyword">THEN</span> t1.score <span class="keyword">ELSE</span> <span class="keyword">NULL</span> <span class="keyword">END</span>), <span class="number">2</span>) <span class="keyword">AS</span> avg_score_excluding0,</span><br><span class="line">    <span class="built_in">COUNT</span>(<span class="keyword">CASE</span> <span class="keyword">WHEN</span> t1.score <span class="operator">&gt;</span> <span class="number">0</span> <span class="keyword">THEN</span> t1.score <span class="keyword">ELSE</span> <span class="keyword">NULL</span> <span class="keyword">END</span>) <span class="keyword">AS</span> non_zero_count</span><br><span class="line"><span class="keyword">FROM</span> stu_data t1 </span><br><span class="line"><span class="keyword">WHERE</span> t1.lesson <span class="operator">=</span> <span class="string">&#x27;lesson3&#x27;</span></span><br><span class="line"><span class="keyword">GROUP</span> <span class="keyword">BY</span> t1.lesson, t1.class_no</span><br><span class="line"><span class="keyword">ORDER</span> <span class="keyword">BY</span> avg_score <span class="keyword">DESC</span></span><br></pre></td></tr></table></figure><h3 id="3-查询所有项目lesson每个班级class-no的平均分"><a href="#3-查询所有项目lesson每个班级class-no的平均分" class="headerlink" title="3.查询所有项目lesson每个班级class_no的平均分"></a>3.查询所有项目lesson每个班级class_no的平均分</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 查询所有项目lesson每个班级class_no的平均分</span></span><br><span class="line"><span class="keyword">SELECT</span>  </span><br><span class="line">    t1.lesson, t1.class_no,</span><br><span class="line">    ROUND(<span class="built_in">AVG</span>(t1.score), <span class="number">2</span>) <span class="keyword">AS</span> avg_score</span><br><span class="line"><span class="keyword">FROM</span> stu_data t1</span><br><span class="line"><span class="keyword">GROUP</span> <span class="keyword">BY</span> t1.lesson, t1.class_no</span><br></pre></td></tr></table></figure><h2 id="在Python中的应用"><a href="#在Python中的应用" class="headerlink" title="在Python中的应用"></a>在Python中的应用</h2><h3 id="1-查询同一个班级每个学生所有lesson的score总和-1"><a href="#1-查询同一个班级每个学生所有lesson的score总和-1" class="headerlink" title="1.查询同一个班级每个学生所有lesson的score总和"></a>1.查询同一个班级每个学生所有lesson的score总和</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> sqlite3</span><br><span class="line">db_file = <span class="string">&#x27;test.db&#x27;</span></span><br><span class="line">conn = sqlite3.connect(db_file)</span><br><span class="line">cursor = conn.cursor()</span><br><span class="line"></span><br><span class="line">class_no = <span class="number">501</span></span><br><span class="line">query_sql = <span class="string">f&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">        SELECT t1.name, t1.class_no, t1.stu_id, SUM(t1.score) AS total_score,</span></span><br><span class="line"><span class="string">        COUNT(CASE WHEN t1.score &gt; 0 THEN 1 ELSE NULL END) AS non_zero_count</span></span><br><span class="line"><span class="string">        FROM stu_data t1</span></span><br><span class="line"><span class="string">        WHERE t1.class_no = <span class="subst">&#123;class_no&#125;</span>  </span></span><br><span class="line"><span class="string">        GROUP BY t1.name, t1.class_no</span></span><br><span class="line"><span class="string">        ORDER BY total_score DESC</span></span><br><span class="line"><span class="string">        &quot;&quot;&quot;</span></span><br><span class="line">cursor.execute(query_sql)</span><br><span class="line">query_results = cursor.fetchall()</span><br><span class="line"><span class="built_in">print</span>(query_results)</span><br><span class="line">cursor.close()</span><br><span class="line">conn.close()</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 数据库 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
            <tag> SQL </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Python处理Excel表格之列转行</title>
      <link href="/2023/11/11/Python%E5%A4%84%E7%90%86Excel%E8%A1%A8%E6%A0%BC-%E5%88%97%E8%BD%AC%E8%A1%8C/"/>
      <url>/2023/11/11/Python%E5%A4%84%E7%90%86Excel%E8%A1%A8%E6%A0%BC-%E5%88%97%E8%BD%AC%E8%A1%8C/</url>
      
        <content type="html"><![CDATA[<p>用 Python处理Excel中的数据，把以下图片中的图一转到下面图二的形式：</p><img                       lazyload                     src="/images/loading.svg"                     data-src="/img/Python_Excel_liezhuanhang.png"                      style="zoom: 50%;"                ><p>就是一个列转到行。</p><p>解决思路：</p><ul><li>1.用Pandas库读取表格中的数据；</li><li>2.把读取出来的数据处理下，形成列转到行；</li><li>3.再把数据写入一个新的Excel表格。</li></ul><a id="more"></a><p>Python代码如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"></span><br><span class="line"><span class="comment"># 读取Excel数据转到List</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">read_ex</span>(<span class="params">ex_file</span>):</span></span><br><span class="line">    df = pd.read_excel(ex_file, sheet_name=<span class="string">&#x27;Sheet1&#x27;</span>, keep_default_na=<span class="string">&#x27;&#x27;</span>)</span><br><span class="line">    data_list = np.array(df).tolist()</span><br><span class="line">    <span class="keyword">return</span> data_list</span><br><span class="line"></span><br><span class="line"><span class="comment"># 处理数据</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">process_data</span>(<span class="params">data_list</span>):</span></span><br><span class="line">    new_data_list = []</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> sublist <span class="keyword">in</span> data_list:</span><br><span class="line">        company = sublist[<span class="number">0</span>]</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, <span class="built_in">len</span>(sublist)):</span><br><span class="line">            <span class="keyword">if</span> sublist[i] != <span class="string">&#x27;&#x27;</span>:</span><br><span class="line">                new_data_list.append([company, sublist[i]])</span><br><span class="line">    <span class="keyword">return</span> new_data_list</span><br><span class="line"></span><br><span class="line"><span class="comment"># 写入Excel</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">write_to_ex</span>(<span class="params">ex_file, data_list</span>):</span></span><br><span class="line">    <span class="comment"># 删除已存在的ex_file文件</span></span><br><span class="line">    <span class="keyword">if</span> os.path.exists(ex_file):</span><br><span class="line">        os.remove(ex_file)</span><br><span class="line">    df = pd.DataFrame(data_list)</span><br><span class="line">    df.to_excel(ex_file, index=<span class="literal">False</span>, header=<span class="literal">False</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 1.读取Excel</span></span><br><span class="line">ex_file = <span class="string">r&#x27;.\test1.xlsx&#x27;</span></span><br><span class="line">data_list = read_ex(ex_file)</span><br><span class="line"><span class="comment"># print(data_list)</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 2.处理数据</span></span><br><span class="line">new_data_list = process_data(data_list)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 3.写入Excel</span></span><br><span class="line">write_to_ex(<span class="string">r&#x27;.\new_data.xlsx&#x27;</span>, new_data_list)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;-&#x27;</span>*<span class="number">10</span>, <span class="string">&#x27;fine!&#x27;</span>)</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
            <tag> Excel </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Win11安装Hyper-V脚本</title>
      <link href="/2023/11/09/Win11%E5%AE%89%E8%A3%85Hyper-V%E8%84%9A%E6%9C%AC/"/>
      <url>/2023/11/09/Win11%E5%AE%89%E8%A3%85Hyper-V%E8%84%9A%E6%9C%AC/</url>
      
        <content type="html"><![CDATA[<p>笔记本装的是win11家庭版，没有装Hyper-V。因为想装Docker Desktop，偶尔测试用，所以就把 Hyper-V装起来试一下。</p><a id="more"></a><h2 id="步骤："><a href="#步骤：" class="headerlink" title="步骤："></a>步骤：</h2><h3 id="1-创建bat文件"><a href="#1-创建bat文件" class="headerlink" title="1.创建bat文件"></a>1.创建bat文件</h3><p>打开【记事本】软件，输入以下内容：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">pushd &quot;%~dp0&quot;</span><br><span class="line">dir &#x2F;b %SystemRoot%\servicing\Packages\*Hyper-V*.mum &gt;hyper-v.txt</span><br><span class="line">for &#x2F;f %%i in (&#39;findstr &#x2F;i . hyper-v.txt 2^&gt;nul&#39;) do dism &#x2F;online &#x2F;norestart &#x2F;add-package:&quot;%SystemRoot%\servicing\Packages\%%i&quot;</span><br><span class="line">del hyper-v.txt</span><br><span class="line">Dism &#x2F;online &#x2F;enable-feature &#x2F;featurename:Microsoft-Hyper-V-All &#x2F;LimitAccess &#x2F;ALL</span><br></pre></td></tr></table></figure><p>然后，文件保存成”自定义名字.bat”，反正是 .bat的文件就行。</p><h3 id="2-运行"><a href="#2-运行" class="headerlink" title="2.运行"></a>2.运行</h3><p>右键，<mark>用管理员身份运行</mark>。</p><p>等运行完成，重启电脑后就安装好了。</p><h3 id="3-查看"><a href="#3-查看" class="headerlink" title="3.查看"></a>3.查看</h3><p>打开【启用或关闭Windows功能】，看到 Hyper-V已经有了，并打上了勾；适用于 Linux的Windows子系统也有了。</p><p>装完这个，再运行 Docker Desktop安装包，就安装成功了。</p><p>之前好像有试过，安装失败了。</p>]]></content>
      
      
      <categories>
          
          <category> Windows </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Docker </tag>
            
            <tag> Windows </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Python3.8安装turle库报错</title>
      <link href="/2023/10/12/Python3-8%E5%AE%89%E8%A3%85turle%E5%BA%93%E6%8A%A5%E9%94%99/"/>
      <url>/2023/10/12/Python3-8%E5%AE%89%E8%A3%85turle%E5%BA%93%E6%8A%A5%E9%94%99/</url>
      
        <content type="html"><![CDATA[<p>这个应该是Python低版本都会碰到的错误，我用的Python3.8.6就报错了，比这个低的版本可能都会有这个错误。</p><p>报错信息如下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 运行 pip install turtle</span></span><br><span class="line">Collecting turtle</span><br><span class="line">Downloading<span class="string">&#x27; turtle-0.0.2. tar. gz (11,kB) Preparing metadata (setup.py)</span></span><br><span class="line"><span class="string">error. error: subprocess-exited-with-error.</span></span><br><span class="line"><span class="string">X python setup.py egg info did not run successfully. exit code:1</span></span><br><span class="line"><span class="string">&#x27;</span>[7 lines<span class="string">&#x27;of output]</span></span><br><span class="line"><span class="string">Traceback (most recent call last): File “&lt;string&gt;&quot;, line.36,| in &lt;module&gt;</span></span><br><span class="line"><span class="string">File “&lt;pip=setuptools-caller&gt;&quot;, line 34, in&#x27;</span>&lt;module&gt;</span><br><span class="line">File <span class="string">&quot;C:\Users\wq\AppData\Local\Temp\pip-install&#x27;-vq_spolw\turtle_0870ca33270d4fe9b738a5def2756154\setup.py&quot;</span>,line:40</span><br><span class="line">except ValueError<span class="string">&quot;,ve: SyntaxError: invalid syntax [end of output]</span></span><br><span class="line"><span class="string">U 20</span></span><br><span class="line"><span class="string">note: This error originates from a subprocess, and is liķely not a problem with pip. </span></span><br></pre></td></tr></table></figure><a id="more"></a><h2 id="解决方法"><a href="#解决方法" class="headerlink" title="解决方法"></a>解决方法</h2><h3 id="1-修改-setup-py-文件内容"><a href="#1-修改-setup-py-文件内容" class="headerlink" title="1.修改 setup.py 文件内容"></a>1.修改 setup.py 文件内容</h3><p>下载turtle-0.0.2.tar.gz ：<br><a class="link"   href="https://link.zhihu.com/?target=https://files.pythonhosted.org/packages/ff/f0/21a42e9e424d24bdd0e509d5ed3c7dfb8f47d962d9c044dba903b0b4a26f/turtle-0.0.2.tar.gz" >https://link.zhihu.com/?target=https%3A//files.pythonhosted.org/packages/ff/f0/21a42e9e424d24bdd0e509d5ed3c7dfb8f47d962d9c044dba903b0b4a26f/turtle-0.0.2.tar.gz<i class="fas fa-external-link-alt"></i></a></p><p>解压后，可以看到是 turtle 这个库中 setup.py 文件中 line 40行的代码的问题：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">except</span> ValueError, ve:</span><br></pre></td></tr></table></figure><p>完整一点的代码是：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">pluginModules</span> (<span class="params">moduleNames</span>):</span></span><br><span class="line">    <span class="keyword">from</span> twisted.python.reflect <span class="keyword">import</span> namedAny </span><br><span class="line">    <span class="keyword">for</span> moduleName <span class="keyword">in</span> moduleNames:</span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            <span class="keyword">yield</span> namedAny(moduleName)</span><br><span class="line">        <span class="keyword">except</span> ImportError:</span><br><span class="line">            <span class="keyword">pass</span></span><br><span class="line">        <span class="keyword">except</span> ValueError, ve: <span class="comment"># line 40</span></span><br><span class="line">            <span class="keyword">if</span> ve.drgs[<span class="number">0</span>] != <span class="string">&#x27;Empty module name&#x27;</span>:</span><br><span class="line">                traceback.print_exc()</span><br><span class="line">        <span class="keyword">except</span>:</span><br><span class="line">            traceback.print_exc()</span><br></pre></td></tr></table></figure><p>可以看到excep 后面并没有用括号，所以解决方法就是：</p><p>把 turtule库的包直接下载下来，然后修改 setup.py中40行的代码，改为：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">except</span> (ValueError, ve):</span><br></pre></td></tr></table></figure><p>修改完后，保存下文件就行了。</p><h3 id="2-安装-turtle"><a href="#2-安装-turtle" class="headerlink" title="2.安装 turtle"></a>2.安装 turtle</h3><p>回到 解压出来的 turtle目录上层， 选择打开powershell 或者 命令提示符。</p><p>运行以下命令：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install -e turtle-0.0.2</span><br></pre></td></tr></table></figure><p>安装完成后，即可以正常画面。</p>]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>开源Linux服务器运维管理面板1Panel</title>
      <link href="/2023/09/23/%E5%BC%80%E6%BA%90Linux%E6%9C%8D%E5%8A%A1%E5%99%A8%E8%BF%90%E7%BB%B4%E7%AE%A1%E7%90%86%E9%9D%A2%E6%9D%BF1Panel/"/>
      <url>/2023/09/23/%E5%BC%80%E6%BA%90Linux%E6%9C%8D%E5%8A%A1%E5%99%A8%E8%BF%90%E7%BB%B4%E7%AE%A1%E7%90%86%E9%9D%A2%E6%9D%BF1Panel/</url>
      
        <content type="html"><![CDATA[<p>1Panel 是一个开源的 Linux 服务器运维管理面板。</p><p>安装很方便，运行一条命令就安装好了。</p><p>原来一直没用面板，主要就是都用的Docker，所以也不用看什么，基本上命令就够用了。</p><p>不过随着Docker中的容器越来越多，先是装了个 LazyDocker 来看。突然看到这个开源的管理面板工具，就试了下。感觉还不错。</p><a id="more"></a><h2 id="在线安装1Panel"><a href="#在线安装1Panel" class="headerlink" title="在线安装1Panel"></a>在线安装1Panel</h2><p>** Ubuntu：**</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">curl -sSL https://resource.fit2cloud.com/1panel/package/quick_start.sh -o quick_start.sh &amp;&amp; sudo bash quick_start.sh</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Debian</span></span><br><span class="line">curl -sSL https://resource.fit2cloud.com/1panel/package/quick_start.sh -o quick_start.sh &amp;&amp; bash quick_start.sh</span><br><span class="line"></span><br><span class="line"><span class="comment"># RedHat/CentOS</span></span><br><span class="line">curl -sSL https://resource.fit2cloud.com/1panel/package/quick_start.sh -o quick_start.sh &amp;&amp; sh quick_start.sh</span><br></pre></td></tr></table></figure><p>安装成功后，控制台会打印面板访问信息，可通过浏览器访问 1Panel：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http:&#x2F;&#x2F;服务器IP地址:目标端口&#x2F;安全入口</span><br></pre></td></tr></table></figure><p>如果使用的是云服务器，请至安全组开放目标端口。</p><h2 id="忘记1Panel登录的账号密码"><a href="#忘记1Panel登录的账号密码" class="headerlink" title="忘记1Panel登录的账号密码"></a>忘记1Panel登录的账号密码</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 获取root权限</span></span><br><span class="line">sudo -i</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查询账号密码等</span></span><br><span class="line">1pctl user-info</span><br></pre></td></tr></table></figure><p>返回的结果如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">username: abcdefg</span><br><span class="line">password: abcdefg123</span><br><span class="line">port: 8080</span><br><span class="line">ssl: disable</span><br><span class="line">entrance: 123450a6b8</span><br></pre></td></tr></table></figure><p>注意，这里的entrance的值就是访问链接中的<mark>安全入口</mark>。</p><p>用 <code>1pctl --help</code> 可以控制这个工具的其它命令。</p><h2 id="官方文档"><a href="#官方文档" class="headerlink" title="官方文档"></a>官方文档</h2><p><strong>产品优势</strong></p><ul><li>快速建站：深度集成 Wordpress 和 Halo，域名绑定、SSL 证书配置等一键搞定；</li><li>高效管理：通过 Web 端轻松管理 Linux 服务器，包括应用管理、主机监控、文件管理、数据库管理、容器管理等；</li><li>安全可靠：最小漏洞暴露面，提供防火墙和安全审计等功能；</li><li>一键备份：支持一键备份和恢复，备份数据云端存储，永不丢失。</li></ul><p>官方文档：<a class="link"   href="https://1panel.cn/docs/" >https://1panel.cn/docs/<i class="fas fa-external-link-alt"></i></a></p>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Python中关于小数四舍五入的方法</title>
      <link href="/2023/09/23/Python%E4%B8%AD%E5%85%B3%E4%BA%8E%E5%B0%8F%E6%95%B0%E5%9B%9B%E8%88%8D%E4%BA%94%E5%85%A5%E7%9A%84%E6%96%B9%E6%B3%95/"/>
      <url>/2023/09/23/Python%E4%B8%AD%E5%85%B3%E4%BA%8E%E5%B0%8F%E6%95%B0%E5%9B%9B%E8%88%8D%E4%BA%94%E5%85%A5%E7%9A%84%E6%96%B9%E6%B3%95/</url>
      
        <content type="html"><![CDATA[<p>在Python中，我们经常需要对小数进行四舍五入操作。四舍五入是一种常见的数值处理方式，可以将小数精确到指定的位数。Python提供了多种方法来实现小数的四舍五入操作。</p><a id="more"></a><h2 id="方法一：round-函数"><a href="#方法一：round-函数" class="headerlink" title="方法一：round()函数"></a>方法一：round()函数</h2><p>使用内置的round()函数来进行四舍五入。</p><p><strong>函数用法：</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">round</span>(number, ndigits)</span><br></pre></td></tr></table></figure><ul><li>number：要进行四舍五入的数字。</li><li>ndigits：保留的小数位数，默认为0。如果ndigits为正数，则表示保留的小数位数；如果ndigits为负数，则表示要四舍五入到整数位数。</li></ul><p><strong>举例：</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 四舍五入到整数位数</span></span><br><span class="line">a = <span class="number">3.6</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">round</span>(a))  <span class="comment"># 输出：4</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 四舍五入到1位小数</span></span><br><span class="line">a = <span class="number">3.14159</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">round</span>(a, <span class="number">1</span>))  <span class="comment"># 输出：3.1</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 四舍五入到2位小数</span></span><br><span class="line">a = <span class="number">3.14159</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">round</span>(a, <span class="number">2</span>)) <span class="comment"># 输出：3.14</span></span><br></pre></td></tr></table></figure><p>需要注意的是，由于浮点数的精度问题，round()函数可能无法得到准确的结果。如果需要更高精度的四舍五入，建议使用decimal库中的Decimal类。</p><h2 id="方法二：format-格式化方法"><a href="#方法二：format-格式化方法" class="headerlink" title="方法二：format()格式化方法"></a>方法二：format()格式化方法</h2><p><strong>举例：</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">b = <span class="number">3.14159</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;&#123;:.2f&#125;&#x27;</span>.<span class="built_in">format</span>(b)) <span class="comment"># 保留2位小数</span></span><br></pre></td></tr></table></figure><p>缺点与round() 函数一样，由于浮点数的精度问题，可能无法得到准确的结果。</p><h2 id="方法三：Decimal类"><a href="#方法三：Decimal类" class="headerlink" title="方法三：Decimal类"></a>方法三：Decimal类</h2><p>Decimal类提供了更高精度的十进制运算，可以避免浮点数精度问题。通过使用Decimal类的quantize()方法，可以指定要保留的小数位数，并选择四舍五入的方式进行舍入。</p><p><strong>示例代码：</strong></p><p>以下是使用Decimal类进行四舍五入的示例代码：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> decimal <span class="keyword">import</span> Decimal, ROUND_HALF_UP</span><br><span class="line"></span><br><span class="line">a = Decimal(<span class="string">&#x27;543.012355&#x27;</span>)</span><br><span class="line">rounded_number = a.quantize(Decimal(<span class="string">&#x27;0.00001&#x27;</span>), rounding=ROUND_HALF_UP)</span><br><span class="line"><span class="built_in">print</span>(rounded_number)  <span class="comment"># 输出：543.01236</span></span><br><span class="line"></span><br><span class="line">b = <span class="number">543.012355</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">round</span>(b, <span class="number">5</span>)) <span class="comment"># 输出：543.01235</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;&#123;:.5f&#125;&#x27;</span>.<span class="built_in">format</span>(b)) <span class="comment"># 输出：543.01235</span></span><br></pre></td></tr></table></figure><ul><li>a 是一个Decimal对象；</li><li>Decimal(‘0.00001’)是一个Decimal对象，表示要保留的小数位数为5位；</li><li>rounding=ROUND_HALF_UP是一个常量，表示采用四舍五入的方式。</li></ul><p>通过使用Decimal类，可以获得更准确的四舍五入结果，避免了浮点数精度问题。</p><h3 id="其他舍入方式的常量"><a href="#其他舍入方式的常量" class="headerlink" title="其他舍入方式的常量"></a>其他舍入方式的常量</h3><p>除了ROUND_HALF_UP，decimal库中还提供了其他舍入方式的常量，可以用作quantize()方法的rounding参数。以下是常用的舍入方式常量：</p><ul><li>ROUND_DOWN：向零方向舍入。</li><li>ROUND_UP：远离零方向舍入。</li><li>ROUND_CEILING：向正无穷方向舍入。</li><li>ROUND_FLOOR：向负无穷方向舍入。</li><li>ROUND_HALF_DOWN：向最近的偶数舍入，如果距离两个最近的整数相等，则向下舍入。</li><li>ROUND_HALF_EVEN：向最近的偶数舍入，如果距离两个最近的整数相等，则向偶数舍入。</li><li>ROUND_HALF_UP：向最近的偶数舍入，如果距离两个最近的整数相等，则向上舍入。</li></ul><p>这些常量可以根据具体的舍入需求进行选择。例如，如果需要向下舍入，可以使用ROUND_DOWN；如果需要向上舍入，可以使用ROUND_UP。</p><p><a class="link"   href="https://docs.python.org/3/library/functions.html#round" >python官方文档上关于round()函数的介绍<i class="fas fa-external-link-alt"></i></a>：</p><blockquote><p>round(number, ndigits=None)<br>Return number rounded to ndigits precision after the decimal point. If ndigits is omitted or is None, it returns the nearest integer to its input.</p><p>For the built-in types supporting round(), values are rounded to the closest multiple of 10 to the power minus ndigits; if two multiples are equally close, rounding is done toward the even choice (so, for example, both round(0.5) and round(-0.5) are 0, and round(1.5) is 2). Any integer value is valid for ndigits (positive, zero, or negative). The return value is an integer if ndigits is omitted or None. Otherwise, the return value has the same type as number.</p><p>For a general Python object number, round delegates to number.<strong>round</strong>.</p><p>Note： The behavior of round() for floats can be surprising: for example, round(2.675, 2) gives 2.67 instead of the expected 2.68. This is not a bug: it’s a result of the fact that most decimal fractions can’t be represented exactly as a float. See Floating Point Arithmetic: Issues and Limitations for more information.</p><p>译文：</p><p>round(number, ndigits=None)<br>返回小数点后精确到ndigits位的四舍五入值。如果省略ndigits或为None，则返回最接近输入的整数。</p><p>对于支持round()的内置类型，值会被四舍五入到10的负ndigits次幂的最接近倍数；如果有两个倍数距离相等，则向偶数方向进行舍入（例如，round(0.5)和round(-0.5)都是0，而round(1.5)是2）。任何整数值都可以作为ndigits的有效值（正、零或负）。如果省略或为None，则返回值为整数。否则，返回值与number具有相同类型。</p><p>对于一般Python对象number，round委托给number.__round__。</p><p>注意：对浮点数使用round()可能会产生令人惊讶的结果：例如， round(2.675, 2)得到2.67而不是预期中的2.68。这不是一个错误：它是由于大多数十进制分数无法完全表示为浮点型所导致。请参阅《浮点运算问题和限制》获取更多信息。</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Python找出一堆按递增的文件中缺少的序号</title>
      <link href="/2023/08/30/Python%E6%89%BE%E5%87%BA%E4%B8%80%E5%A0%86%E6%8C%89%E9%80%92%E5%A2%9E%E7%9A%84%E6%96%87%E4%BB%B6%E4%B8%AD%E7%BC%BA%E5%B0%91%E7%9A%84%E5%BA%8F%E5%8F%B7/"/>
      <url>/2023/08/30/Python%E6%89%BE%E5%87%BA%E4%B8%80%E5%A0%86%E6%8C%89%E9%80%92%E5%A2%9E%E7%9A%84%E6%96%87%E4%BB%B6%E4%B8%AD%E7%BC%BA%E5%B0%91%E7%9A%84%E5%BA%8F%E5%8F%B7/</url>
      
        <content type="html"><![CDATA[<p>原因是这样的：</p><p>用手机拍了四五百张照片后，用苹果手机连接电脑，想导入到电脑里。</p><p>然后发现了这个问题：连接电脑后，在电脑上看到了像U盘盘符的Apple盘符，打开后发现照片不全；如果在手机相册中打开某张没有的照片，再在电脑中打开就能看到这张照片，不知道什么bug，感觉是没加载全的。</p><p>为了快速找到到底缺了哪些照片，因为图片文件名都是按序号递增的，就想用到Python直接检查一下好了。毕竟少了好几十张，手动找起来真的麻烦死了。</p><a id="more"></a><p><strong>功能实现：</strong> 找出 pic 目录下的图片文件缺少哪几个序号的文件名。</p><p>图片是从苹果手机导出的，所以文件名中的序号都是规律的、递增的。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python</span></span><br><span class="line"><span class="comment"># -*- encoding: utf-8 -*-</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">@File    :   test.py</span></span><br><span class="line"><span class="string">@Time    :   2023/08/30</span></span><br><span class="line"><span class="string">@Author  :   HDUZN</span></span><br><span class="line"><span class="string">@Version :   1.0</span></span><br><span class="line"><span class="string">@Contact :   hduzn@vip.qq.com</span></span><br><span class="line"><span class="string">@License :   (C)Copyright 2022-2023</span></span><br><span class="line"><span class="string">@Desc    :   把目录中所有的图片文件名由IMG_7255.JPG变成7255后写入到excel表格</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># here put the import lib</span></span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> openpyxl</span><br><span class="line"></span><br><span class="line"><span class="comment"># 获取目录中所有的图片文件名</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_file_names</span>(<span class="params">directory</span>):</span></span><br><span class="line">    file_names = []</span><br><span class="line">    <span class="keyword">for</span> filename <span class="keyword">in</span> os.listdir(directory):</span><br><span class="line">        file_names.append(filename)</span><br><span class="line">    <span class="keyword">return</span> file_names</span><br><span class="line"></span><br><span class="line"><span class="comment"># 处理文件名，由 IMG_7255.JPG 变成 7255</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">process_file_names</span>(<span class="params">file_names</span>):</span></span><br><span class="line">    num_list = []</span><br><span class="line">    <span class="keyword">for</span> filename <span class="keyword">in</span> file_names:</span><br><span class="line">        name_without_extension = os.path.splitext(filename)[<span class="number">0</span>] <span class="comment"># 去除后缀</span></span><br><span class="line">        num = name_without_extension.split(<span class="string">&#x27;_&#x27;</span>)[<span class="number">1</span>]</span><br><span class="line">        num_list.append(<span class="built_in">int</span>(num))</span><br><span class="line">    <span class="keyword">return</span> num_list</span><br><span class="line"></span><br><span class="line"><span class="comment"># 获取缺少的数字</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">generate_missing_numbers</span>(<span class="params">num_list</span>):</span></span><br><span class="line">    min_num = <span class="built_in">min</span>(num_list)</span><br><span class="line">    max_num = <span class="built_in">max</span>(num_list)</span><br><span class="line">    all_nums = <span class="built_in">set</span>(<span class="built_in">range</span>(min_num, max_num+<span class="number">1</span>))</span><br><span class="line">    missing_nums = <span class="built_in">sorted</span>(all_nums - <span class="built_in">set</span>(num_list))</span><br><span class="line">    <span class="keyword">return</span> missing_nums</span><br><span class="line"></span><br><span class="line"><span class="comment"># 写入Excel表格</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">write_to_excel</span>(<span class="params">num_list, missing_nums, output_file</span>):</span></span><br><span class="line">    workbook = openpyxl.Workbook()</span><br><span class="line">    sheet = workbook.active</span><br><span class="line">    <span class="keyword">for</span> i, num <span class="keyword">in</span> <span class="built_in">enumerate</span>(num_list):</span><br><span class="line">        sheet.cell(row=i+<span class="number">1</span>, column=<span class="number">1</span>, value=num)</span><br><span class="line">    <span class="keyword">for</span> i, num <span class="keyword">in</span> <span class="built_in">enumerate</span>(missing_nums):</span><br><span class="line">        sheet.cell(row=i+<span class="number">1</span>, column=<span class="number">2</span>, value=num)</span><br><span class="line">    workbook.save(output_file)</span><br><span class="line"></span><br><span class="line">directory = <span class="string">r&#x27;.\pic&#x27;</span></span><br><span class="line">output_file = <span class="string">&quot;num_list.xlsx&quot;</span></span><br><span class="line"></span><br><span class="line">file_names = get_file_names(directory) <span class="comment"># 获取目录中所有的图片文件名</span></span><br><span class="line">num_list = process_file_names(file_names) <span class="comment"># 处理文件名</span></span><br><span class="line">missing_nums = generate_missing_numbers(num_list) <span class="comment"># 获取缺少的数字</span></span><br><span class="line">write_to_excel(num_list, missing_nums, output_file) <span class="comment"># 写入Excel表格</span></span><br></pre></td></tr></table></figure><p>思路有了，代码就一步一步让聊天机器人写的，看看没问题直接拿过来用就行了。</p>]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Python使用pytesseract库进行文字识别</title>
      <link href="/2023/08/29/Python%E4%BD%BF%E7%94%A8pytesseract%E5%BA%93%E8%BF%9B%E8%A1%8C%E6%96%87%E5%AD%97%E8%AF%86%E5%88%AB/"/>
      <url>/2023/08/29/Python%E4%BD%BF%E7%94%A8pytesseract%E5%BA%93%E8%BF%9B%E8%A1%8C%E6%96%87%E5%AD%97%E8%AF%86%E5%88%AB/</url>
      
        <content type="html"><![CDATA[<p>pytesseract是Python的一个OCR文本识别库。</p><p>以下几点概括了它的主要信息：</p><ul><li>基于Tesseract OCR引擎：pytesseract是Tesseract OCR引擎的Python接口，需要先安装Tesseract。</li><li>支持多种语言：通过Tesseract训练好的语言数据，pytesseract支持英文、中文等多种语言的OCR识别。</li><li>主要功能：主要提供 image_to_string等方法，将图像文件识别为文本内容。</li><li>准确率：基于深度学习的Tesseract 4.0+，识别准确率可以达到96%以上。</li><li>使用简单：只需要几行代码就可以实现OCR识别，非常易于上手。</li><li>识别流程：加载图像-&gt; 预处理(提高识别质量) -&gt; OCR识别 -&gt; 后处理文本</li><li>适用场景：printed文本识别、 invoices识别、身份证/护照识别等。</li><li>优势：开源、使用简单、支持多语言、支持训练自定义模型。</li><li>劣势：对手写体识别效果较差，对图像质量要求较高。</li><li>备选方案：EasyOCR、PaddleOCR等其他OCR库。</li></ul><p>Github项目地址：<a class="link"   href="https://github.com/tesseract-ocr/tesseract" >https://github.com/tesseract-ocr/tesseract<i class="fas fa-external-link-alt"></i></a></p><a id="more"></a><h2 id="使用步骤"><a href="#使用步骤" class="headerlink" title="使用步骤"></a>使用步骤</h2><p>要使用pytesseract，除了编写代码外，还需要进行以下几个步骤：</p><h3 id="1-安装Tesseract-OCR引擎"><a href="#1-安装Tesseract-OCR引擎" class="headerlink" title="1. 安装Tesseract OCR引擎"></a>1. 安装Tesseract OCR引擎</h3><p>pytesseract是一个Python的OCR库，它依赖于Tesseract OCR引擎。因此，首先需要安装Tesseract OCR引擎。</p><p>Github项目页上有下载地址：<a class="link"   href="https://github.com/UB-Mannheim/tesseract/wiki" >https://github.com/UB-Mannheim/tesseract/wiki<i class="fas fa-external-link-alt"></i></a></p><p>找到“Tesseract installer for Windows”项中 <mark>tesseract-ocr-w64-setup-5.3.1.20230401.exe (64 bit)</mark> 下载就行（如果32位的就打开 <a class="link"   href="https://digi.bib.uni-mannheim.de/tesseract/" >older versions for 32 and 64 bit Windows<i class="fas fa-external-link-alt"></i></a> 的页面找对应包含w32的去下载）</p><p>注意：安装的时候有个语言数据的选择可以选一下自己需要的，我这就选择了chinese相关的4个。</p><p>安装完后，可以把安装目录下的 exe 文件添加到系统环境变量，默认是：<code>C:\Program Files\Tesseract-OCR\tesseract.exe</code></p><p>添加了系统环境变量，就可以运行以下命令查看安装的语言有哪些（没添加的话就安装目录下运行也可以的）：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">tesseract --list-langs</span><br><span class="line"></span><br><span class="line"><span class="comment"># 结果如下：</span></span><br><span class="line">chi_sim <span class="comment"># 简体中文</span></span><br><span class="line">chi_sim_vert</span><br><span class="line">chi_tra</span><br><span class="line">chi_tra_vert</span><br><span class="line">eng</span><br><span class="line">osd</span><br></pre></td></tr></table></figure><h3 id="2-安装pytesseract库"><a href="#2-安装pytesseract库" class="headerlink" title="2. 安装pytesseract库"></a>2. 安装pytesseract库</h3><p>在安装了Tesseract OCR引擎之后，可以使用pip命令安装pytesseract库。打开终端或命令提示符，运行以下命令：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install pytesseract</span><br></pre></td></tr></table></figure><h3 id="3-Python代码举例"><a href="#3-Python代码举例" class="headerlink" title="3.Python代码举例"></a>3.Python代码举例</h3><p>使用pytesseract库的<code>image_to_string</code>函数可以将图像转换为文本。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> cv2</span><br><span class="line"><span class="keyword">import</span> pytesseract</span><br><span class="line"></span><br><span class="line"><span class="comment"># 设置Tesseract的安装路径（可选）</span></span><br><span class="line"><span class="comment"># 如果Tesseract OCR引擎没有被自动识别，可以手动设置其安装路径。</span></span><br><span class="line">pytesseract.pytesseract.tesseract_cmd = <span class="string">r&#x27;C:\Program Files\Tesseract-OCR\tesseract.exe&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 读取图片</span></span><br><span class="line">image = cv2.imread(<span class="string">&#x27;IMG_2103.JPG&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 进行图像预处理,包括灰度化、降噪等</span></span><br><span class="line"><span class="comment"># ...</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 使用Pytesseract识别图片</span></span><br><span class="line">text = pytesseract.image_to_string(image, lang=<span class="string">&#x27;chi_sim&#x27;</span>) </span><br><span class="line"><span class="built_in">print</span>(text)</span><br></pre></td></tr></table></figure><p>以上是使用pytesseract的基本步骤。</p><p>很多时候直接对原图使用 pytesseract 识别效果不佳，需要先对图像进行预处理，提高识别准确率。常见的预处理有裁切、去噪、缩放、阈值化、膨胀腐蚀等。可以使用 OpenCV 等图像处理库。</p><p>比如：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 读取图片</span></span><br><span class="line">image = cv2.imread(<span class="string">&#x27;IMG_2103.JPG&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 进行图像预处理,包括灰度化、降噪等</span></span><br><span class="line">gray = cv2.cvtColor(image, cv2.COLOR_BGR2GRAY)</span><br><span class="line">gray = cv2.threshold(gray, <span class="number">0</span>, <span class="number">255</span>, cv2.THRESH_BINARY | cv2.THRESH_OTSU)[<span class="number">1</span>]</span><br><span class="line">gray = cv2.medianBlur(gray, <span class="number">3</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 使用Pytesseract识别图片</span></span><br><span class="line">text = pytesseract.image_to_string(gray, lang=<span class="string">&#x27;chi_sim&#x27;</span>) </span><br><span class="line"><span class="built_in">print</span>(text)</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
            <tag> 人工智能 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Python使用Easyocr库进行文字识别</title>
      <link href="/2023/08/29/Python%E4%BD%BF%E7%94%A8Easyocr%E5%BA%93%E8%BF%9B%E8%A1%8C%E6%96%87%E5%AD%97%E8%AF%86%E5%88%AB/"/>
      <url>/2023/08/29/Python%E4%BD%BF%E7%94%A8Easyocr%E5%BA%93%E8%BF%9B%E8%A1%8C%E6%96%87%E5%AD%97%E8%AF%86%E5%88%AB/</url>
      
        <content type="html"><![CDATA[<p>EasyOCR是一个开源的Python库，用于进行光学字符识别(OCR)。</p><p>它的主要特点包括：</p><ul><li>简单易用：只需要几行代码就可以实现OCR，非常容易上手。</li><li>支持多种语言：英语、中文、日语等80多种语言都支持。</li><li>准确率高：<mark>基于深度学习的算法</mark>，识别准确率高。</li><li>训练自定义模型：支持使用自己的数据集训练自定义OCR模型。</li><li>支持检测方向：可以自动检测图像文字方向。</li><li>支持多语言混合:可以处理多国语言混合的图像。</li><li>基于PyTorch：建立在PyTorch深度学习框架之上。</li></ul><p>由于易用性强、准确率高等优，EasyOCR非常适合用于快速实现OCR功能，或者作为OCR项目的基础库。它可以广泛应用于票据识别、车牌识别、身份证识别等领域。</p><p>Github项目地址：<a class="link"   href="https://github.com/JaidedAI/EasyOCR" >https://github.com/JaidedAI/EasyOCR<i class="fas fa-external-link-alt"></i></a></p><a id="more"></a><h2 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h2><p>测试地址：<a class="link"   href="https://www.jaided.ai/easyocr/" >https://www.jaided.ai/easyocr/<i class="fas fa-external-link-alt"></i></a></p><p>简体中文的语言代码：<code>ch_sim</code></p><h2 id="Python代码举例"><a href="#Python代码举例" class="headerlink" title="Python代码举例"></a>Python代码举例</h2><p>API文档：<a class="link"   href="https://www.jaided.ai/easyocr/documentation/" >https://www.jaided.ai/easyocr/documentation/<i class="fas fa-external-link-alt"></i></a></p><p>使用EasyOCR主要分为 <strong>三个步骤</strong>:</p><ol><li>导入库：<code>import easyocr</code></li><li>初始化识别器：<code>reader = easyocr.Reader([语言代码])</code></li><li>光学字符识别：<code>result = reader.readtext([图片路径])</code></li></ol><p>result 将返回每个检测到文本区域的坐标、文本内容等信息。</p><p>语言代码中有多种的话，可以用逗号隔开，比如同时有中文和英文： <code>[&#39;ch_sim&#39;, &#39;en&#39;]</code></p><h3 id="安装库"><a href="#安装库" class="headerlink" title="安装库"></a>安装库</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install easyocr</span><br></pre></td></tr></table></figure><h3 id="举例"><a href="#举例" class="headerlink" title="举例"></a>举例</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 导入库</span></span><br><span class="line"><span class="keyword">import</span> easyocr</span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建一个简体中文语言模型的OCR识别器</span></span><br><span class="line">reader = easyocr.Reader([<span class="string">&#x27;ch_sim&#x27;</span>])</span><br><span class="line"></span><br><span class="line"><span class="comment"># 识别图像中的文字</span></span><br><span class="line">result = reader.readtext(<span class="string">&#x27;IMG_2103.JPG&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 格式化显示result结果</span></span><br><span class="line"><span class="keyword">for</span> idx, res <span class="keyword">in</span> <span class="built_in">enumerate</span>(result):</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&quot;Text <span class="subst">&#123;idx&#125;</span>: <span class="subst">&#123;res[<span class="number">1</span>]&#125;</span>&quot;</span>)</span><br></pre></td></tr></table></figure><p>运行代码的时候如果报了以下的错误（这个是easyocr库中的文件中的代码）：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">    img = cv2.resize(img,(int(model_height*ratio),model_height),interpolation=Image.ANTIALIAS)   </span><br><span class="line">AttributeError: module <span class="string">&#x27;PIL.Image&#x27;</span> has no attribute <span class="string">&#x27;ANTIALIAS&#x27;</span></span><br></pre></td></tr></table></figure><p><strong>解决方法：</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 1.查看当前Pillow版本，其中包含版本号，我这是 10.0.0</span></span><br><span class="line">pip show pillow</span><br><span class="line"></span><br><span class="line"><span class="comment"># 2.卸载Pillow</span></span><br><span class="line">pip uninstall Pillow</span><br><span class="line"></span><br><span class="line"><span class="comment"># 3.安装9.5.0版本的Pillow</span></span><br><span class="line">pip install Pillow==9.5.0</span><br></pre></td></tr></table></figure><p>如果不是用pip的方式，用自己的方式就行了，反正就是Pillow的版本的问题。</p><h3 id="语言模型"><a href="#语言模型" class="headerlink" title="语言模型"></a>语言模型</h3><p>语言模型有哪些，上面的测试地址中有。这些例一下常见的几种语言：</p><table><thead><tr><th>Language</th><th>Code Name</th></tr></thead><tbody><tr><td>Simplified Chinese 简体中文</td><td>ch_sim</td></tr><tr><td>Traditional Chinese 繁体中文</td><td>ch_tra</td></tr><tr><td>German 德语</td><td>de</td></tr><tr><td>English 英语</td><td>en</td></tr><tr><td>French 法语</td><td>fa</td></tr><tr><td>Italian 意大利语</td><td>it</td></tr><tr><td>Japanese 日语</td><td>ja</td></tr><tr><td>Korean 韩语</td><td>ko</td></tr><tr><td>Russian 俄语</td><td>ru</td></tr></tbody></table>]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
            <tag> 人工智能 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Linux 校准系统时间方法</title>
      <link href="/2023/07/07/Linux%E6%A0%A1%E5%87%86%E7%B3%BB%E7%BB%9F%E6%97%B6%E9%97%B4%E6%96%B9%E6%B3%95/"/>
      <url>/2023/07/07/Linux%E6%A0%A1%E5%87%86%E7%B3%BB%E7%BB%9F%E6%97%B6%E9%97%B4%E6%96%B9%E6%B3%95/</url>
      
        <content type="html"><![CDATA[<p>手上的行空板里的Linux(Debian)系统中，系统时间不对，所以看一下怎么校准方便。</p><p>校正Linux系统时间有多种方法，可以通过手动设置时间、使用NTP服务器同步时间等方式来实现。</p><a id="more"></a><h3 id="方法一：手动设置系统时间"><a href="#方法一：手动设置系统时间" class="headerlink" title="方法一：手动设置系统时间"></a>方法一：手动设置系统时间</h3><p>手动设置系统时间可以通过date命令来实现。<mark>不过，系统重启后时间还是不对的，需要重新校准。</mark></p><p>例如，如果要将系统时间设置为2023年7月6日14点46分30秒，可以使用以下命令：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 显示行空板当前系统时间</span></span><br><span class="line">date</span><br><span class="line"></span><br><span class="line"><span class="comment"># 设置行空板系统时间</span></span><br><span class="line">date -s <span class="string">&quot;20230706 14:46:30&quot;</span></span><br></pre></td></tr></table></figure><blockquote><p>其中，-s选项指定要设置的时间，后面跟着的是需要设置的时间字符串。</p></blockquote><h3 id="方法二：使用systemd-timesyncd服务同步时间"><a href="#方法二：使用systemd-timesyncd服务同步时间" class="headerlink" title="方法二：使用systemd-timesyncd服务同步时间"></a>方法二：使用systemd-timesyncd服务同步时间</h3><p><mark>用此方法同步时间后，重启系统后时间就是对的了。</mark></p><p>systemd-timesyncd是Linux系统中的一个时间同步服务，可以通过它来同步计算机的系统时间。该服务默认情况下已经安装在大多数Linux发行版中，不需要额外安装。</p><p>可以使用以下命令来查看systemd-timesyncd服务的状态：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">systemctl status systemd-timesyncd.service</span><br></pre></td></tr></table></figure><p>可以使用以下命令来启动、停止、重启systemd-timesyncd服务：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">sudo systemctl start systemd-timesyncd.service</span><br><span class="line">sudo systemctl stop systemd-timesyncd.service</span><br><span class="line">sudo systemctl restart systemd-timesyncd.service</span><br></pre></td></tr></table></figure><p>systemd-timesyncd服务会自动从网络时间服务器同步时间，无需手动设置。如果需要修改默认的时间服务器，可以编辑 <code>/etc/systemd/timesyncd.conf</code>文件，将NTP=行改为需要的时间服务器地址，然后重启systemd-timesyncd服务即可。</p><h3 id="方法三：使用NTP服务器同步时间"><a href="#方法三：使用NTP服务器同步时间" class="headerlink" title="方法三：使用NTP服务器同步时间"></a>方法三：使用NTP服务器同步时间</h3><p>NTP（Network Time Protocol）是一种网络时间协议，可以用来同步计算机的系统时间。Linux系统中可以使用ntpdate命令来从NTP服务器同步时间。</p><p>首先需要安装ntpdate命令，可以使用以下命令来安装：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get update</span><br><span class="line">sudo apt-get install ntpdate</span><br></pre></td></tr></table></figure><p>安装完成后，使用以下命令来同步时间：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo ntpdate ntp.server.com</span><br></pre></td></tr></table></figure><p>其中，ntp.server.com是NTP服务器的地址，可以替换为其他可用的NTP服务器地址。</p><p>另外，可以将ntpdate命令添加到crontab中，定期同步时间。例如，可以在<code>/etc/crontab</code>中添加以下内容：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">*/5 * * * * root /usr/sbin/ntpdate ntp.server.com</span><br></pre></td></tr></table></figure><p>以上内容表示每隔5分钟同步一次时间。</p><p>当然，用方法二就解决了后，方法三我就没测试了。</p>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>为 Docker 创建的 Nginx 容器配置二级域名</title>
      <link href="/2023/07/02/%E4%B8%BADocker%E5%88%9B%E5%BB%BA%E7%9A%84Nginx%E5%AE%B9%E5%99%A8%E9%85%8D%E7%BD%AE%E4%BA%8C%E7%BA%A7%E5%9F%9F%E5%90%8D/"/>
      <url>/2023/07/02/%E4%B8%BADocker%E5%88%9B%E5%BB%BA%E7%9A%84Nginx%E5%AE%B9%E5%99%A8%E9%85%8D%E7%BD%AE%E4%BA%8C%E7%BA%A7%E5%9F%9F%E5%90%8D/</url>
      
        <content type="html"><![CDATA[<p>Docker中用 Nginx 镜像可以创建多个网站。</p><p>假设用Nginx镜像创建了容器1：</p><ul><li>容器名称：<strong>nginx</strong></li><li>访问的地址：<a href="http://ip:80（即直接用ip或者域名可访问）">http://ip:80（即直接用ip或者域名可访问）</a></li><li>配置文件：nginx.conf</li><li>网页：index.html</li></ul><p>用Nginx镜像创建了容器2：</p><ul><li>容器名称：<strong>ai_html_index</strong></li><li>访问地址：<a href="http://ip:9080（或者">http://ip:9080（或者</a> http://域名:9080 ）</li><li>网站目录：nginx-index（内含index.html）</li></ul><p>那容器1可以通过域名直接访问，想把容器2的访问设置一个二级域名的操作步骤如下。</p><a id="more"></a><h2 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h2><p><strong>1.ip和域名</strong><br>假设我的ip为：110.22.33.44，域名为：abc.com，当然已经设置好了域名解析。</p><p>想要添加的二级域名为：ai.abc.com</p><p><strong>2.容器1的配置文件nginx.conf</strong><br>准备好文件以及容器1的配置文件nginx.conf，内容如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">events &#123;</span><br><span class="line">    worker_connections 1024;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">http &#123;</span><br><span class="line">    include       mime.types;</span><br><span class="line">    default_type  application&#x2F;octet-stream;</span><br><span class="line">    sendfile        on;</span><br><span class="line">    keepalive_timeout  65;</span><br><span class="line"></span><br><span class="line">    server &#123;</span><br><span class="line">        listen 80;</span><br><span class="line">        server_name abc.com www.abc.com;</span><br><span class="line">        root &#x2F;usr&#x2F;share&#x2F;nginx&#x2F;html;</span><br><span class="line">        index index.html;</span><br><span class="line"></span><br><span class="line">        location &#x2F; &#123;</span><br><span class="line">            try_files $uri $uri&#x2F; &#x2F;index.html;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p><strong>3.创建容器1和容器2</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 创建容器1 nginx</span></span><br><span class="line">docker run -d -p 80:80 --name nginx -v /home/ubuntu/nginx-config/nginx.conf:/etc/nginx/nginx.conf:ro -v /home/ubuntu/nginx-config/html:/usr/share/nginx/html:ro nginx</span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建容器2 ai_html_index</span></span><br><span class="line">docker run -d --restart always -p 9080:80 -v /home/ubuntu/nginx-index/:/usr/share/nginx/html --name ai_html_index nginx</span><br></pre></td></tr></table></figure><h2 id="操作步骤"><a href="#操作步骤" class="headerlink" title="操作步骤"></a>操作步骤</h2><p><strong>1.域名解析添加A记录</strong></p><p>首先，需要在域名解析服务商处添加一个A记录，将 ai.abc.com 指向 110.22.33.44。这样访问ai.abc.com 时，DNS解析会将其解析为110.22.33.44。</p><p><strong>2.修改 nginx.conf 配置文件</strong></p><p>需要在容器1的 nginx的配置文件中添加一个新的server块，用于处理 ai.abc.com 的请求。nginx.conf 文件修改后的内容为：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">events &#123;</span><br><span class="line">    worker_connections 1024;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">http &#123;</span><br><span class="line">    include       mime.types;</span><br><span class="line">    default_type  application&#x2F;octet-stream;</span><br><span class="line">    sendfile        on;</span><br><span class="line">    keepalive_timeout  65;</span><br><span class="line"></span><br><span class="line">    server &#123;</span><br><span class="line">        listen 80;</span><br><span class="line">        server_name abc.com www.abc.com;</span><br><span class="line">        root &#x2F;usr&#x2F;share&#x2F;nginx&#x2F;html;</span><br><span class="line">        index index.html;</span><br><span class="line"></span><br><span class="line">        location &#x2F; &#123;</span><br><span class="line">            try_files $uri $uri&#x2F; &#x2F;index.html;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"># ai</span><br><span class="line">server &#123;</span><br><span class="line">        listen 80;</span><br><span class="line">        server_name ai.abc.com;</span><br><span class="line"></span><br><span class="line">        location &#x2F; &#123;</span><br><span class="line">            proxy_pass http:&#x2F;&#x2F;110.22.33.44:9080;</span><br><span class="line">            proxy_set_header Host $host;</span><br><span class="line">            proxy_set_header X-Real-IP $remote_addr;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>修改好后，直接重启一下容器1：<code>docker restart nginx</code>，就可以用二级域名 ai.abc.com 访问容器2的网站了。</p><h3 id="proxy-set-header"><a href="#proxy-set-header" class="headerlink" title="proxy_set_header"></a>proxy_set_header</h3><blockquote><p>在nginx的反向代理配置中，<code>proxy_set_header</code>指令用于设置HTTP请求头。具体来说：</p><ol><li><p><code>proxy_set_header Host $host;</code>：该指令将设置代理请求的<code>Host</code>头字段为客户端请求的<code>Host</code>头字段。这是为了确保后端服务器能够正确处理请求，并根据请求的域名进行相应的处理。</p></li><li><p><code>proxy_set_header X-Real-IP $remote_addr;</code>：该指令将设置代理请求的<code>X-Real-IP</code>头字段为客户端的真实IP地址。这是为了将客户端的真实IP地址传递给后端服务器，以便后端服务器能够获取到客户端的真实IP地址。</p></li></ol><p>这两个指令在反向代理配置中是常见的设置，可以确保后端服务器能够正确处理请求，并获取到客户端的真实IP地址。在你的配置中，这两个指令用于将客户端请求的<code>Host</code>头字段和真实IP地址传递给第二个容器。</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> Docker </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Docker </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Python 写接口时编码问题</title>
      <link href="/2023/06/29/Python%E5%86%99%E6%8E%A5%E5%8F%A3%E6%97%B6%E7%BC%96%E7%A0%81%E9%97%AE%E9%A2%98/"/>
      <url>/2023/06/29/Python%E5%86%99%E6%8E%A5%E5%8F%A3%E6%97%B6%E7%BC%96%E7%A0%81%E9%97%AE%E9%A2%98/</url>
      
        <content type="html"><![CDATA[<p>想写个简单的接口，有了api2d的key（就像有了openai的key一样），可以调用API了，就简单写个接口当服务器用。</p><p>用的Web框架是Bottle，跟Flask用法一样，也是路由、视图那一套。只是简单的一个聊天接口，所以就用了这个更微型的。<br>用法：<a href="/2023/06/27/Python-Bottle%E6%A1%86%E6%9E%B6%E4%BD%BF%E7%94%A8%E4%B8%BE%E4%BE%8B/" title="Python Bottle框架使用举例">Python Bottle框架使用举例</a></p><p>写好接口，用 Requests 进行测试时发现，编码有问题，响应的结果老是乱码。</p><a href="/2023/06/29/Python-Requests%E4%BD%BF%E7%94%A8%E4%B8%BE%E4%BE%8B/" title="Python Requests 使用举例">Python Requests 使用举例</a><a id="more"></a><p>在GPT3.5 上问了老半天，来回就那几种方法，编码解码的，试来试去都不行。响应结果就是乱码，不管是Get请求，还是Post请求，都乱码。</p><p>心一横，用GPT4 问了一下，好家伙，两次回答就解决了。（就是费token）</p><h2 id="Get请求接口举例"><a href="#Get请求接口举例" class="headerlink" title="Get请求接口举例"></a>Get请求接口举例</h2><p>运行后，直接在浏览器 <a class="link"   href="http://localhost:8080/chat?q=%E6%9D%A5%E9%A6%96%E5%94%90%E8%AF%97" >http://localhost:8080/chat?q=来首唐诗<i class="fas fa-external-link-alt"></i></a> 访问，就可以看到响应的结果了。</p><p>解决乱码问题的关键是<mark>getunicode方法</mark>，<code>question = request.query.getunicode(&#39;q&#39;)</code> 这样会自动处理编码问题。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> bottle <span class="keyword">import</span> Bottle, request, response</span><br><span class="line"><span class="keyword">import</span> json</span><br><span class="line"></span><br><span class="line">app = Bottle()</span><br><span class="line"></span><br><span class="line"><span class="comment"># http://localhost:8080/chat?q=来首唐诗</span></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/chat&#x27;</span>, method=<span class="string">&#x27;GET&#x27;</span></span>)</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">chat</span>():</span></span><br><span class="line">    <span class="comment"># 获取请求中的数据, getunicode方法会自动处理编码问题</span></span><br><span class="line">    <span class="comment"># question = request.query.get(&#x27;q&#x27;)</span></span><br><span class="line">    question = request.query.getunicode(<span class="string">&#x27;q&#x27;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 处理输入话语，根据业务逻辑构建响应数据</span></span><br><span class="line">    result = question + <span class="string">&quot;:test----22222&quot;</span> <span class="comment"># 这里只是随便举例</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 处理数据，这里简单地返回固定的响应数据</span></span><br><span class="line">    response_data = &#123;</span><br><span class="line">        <span class="string">&#x27;message&#x27;</span>: <span class="string">&#x27;Success&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;answer&#x27;</span>: result</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 设置响应的 Content-Type 为 JSON</span></span><br><span class="line">    <span class="comment"># response.content_type = &#x27;application/json&#x27;</span></span><br><span class="line">    <span class="comment"># 设置响应的 Content-Type 为 JSON，并指定编码为 UTF-8</span></span><br><span class="line">    response.headers[<span class="string">&#x27;Content-Type&#x27;</span>] = <span class="string">&#x27;application/json; charset=utf-8&#x27;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 返回 JSON 响应, 序列化成 JSON字符串</span></span><br><span class="line">    <span class="comment"># return response_data</span></span><br><span class="line">    <span class="keyword">return</span> json.dumps(response_data, ensure_ascii=<span class="literal">False</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    app.run(host=<span class="string">&#x27;localhost&#x27;</span>, port=<span class="number">8080</span>)</span><br></pre></td></tr></table></figure><p>涉及 JSON的序列化内容详解可以看这篇：<a href="/2022/07/12/Python-JSON%E4%BD%BF%E7%94%A8%E4%B8%BE%E4%BE%8B/" title="Python JSON使用举例">Python JSON使用举例</a></p><h2 id="Post请求接口举例"><a href="#Post请求接口举例" class="headerlink" title="Post请求接口举例"></a>Post请求接口举例</h2><p>跟在Get请求中也是一样的，用<mark>getunicode方法</mark>，<code>question = request.forms.getunicode(&#39;question&#39;)</code> 这样会自动处理编码问题。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> bottle <span class="keyword">import</span> Bottle, request, response</span><br><span class="line"><span class="keyword">import</span> json, http.client</span><br><span class="line"></span><br><span class="line">app = Bottle()</span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/chat&#x27;</span>, method=<span class="string">&#x27;POST&#x27;</span></span>)</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">chat</span>():</span></span><br><span class="line">    <span class="comment"># 获取查询参数中的输入话语，getunicode方法会自动处理编码问题</span></span><br><span class="line">    question = request.forms.getunicode(<span class="string">&#x27;question&#x27;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 处理输入话语，根据业务逻辑构建响应数据    </span></span><br><span class="line">    <span class="comment"># question = &quot;床前明月光&quot;</span></span><br><span class="line">    result = question + <span class="string">&quot;:test----22222&quot;</span></span><br><span class="line">    <span class="comment"># print(result)</span></span><br><span class="line"></span><br><span class="line">    response_data = &#123;</span><br><span class="line">        <span class="string">&#x27;message&#x27;</span>: <span class="string">&#x27;Success&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;answer&#x27;</span>: result</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 设置响应的 Content-Type 为 JSON，并指定编码为 UTF-8</span></span><br><span class="line">    response.headers[<span class="string">&#x27;Content-Type&#x27;</span>] = <span class="string">&#x27;application/json; charset=utf-8&#x27;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 返回 JSON 响应，ensure_ascii=False 返回的JSON字符串中的非ASCII字符不会被转义</span></span><br><span class="line">    <span class="keyword">return</span> json.dumps(response_data, ensure_ascii=<span class="literal">False</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    app.run(host=<span class="string">&#x27;localhost&#x27;</span>, port=<span class="number">8080</span>)</span><br></pre></td></tr></table></figure><h2 id="json参数与data参数区别"><a href="#json参数与data参数区别" class="headerlink" title="json参数与data参数区别"></a>json参数与data参数区别</h2><p>Post 请求时，发现如果调用的时候用的是 json 参数：<code>response = requests.post(url, json=&#123;&#39;question&#39;: &#39;今天天气&#39;&#125;)</code><br>如果是data参数： <code>response = requests.post(url, data=&#123;&#39;question&#39;: &#39;今天天气&#39;&#125;)</code> 。</p><p>在requests库中，<code>json</code>和<code>data</code>参数都可以用于发送POST请求的请求体数据，但它们的使用方式和数据格式有所不同。</p><h3 id="1-json参数"><a href="#1-json参数" class="headerlink" title="1.json参数"></a>1.json参数</h3><ul><li>使用 json 参数时，可以将一个Python对象（通常是字典）作为参数传递给 json ，requests库会自动将其转换为JSON格式，并将其作为请求体发送。</li><li>json 参数会自动设置请求头中的<code>Content-Type</code>为<code>application/json</code>，表示请求体中的数据为JSON格式。</li><li>这种方式适用于与API进行交互，特别是需要发送JSON格式数据的情况。</li><li>例如，当向一个创建用户的接口发送用户信息时，可以使用json参数将数据以JSON格式发送。<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> json</span><br><span class="line"></span><br><span class="line">data = &#123;<span class="string">&#x27;name&#x27;</span>: <span class="string">&#x27;John Doe&#x27;</span>, <span class="string">&#x27;age&#x27;</span>: <span class="number">25</span>&#125;</span><br><span class="line">headers = &#123;<span class="string">&#x27;Content-Type&#x27;</span>: <span class="string">&#x27;application/json&#x27;</span>&#125;</span><br><span class="line"></span><br><span class="line">response = requests.post(<span class="string">&#x27;https://api.example.com/user&#x27;</span>, json=data, headers=headers)</span><br><span class="line"><span class="built_in">print</span>(response.status_code)</span><br></pre></td></tr></table></figure><h3 id="2-data参数"><a href="#2-data参数" class="headerlink" title="2.data参数"></a>2.data参数</h3></li><li>使用 data 参数时，可以将一个字典对象作为参数传递给 data ，requests库会自动将其转换为URL编码格式，并将其作为请求体发送。</li><li>data 参数不会自动设置请求头中的<code>Content-Type</code>，默认为<code>application/x-www-form-urlencoded</code>，表示请求体中的数据为URL编码格式。</li><li>这种方式适用于与传统的Web表单进行交互，特别是需要发送URL编码格式数据的情况。</li><li>例如，当向一个登录接口发送用户名和密码时，可以使用data参数将数据以URL编码格式发送。<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"></span><br><span class="line">data = &#123;<span class="string">&#x27;username&#x27;</span>: <span class="string">&#x27;admin&#x27;</span>, <span class="string">&#x27;password&#x27;</span>: <span class="string">&#x27;123456&#x27;</span>&#125;</span><br><span class="line">response = requests.post(<span class="string">&#x27;https://api.example.com/login&#x27;</span>, data=data)</span><br><span class="line"><span class="built_in">print</span>(response.status_code)</span><br></pre></td></tr></table></figure>总结：</li><li>json 参数适用于与API进行交互，发送JSON格式的数据。自动设置请求头为<code>application/json</code>。</li><li>data 参数适用于适用于与传统的Web表单进行交互，发送URL编码格式的数据。不会自动设置请求头，默认为<code>application/x-www-form-urlencoded</code>。</li></ul>]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Python Requests 使用举例</title>
      <link href="/2023/06/29/Python-Requests%E4%BD%BF%E7%94%A8%E4%B8%BE%E4%BE%8B/"/>
      <url>/2023/06/29/Python-Requests%E4%BD%BF%E7%94%A8%E4%B8%BE%E4%BE%8B/</url>
      
        <content type="html"><![CDATA[<p>在Python中，Requests 是一个非常常用的第三方库，用于发送HTTP请求。它提供了简洁而直观的API，使得发送HTTP请求变得非常容易。requests库可以用于发送GET、POST、PUT、DELETE等各种类型的请求，并且支持处理Cookie、Session、文件上传等功能。</p><p>官方文档：<a class="link"   href="https://requests.readthedocs.io/en/latest/" >https://requests.readthedocs.io/en/latest/<i class="fas fa-external-link-alt"></i></a></p><a id="more"></a><h2 id="安装-requests-包"><a href="#安装-requests-包" class="headerlink" title="安装 requests 包"></a>安装 requests 包</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install requests</span><br></pre></td></tr></table></figure><h2 id="使用-requests-库"><a href="#使用-requests-库" class="headerlink" title="使用 requests 库"></a>使用 requests 库</h2><h3 id="1-Get-请求"><a href="#1-Get-请求" class="headerlink" title="1.Get 请求"></a>1.Get 请求</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests <span class="comment"># 导入requests库</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_test</span>():</span></span><br><span class="line">    ques = <span class="string">&quot;今日天气&quot;</span> <span class="comment"># 设置问题为&quot;今日天气&quot;</span></span><br><span class="line">    url = <span class="string">&quot;http://127.0.0.1:8080/chat?q=&quot;</span> + ques  <span class="comment"># 构建请求的URL</span></span><br><span class="line">    response = requests.get(url) <span class="comment"># 发送GET请求</span></span><br><span class="line">    result = response.json()  <span class="comment"># 将响应内容解析为JSON格式</span></span><br><span class="line">    <span class="comment"># result = response.text</span></span><br><span class="line">    <span class="built_in">print</span>(result)  <span class="comment"># 打印结果</span></span><br><span class="line"></span><br><span class="line">get_test()</span><br></pre></td></tr></table></figure><p>用法很简单，主要看请求返回的数据，如果是 json格式的，就用 <code>result = response.json()</code> 直接得到 json格式数据，再看具体需要哪一项。如果不是 json 格式，直接用 <code>result = response.text</code> 文本格式就行。</p><h3 id="2-Post-请求"><a href="#2-Post-请求" class="headerlink" title="2.Post 请求"></a>2.Post 请求</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">post_test</span>():</span></span><br><span class="line">    url = <span class="string">&quot;http://127.0.0.1:8080/chat&quot;</span></span><br><span class="line">    response = requests.post(url, data=&#123;<span class="string">&#x27;question&#x27;</span>: <span class="string">&#x27;今天天气&#x27;</span>&#125;) <span class="comment"># 设置问题为&quot;今日天气&quot;</span></span><br><span class="line"></span><br><span class="line">    <span class="built_in">print</span>(response.status_code) <span class="comment"># 响应状态码</span></span><br><span class="line">    <span class="keyword">if</span> (response.status_code == <span class="number">200</span>): <span class="comment"># 状态码200时，表示正常</span></span><br><span class="line">        result = response.json()</span><br><span class="line">        <span class="built_in">print</span>((result[<span class="string">&quot;answer&quot;</span>])) <span class="comment"># 响应内容中对应 &quot;answer&quot;的值</span></span><br><span class="line"></span><br><span class="line">post_test()</span><br></pre></td></tr></table></figure><p>如果调用API接口，一般没啥问题，但如果是自己写的接口，可能就会碰到<mark>返回的结果有乱码</mark>的问题。</p><p>用Python的Web框架（Bottle或Flask）写接口的时候，就碰到了这个问题，解决方法：<a href="/2023/06/29/Python%E5%86%99%E6%8E%A5%E5%8F%A3%E6%97%B6%E7%BC%96%E7%A0%81%E9%97%AE%E9%A2%98/" title="Python 写接口时编码问题">Python 写接口时编码问题</a></p>]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Python Bottle框架使用举例</title>
      <link href="/2023/06/27/Python-Bottle%E6%A1%86%E6%9E%B6%E4%BD%BF%E7%94%A8%E4%B8%BE%E4%BE%8B/"/>
      <url>/2023/06/27/Python-Bottle%E6%A1%86%E6%9E%B6%E4%BD%BF%E7%94%A8%E4%B8%BE%E4%BE%8B/</url>
      
        <content type="html"><![CDATA[<p>想写个简单的Get请求和Post请求的接口，因为功能上都很简单，所以想找个小型的Web框架，原来一直用的Flask，然后看到了Bottle。</p><p>Bottle 是一个简单而快速的微型Web框架，它只有一个文件，没有外部依赖。适合小型项目和快速原型开发，也可以用于构建API和微服务。适合初学者和小型项目使用。</p><p>官方文档原文：</p><blockquote><p>Bottle is a fast, simple and lightweight WSGI micro web-framework for Python. It is distributed as a single file module and has no dependencies other than the Python Standard Library.</p><p>Bottle是一个快速、简单、轻量级的WSGI微Web框架，适用于Python。它是作为单个文件模块分发的，除了Python标准库之外没有其他依赖项。</p></blockquote><p>官方文档：<a class="link"   href="https://bottlepy.org/docs/dev/" >https://bottlepy.org/docs/dev/<i class="fas fa-external-link-alt"></i></a></p><a id="more"></a><h2 id="安装-Bottle"><a href="#安装-Bottle" class="headerlink" title="安装 Bottle"></a>安装 Bottle</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install bottle</span><br></pre></td></tr></table></figure><p>安装了下，一看这个包果然够小了。</p><h2 id="Python-举例"><a href="#Python-举例" class="headerlink" title="Python 举例"></a>Python 举例</h2><p>原来用过Flask的话，就更简单了，也是路由、视图那一套。</p><p>举个最简单的例子：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> bottle <span class="keyword">import</span> Bottle</span><br><span class="line"></span><br><span class="line">app = Bottle()</span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/&#x27;</span></span>)</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">hello</span>():</span></span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;Hello, World!&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/n/&lt;name&gt;&#x27;</span></span>)</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">greet</span>(<span class="params">name</span>):</span></span><br><span class="line">    result = <span class="string">&quot;Hello, &#123;&#125;!&quot;</span>.<span class="built_in">format</span>(name)</span><br><span class="line">    <span class="keyword">return</span> result</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    app.run(host=<span class="string">&#x27;localhost&#x27;</span>, port=<span class="number">8080</span>)</span><br></pre></td></tr></table></figure><ul><li>1.首先，然后创建了一个Bottle实例，<code>app = Bottle()</code> ；</li><li>2.用route装饰器定义了两个路由。第一个路由处理根路径<code>/</code>，返回”Hello, World!”。第二个路由处理形如<code>/n/&lt;name&gt;</code>的路径，其中name是一个动态参数，可以在函数中使用。</li><li>3.最后，通过调用run函数来运行应用程序，指定主机和端口。</li></ul><p>当运行上述代码后，可以看到以下信息：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Bottle v0.12.25 server starting up (using WSGIRefServer())...</span><br><span class="line">Listening on http:&#x2F;&#x2F;localhost:8080&#x2F;</span><br><span class="line">Hit Ctrl-C to quit.</span><br></pre></td></tr></table></figure><p>然后在浏览器中访问 <code>http://localhost:8080/</code> 根路径时，会显示”Hello, World!”；<br>访问 <code>http://localhost:8080/n/John</code> 的路径时，会显示”Hello, John!”。</p>]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ChatGPT提示词【笔记】</title>
      <link href="/2023/06/17/ChatGPT%E6%8F%90%E7%A4%BA%E8%AF%8D-%E7%AC%94%E8%AE%B0/"/>
      <url>/2023/06/17/ChatGPT%E6%8F%90%E7%A4%BA%E8%AF%8D-%E7%AC%94%E8%AE%B0/</url>
      
        <content type="html"><![CDATA[<p>看了DeepLearning.ai 联合 OpenAI 推出《面向开发者的 ChatGPT 提示工程》教程。<br>讲师是 DeepLearning 创始人吴恩达以及 OpenAI 开发者 Isa Fulford。</p><p>B站有视频加了中文字幕：<a class="link"   href="https://www.bilibili.com/video/BV1s24y1F7eq/?vd_source=7b206824d261f356cd0389d937705d37" >ChatGPT 提示工程教程<i class="fas fa-external-link-alt"></i></a></p><p>然后又看了【方糖GPT课】（付费课程）中对于上面教程中提示词的举例。</p><p>就顺便记一下笔记。</p><a id="more"></a><h2 id="两大原则／六条策略"><a href="#两大原则／六条策略" class="headerlink" title="两大原则／六条策略"></a>两大原则／六条策略</h2><h3 id="原则一：编写清晰具体的指令"><a href="#原则一：编写清晰具体的指令" class="headerlink" title="原则一：编写清晰具体的指令"></a>原则一：编写清晰具体的指令</h3><ul><li>使用<mark>界定符</mark>划分输入区域。例如：&lt;&gt;，```</li><li>结构化输出。例如：<mark>JSON</mark>，<mark>HTML</mark></li><li>执行时随时<mark>检查条件</mark>后再继续</li><li><mark>少量</mark>举例</li></ul><p>原文：<br><img                       lazyload                     src="/images/loading.svg"                     data-src="/img/chatgpt_prompt_1.png"                      style="zoom: 50%;"                ></p><p><strong>举例：</strong></p><ul><li>1).使用翻译的内容用``` 包裹</li><li>2).以JSON格式返回</li><li>3).举例了JSON格式返回的样例<img                       lazyload                     src="/images/loading.svg"                     data-src="/img/chatgpt_prompt_2.png"                      style="zoom: 100%;"                ></li></ul><h3 id="原则二：给模型时间思考"><a href="#原则二：给模型时间思考" class="headerlink" title="原则二：给模型时间思考"></a>原则二：给模型时间思考</h3><ul><li>指定完成任务的<mark>具体步骤</mark></li><li>提示模型在得出结论前<mark>制定自己的解决方案</mark></li></ul><p>原文：<br><img                       lazyload                     src="/images/loading.svg"                     data-src="/img/chatgpt_prompt_3.png"                      style="zoom: 50%;"                ></p><p><strong>举例：</strong></p><ul><li>指定完成任务的具体步骤<img                       lazyload                     src="/images/loading.svg"                     data-src="/img/chatgpt_prompt_4.png"                      style="zoom: 100%;"                ></li></ul><p>必要时可以用<mark>伪代码</mark>。</p>]]></content>
      
      
      <categories>
          
          <category> AI </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ChatGPT </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>VSCode配置C++运行环境</title>
      <link href="/2023/05/16/VSCode%E9%85%8D%E7%BD%AEC-%E8%BF%90%E8%A1%8C%E7%8E%AF%E5%A2%83/"/>
      <url>/2023/05/16/VSCode%E9%85%8D%E7%BD%AEC-%E8%BF%90%E8%A1%8C%E7%8E%AF%E5%A2%83/</url>
      
        <content type="html"><![CDATA[<p>为什么要在VS Code里配置C++编译的环境呢？因为原来用的VS Code写Python，就是用习惯了，感觉VS Code的UI升级后很好看，反正用着各种舒服。</p><p>而且，运行C++也不用来开发什么项目，只是方便测试一点简单的代码，所以对我来说，就够用了。</p><p>VS Code官方也有配置的教程：<a class="link"   href="https://code.visualstudio.com/docs/cpp/config-mingw" >https://code.visualstudio.com/docs/cpp/config-mingw<i class="fas fa-external-link-alt"></i></a></p><a id="more"></a><p>主要分3步：</p><ul><li>在VS Code中安装C++扩展；</li><li>下载安装 mingw-w64（带gcc c++的编译器和gdb调试器）；</li><li>VS Code中配置。</li></ul><h3 id="1-在VS-Code中安装C-扩展"><a href="#1-在VS-Code中安装C-扩展" class="headerlink" title="1.在VS Code中安装C++扩展"></a>1.在VS Code中安装C++扩展</h3><p>直接在VS Code的扩展中搜 C++ 就能找到 <code>C/C++ for Visual Studio Code</code>，直接安装就行。</p><h3 id="2-下载安装-mingw-w64"><a href="#2-下载安装-mingw-w64" class="headerlink" title="2.下载安装 mingw-w64"></a>2.下载安装 mingw-w64</h3><p>官网下载：<a class="link"   href="https://www.mingw-w64.org/downloads/#mingw-builds" >https://www.mingw-w64.org/downloads/#mingw-builds<i class="fas fa-external-link-alt"></i></a></p><p>Windwos系统按上面的提示，可以直接进入winlibs下载：<a class="link"   href="https://winlibs.com/" >https://winlibs.com/<i class="fas fa-external-link-alt"></i></a></p><p>找到 Release versions -&gt; UCRT runtime ，比如我这下载最新的 gcc 13.1.0，win64版本，直接下载第1个 7-Zip archive。</p><p>下载好后，得到压缩包：winlibs-x86_64-mcf-seh-gcc-13.1.0-llvm-16.0.2-mingw-w64ucrt-11.0.0-r1.7z</p><p>直接解压，比如放在D盘，解压后得到：<code>D:\mingw64</code>目录，解压即可，不需要安装。</p><p>PS.在winlibs上下载，其实是下载的github上的，所以如果不能访问github的话，可能就不行了，去别的地方下载吧。</p><p><strong>添加系统环境变量：</strong></p><p>把 <code>D:\mingw64\bin</code> 目录添加到系统环境变量中。</p><p>测试，打开Windows PowerShell或者命令提示符，依次运行：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">gcc --version</span><br><span class="line">g++ --version</span><br><span class="line">gdb --version</span><br><span class="line"></span><br><span class="line"><span class="comment"># 依次结果能看到版本号就表示可以用了。</span></span><br><span class="line">gcc.exe (MinGW-W64 x86_64-ucrt-mcf-seh, built by Brecht Sanders) 13.1.0</span><br><span class="line">……</span><br><span class="line">g++.exe (MinGW-W64 x86_64-ucrt-mcf-seh, built by Brecht Sanders) 13.1.0</span><br><span class="line">……</span><br><span class="line">GNU gdb (GDB <span class="keyword">for</span> MinGW-W64 x86_64, built by Brecht Sanders) 13.1</span><br><span class="line">……</span><br></pre></td></tr></table></figure><h3 id="3-VS-Code中配置"><a href="#3-VS-Code中配置" class="headerlink" title="3.VS Code中配置"></a>3.VS Code中配置</h3><p>1).在VS Code中打开一个项目目录，添加一个 test.cpp 文件。</p><p>添加示例代码：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;Hello, world!&quot;</span> &lt;&lt; endl;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>2).点击编辑器右上角的运行按钮。</p><p>在编译器列表中选择 <code>C/C++: g++.exe build and debug active file（生成和调试活动文件） </code></p><p>只有在第一次运行 test.cpp 时才会要求选择编译器。此编译器将被设置为 tasks.json 文件中的“默认”编译器。</p><p>编译成功后，结果就输出在集成的终端中了。</p><p>第一次运行程序时，C++扩展会创建 tasks.json ，存储生成的配置。文件在项目的 .vscode 文件夹中。</p><p>3).调试</p><p>Debug模式还是一样的用法，跟运行python没啥区别了。</p><p>配置好编译器后，感觉也没啥区别了。不过gcc不同版本会有什么差距，还不知道。因为我用的会比较少，只是测试一些基础代码，应该没啥关系。</p>]]></content>
      
      
      <categories>
          
          <category> VSCode </category>
          
      </categories>
      
      
        <tags>
            
            <tag> VSCode </tag>
            
            <tag> C++ </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Python Flask使用正则 模糊查询手机号</title>
      <link href="/2023/05/10/Python-Flask%E4%BD%BF%E7%94%A8%E6%AD%A3%E5%88%99%E6%A8%A1%E7%B3%8A%E6%9F%A5%E8%AF%A2%E6%89%8B%E6%9C%BA%E5%8F%B7/"/>
      <url>/2023/05/10/Python-Flask%E4%BD%BF%E7%94%A8%E6%AD%A3%E5%88%99%E6%A8%A1%E7%B3%8A%E6%9F%A5%E8%AF%A2%E6%89%8B%E6%9C%BA%E5%8F%B7/</url>
      
        <content type="html"><![CDATA[<p>Flask写了个页面，用来查询数据库中的手机号对应的信息。</p><p>我想查询的就两种情况。</p><ul><li>精确查询</li><li>模糊查询（分两种，号码不全和带<code>*</code>号的）</li></ul><a id="more"></a><p>精确查询就不用说了，主要说一下两种模糊查询的情况。</p><p><strong>第一种：号码不全的（不足11位）</strong></p><p>在Flask中，数据库用的是SQLAlchemy类，所以没有直接写sql语句查询。用like就行了。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">query_string = <span class="string">&#x27;13606735&#x27;</span></span><br><span class="line">users = User.query.<span class="built_in">filter</span>(User.phone.like(<span class="string">f&#x27;%<span class="subst">&#123;query_string&#125;</span>%&#x27;</span>)).<span class="built_in">all</span>()</span><br><span class="line"><span class="built_in">print</span>(users)</span><br></pre></td></tr></table></figure><p><strong>第二种：带<code>*</code>号的</strong></p><p>我这里是固定的格式，显示前3位和后3位，中间一串<code>*</code>号。比如：<code>136*******322</code></p><p>思路：</p><ul><li>先把字符串切片，获取前3位和后3位；</li><li>再把正则表达式的查询条件regex拼出来；</li><li>最后在filter中用用text就行了。</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> sqlalchemy <span class="keyword">import</span> text</span><br><span class="line"></span><br><span class="line">query_string = <span class="string">&#x27;136*******322&#x27;</span></span><br><span class="line"><span class="keyword">if</span> <span class="string">&#x27;*&#x27;</span> <span class="keyword">in</span> query_string:</span><br><span class="line"><span class="comment"># 切割电话号码</span></span><br><span class="line">phone_prefix = query_string[:<span class="number">3</span>]  <span class="comment"># 获取前3位</span></span><br><span class="line">phone_suffix = query_string[-<span class="number">3</span>:]  <span class="comment"># 获取后3位</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 使用正则表达式查询以136开头手机号码的用户，这里的phone是对应的字段名</span></span><br><span class="line"><span class="comment"># users = User.query.filter(text(&quot;phone REGEXP &#x27;^136&#x27;&quot;)).params(regex=regex).all()</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 构造正则表达式查询条件 &quot;^[1][3][6][0-9]&#123;5&#125;[3][2][2]$&quot;</span></span><br><span class="line">regex = <span class="string">f&#x27;^[<span class="subst">&#123;phone_prefix[<span class="number">0</span>]&#125;</span>][<span class="subst">&#123;phone_prefix[<span class="number">1</span>]&#125;</span>][<span class="subst">&#123;phone_prefix[<span class="number">2</span>]&#125;</span>][0-9]&#123;&#123;5&#125;&#125;[<span class="subst">&#123;phone_suffix[<span class="number">0</span>]&#125;</span>][<span class="subst">&#123;phone_suffix[<span class="number">1</span>]&#125;</span>][<span class="subst">&#123;phone_suffix[<span class="number">2</span>]&#125;</span>]$&#x27;</span></span><br><span class="line"><span class="comment"># print(regex)  # ^[1][3][6][0-9]&#123;5&#125;[3][2][2]$</span></span><br><span class="line">users = User.query.<span class="built_in">filter</span>(text(<span class="string">&quot;phone REGEXP :regex&quot;</span>)).params(regex=regex).<span class="built_in">all</span>()</span><br><span class="line"><span class="built_in">print</span>(users)</span><br></pre></td></tr></table></figure><p>这里对应直接用sql语句查询的话是：<br><code>select * from users where phone REGEXP &quot;^[1][3][6][0-9]&#123;5&#125;[3][2][2]$&quot;</code></p><p>完成一点的代码片就是：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Flask, render_template, request</span><br><span class="line"><span class="keyword">from</span> flask_sqlalchemy <span class="keyword">import</span> SQLAlchemy</span><br><span class="line"><span class="keyword">from</span> sqlalchemy <span class="keyword">import</span> text</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">query_test</span>():</span></span><br><span class="line">    query_tel = <span class="string">&#x27;136*******322&#x27;</span></span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">len</span>(query_tel) == <span class="number">11</span> <span class="keyword">and</span> query_tel.isdigit():</span><br><span class="line">        <span class="comment"># 精确查询 13676666322</span></span><br><span class="line">        user = User.query.filter_by(phone=query_tel).first()</span><br><span class="line">        <span class="built_in">print</span>(user)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="comment"># 模糊查询 136*******322</span></span><br><span class="line">        <span class="keyword">if</span> <span class="string">&#x27;*&#x27;</span> <span class="keyword">in</span> query_tel:</span><br><span class="line">            <span class="comment"># 切割电话号码</span></span><br><span class="line">            phone_prefix = query_tel[:<span class="number">3</span>]  <span class="comment"># 获取前3位</span></span><br><span class="line">            phone_suffix = query_tel[-<span class="number">3</span>:]  <span class="comment"># 获取后3位</span></span><br><span class="line"></span><br><span class="line">            <span class="comment"># 使用正则表达式查询以136开头手机号码的用户</span></span><br><span class="line">            <span class="comment"># users = User.query.filter(text(&quot;phone REGEXP &#x27;^136&#x27;&quot;)).params(regex=regex).all()</span></span><br><span class="line"></span><br><span class="line">            <span class="comment"># 构造正则表达式查询条件 &quot;^[1][3][6][0-9]&#123;5&#125;[3][2][2]$&quot;</span></span><br><span class="line">            regex = <span class="string">f&#x27;^[<span class="subst">&#123;phone_prefix[<span class="number">0</span>]&#125;</span>][<span class="subst">&#123;phone_prefix[<span class="number">1</span>]&#125;</span>][<span class="subst">&#123;phone_prefix[<span class="number">2</span>]&#125;</span>][0-9]&#123;&#123;5&#125;&#125;[<span class="subst">&#123;phone_suffix[<span class="number">0</span>]&#125;</span>][<span class="subst">&#123;phone_suffix[<span class="number">1</span>]&#125;</span>][<span class="subst">&#123;phone_suffix[<span class="number">2</span>]&#125;</span>]$&#x27;</span></span><br><span class="line">            <span class="built_in">print</span>(regex)  <span class="comment"># ^[1][3][6][0-9]&#123;5&#125;[3][2][2]$</span></span><br><span class="line">            users = User.query.<span class="built_in">filter</span>(text(<span class="string">&quot;phone REGEXP :regex&quot;</span>)).params(regex=regex).<span class="built_in">all</span>()</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            users = User.query.<span class="built_in">filter</span>(User.phone.like(<span class="string">f&#x27;%<span class="subst">&#123;query_tel&#125;</span>%&#x27;</span>)).<span class="built_in">all</span>()</span><br><span class="line">        <span class="built_in">print</span>(users)</span><br><span class="line"></span><br><span class="line">query_test()</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
            <tag> Flask </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Win10 Docker启动容器时，端口莫名没权限被拒绝</title>
      <link href="/2023/05/10/Win10%E7%AB%AF%E5%8F%A3%E8%8E%AB%E5%90%8D%E8%A2%AB%E6%8B%92%E7%BB%9D%E9%97%AE%E9%A2%98/"/>
      <url>/2023/05/10/Win10%E7%AB%AF%E5%8F%A3%E8%8E%AB%E5%90%8D%E8%A2%AB%E6%8B%92%E7%BB%9D%E9%97%AE%E9%A2%98/</url>
      
        <content type="html"><![CDATA[<p>在Win10系统中，装了Docker desktop，启动容器的时候，突然提示”Permission denied” 了。</p><p>之前还正常的，突然某次开机后，就提示映射的端口没有权限，被拒绝了。</p><p>输入 <code>netstat -ano | findstr &quot;50000&quot;</code> 查看端口占用信息时，它却无任何输出。端口并没被占用使用。</p><p>这是没有权限直接被拒绝了，并不是被占用了。</p><p>然后网上查了下。</p><a id="more"></a><p>找到原因：</p><blockquote><p>出现这个错误的原因是 Windows 10 的补丁 KB4074588 中存在一个已知问题：</p><p>安装此更新后，应用程序可能无法保留或绑定到以前工作的端口。</p><p>这些端口会被 Hyper-V 拿来保留备用，处于备用的端口无法被其他程序使用，用户登录后，系统会随机保留一些端口。使用 netsh interface ipv4 show excludedportrange protocol=tcp 可以查看被保留的端口段，每次重启都有可能是不同的端口。</p><p>因此，当你的系统启用 Hyper-V 或安装 Docker（安装 Docker Desktop 会启用 Hyper-V）之后，这个问题可能就会出现。</p></blockquote><p><strong>1.查看被保留的端口段</strong></p><p>所以，先用以下命令在Windows PowerShell查看了下被保留的端口段，范围内的端口段被保留了，就无法使用了。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">netsh interface ipv4 show excludedportrange protocol=tcp</span><br><span class="line"></span><br><span class="line"><span class="comment"># 运行结果如下：</span></span><br><span class="line">协议 tcp 端口排除范围</span><br><span class="line"></span><br><span class="line">开始端口    结束端口</span><br><span class="line">----------    --------</span><br><span class="line">      5357        5357</span><br><span class="line">     14353       14452</span><br><span class="line">     14453       14552</span><br><span class="line">     14553       14652</span><br><span class="line">     14653       14752</span><br><span class="line">     14759       14858</span><br><span class="line">     50000       50059     *</span><br><span class="line"></span><br><span class="line">* - 管理的端口排除。</span><br></pre></td></tr></table></figure><p><strong>2.查看某个端口TCP是否可用</strong></p><p>具体查看某个端口是否可用，可以用命令测试：<code>Test-NetConnection localhost -Port &lt;端口号&gt;</code></p><p>当看到结果<code>TcpTestSucceeded       : False</code>，False就不能用了，如果是True就可以用。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 测试50000端口是否可用</span></span><br><span class="line">Test-NetConnection localhost -Port 50000</span><br><span class="line"></span><br><span class="line"><span class="comment"># 运行结果如下：</span></span><br><span class="line">警告: TCP connect to (::1 : 50000) failed</span><br><span class="line">警告: TCP connect to (127.0.0.1 : 50000) failed</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">ComputerName           : localhost</span><br><span class="line">RemoteAddress          : ::1</span><br><span class="line">RemotePort             : 50000</span><br><span class="line">InterfaceAlias         : Loopback Pseudo-Interface 1</span><br><span class="line">SourceAddress          : ::1</span><br><span class="line">PingSucceeded          : True</span><br><span class="line">PingReplyDetails (RTT) : 0 ms</span><br><span class="line">TcpTestSucceeded       : False</span><br></pre></td></tr></table></figure><h3 id="解决方法"><a href="#解决方法" class="headerlink" title="解决方法"></a>解决方法</h3><p>这个问题的解决方法有两种：</p><p><strong>1.最粗暴的方法</strong></p><p>直接重启电脑，因为端口会随机改变。多重启几次，总能解决的。<br>不过以后仍有可能会遇到同样的问题。</p><p><strong>2.排除掉需要使用的端口</strong></p><p>1).禁用 Hyper-V</p><p>2).添加需要排除的端口范围</p><p>如：<code>netsh int ipv4 add excludedportrange protocol=tcp startport=50051 numberofports=1</code></p><p>这个命令的作用是添加一个 TCP 端口范围，其中端口从 50051 开始，共计 1 个端口。同时，这个范围中的一个端口将被排除，以确保该端口不会被其他应用程序占用。</p><blockquote><p>netsh：Windows 中的一个命令行工具，用于配置网络参数。<br>int ipv4：表示要配置 IPv4 网络接口。<br>add excludedportrange：添加一个被排除的端口范围。<br>protocol=tcp：指定排除的是 TCP 端口。<br>startport=50051：指定排除的端口范围的起始端口为 50051。<br>numberofports=1：指定端口范围中要排除的端口数量为 1。</p></blockquote><p>3).重新启用 Hyper-V</p><p>PS.第2种方法也只是重启电脑前可以解决，只要重启电脑了，端口又随机了，还是会有可能再碰到这个问题。所以，我决定，直接就重启电脑算了。</p>]]></content>
      
      
      <categories>
          
          <category> Windows </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Docker </tag>
            
            <tag> Windows </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>cctv官网视频下载花屏怎么办</title>
      <link href="/2023/03/29/cctv%E5%AE%98%E7%BD%91%E8%A7%86%E9%A2%91%E4%B8%8B%E8%BD%BD%E8%8A%B1%E5%B1%8F%E6%80%8E%E4%B9%88%E5%8A%9E/"/>
      <url>/2023/03/29/cctv%E5%AE%98%E7%BD%91%E8%A7%86%E9%A2%91%E4%B8%8B%E8%BD%BD%E8%8A%B1%E5%B1%8F%E6%80%8E%E4%B9%88%E5%8A%9E/</url>
      
        <content type="html"><![CDATA[<p>cctv.com 官网上下载的视频，原来用猫抓把m3u8地址抓取，或者NDM这样的下载工具就直接可以下载了。</p><p>可是，视频下载出来压根看不了，就是花屏的。</p><p>用F12工具，在Network中找到hls-url地址，也是一样的，这个就是猫抓 抓取到地m3u8的地址。</p><p>这个花屏肯定就是加密了。</p><a id="more"></a><p><strong>解决方法：</strong></p><p>其实，用F12工具，已经查找到了，再往下看看就能找到。</p><p>1.按F12开发者工具，切换到Network（网络）选项，再打开需要下载的视频网址</p><p>2.用<code>vdn</code>过滤一下，就找到一个，然后点开【Preview】选项，如下图所示：</p><img                       lazyload                     src="/images/loading.svg"                     data-src="/img/cctv_video_download_1.png"                      style="zoom: 75%;"                ><p>这里有hls_url，但这个下载了没用，还是花屏的，重点是最下面这里【video】中的信息，有真实未加密的视频。</p><p>3.【video】中视频链接</p><p>点开看一下video中的具体信息，如下图所示：</p><img                       lazyload                     src="/images/loading.svg"                     data-src="/img/cctv_video_download_2.png"                      style="zoom: 100%;"                ><p>不同的chapters，肯定是表示不同清晰度之类的。<br>duration：视频的时长（单位秒）。</p><blockquote><p>chapters：里面就一个mp4视频，直接下载。发现是完整的视频。时长是283秒。</p><p>chapters2：包括url1-1和url-2两个视频下载的链接。明显看到视频时长分别是180秒和103秒。</p><p>lowChapters： 一个mp4视频。视频时长283秒。</p></blockquote><p>其实看url的mp4视频链接也能猜一下，</p><ul><li>chapters 是一个aac32的mp4视频；</li><li>chapters2 是切分成了两个视频，但也是aac32，应该跟第一个视频是同样的清晰度吧；</li><li>最后lowChapters，看名字也猜得到low的清晰度就低一档了。看链接中aac16也知道了。</li></ul><p>有下载链接了，直接用下载工具下载就行了。或者把链接直接扔到浏览器的地址栏就可以打开视频，直接也有下载的按钮可以下载。</p>]]></content>
      
      
      <categories>
          
          <category> Windows </category>
          
      </categories>
      
      
        <tags>
            
            <tag> IT </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Windows安装Gitea服务</title>
      <link href="/2023/02/26/Windows%E5%AE%89%E8%A3%85Gitea%E6%9C%8D%E5%8A%A1/"/>
      <url>/2023/02/26/Windows%E5%AE%89%E8%A3%85Gitea%E6%9C%8D%E5%8A%A1/</url>
      
        <content type="html"><![CDATA[<p>Gitea 是一个开源社区驱动的轻量级代码托管解决方案，后端采用 Go 编写，采用 MIT 许可证。支持跨平台，支持 Linux, macOS 和 Windows 以及各种架构。</p><p>Gitea 是一个自己托管的Git服务程序。和GitHub, Bitbucket or Gitlab等比较类似，是从 Gogs 发展而来的。</p><p>官方文档：<a class="link"   href="https://docs.gitea.io/zh-cn/" >https://docs.gitea.io/zh-cn/<i class="fas fa-external-link-alt"></i></a></p><p>Github项目地址：<a class="link"   href="https://github.com/go-gitea/gitea" >https://github.com/go-gitea/gitea<i class="fas fa-external-link-alt"></i></a></p><a id="more"></a><h2 id="一、准备工作"><a href="#一、准备工作" class="headerlink" title="一、准备工作"></a>一、准备工作</h2><h3 id="1-安装Git"><a href="#1-安装Git" class="headerlink" title="1.安装Git"></a>1.安装Git</h3><p>Gitea 执行各项 Git 操作依赖的是背后的 git 命令行工具，因此在 Windows 平台上需要安装Git。</p><p>Git for windows下载地址：<a class="link"   href="https://git-scm.com/download/win" >https://git-scm.com/download/win<i class="fas fa-external-link-alt"></i></a></p><p>一般现在都是64位的系统，下载：64-bit Git for Windows Setup 这一个就行。</p><p>下载慢的话，还可以去这下载最新的Git for windows的安装包：<a class="link"   href="https://gitforwindows.org/" >https://gitforwindows.org/<i class="fas fa-external-link-alt"></i></a></p><p>下载完成后，安装就行。</p><p><strong>注意：</strong><br>安装完成后，看一下环境变量中有没有，如果没有的话，要把git.exe的目录要加到系统环境变量PATH中。<br>比如我这是：<code>C:\Program Files\Git\cmd</code></p><h3 id="2-下载-Gitea"><a href="#2-下载-Gitea" class="headerlink" title="2.下载 Gitea"></a>2.下载 Gitea</h3><p>官网上进入下载页面：<a class="link"   href="https://dl.gitea.com/gitea/" >https://dl.gitea.com/gitea/<i class="fas fa-external-link-alt"></i></a></p><p>这里一般下载最新的稳定发行版本就行。<br>看不出的话，去项目的release页面上看：<a class="link"   href="https://github.com/go-gitea/gitea/releases" >https://github.com/go-gitea/gitea/releases<i class="fas fa-external-link-alt"></i></a><br>当前最新的稳定发行版本是v1.18.5。</p><p>当然，在release页面上直接下载也可以的。</p><p>在官网的下载页面中就进入1.18.5的目录，即：<a class="link"   href="https://dl.gitea.com/gitea/1.18.5/" >https://dl.gitea.com/gitea/1.18.5/<i class="fas fa-external-link-alt"></i></a></p><p>再找到带 windows的，64位系统用amd64，32位用 386。至于有个xz后缀的就是压缩包版本，无所谓。也可以直接下载压缩包版本，再解压。</p><p>看到有2个选项：</p><blockquote><p>gitea-1.18.5-gogit-windows-4.0-amd64.exe<br>gitea-1.18.5-windows-4.0-amd64.exe</p></blockquote><p>带gogit的应该是指是否集成由go来原生实现的git，感觉也无所谓，自己选一个下载就行。</p><h2 id="二、安装Gitea"><a href="#二、安装Gitea" class="headerlink" title="二、安装Gitea"></a>二、安装Gitea</h2><p>比如 ，我这下载了 gitea-1.18.5-gogit-windows-4.0-amd64.exe 安装包，放在 E:\Gitea 目录中。</p><p>为了方便，直接把文件重命名为：gitea.exe</p><h3 id="1-双击运行-gitea-exe"><a href="#1-双击运行-gitea-exe" class="headerlink" title="1.双击运行 gitea.exe"></a>1.双击运行 gitea.exe</h3><p>当第一次运行 Gitea 时，需要打开 <a class="link"   href="http://localhost:3000/" >http://localhost:3000<i class="fas fa-external-link-alt"></i></a> 根据指引完成 Gitea 的初始化安装。<br>这个步骤会创建配置文件并存储到 <code>E:\Gitea\custom\conf\app.ini</code> 文件中。</p><p>如果有问题，可以提前在 <code>E:\Gitea</code> 目录下创建一个 custom 目录就行。</p><h3 id="2-初始化安装"><a href="#2-初始化安装" class="headerlink" title="2.初始化安装"></a>2.初始化安装</h3><p>打开 <a class="link"   href="http://localhost:3000/" >http://localhost:3000<i class="fas fa-external-link-alt"></i></a> 后：</p><blockquote><p>数据库类型：SQLite3（自己用，为了方便就直接用SQLite3了，企业之类可以用MySQL这些）<br>数据库文件：默认。绝对路径在<code>E:\Gitea\data</code>目录下</p><p>站点名称：随意写<br>仓库根目录：默认<br>操作系统用户名：默认<br>服务器域名：本机ip（例如：192.168.31.101）<br>HTTP服务端口：3000（默认）<br>基础URL：<a class="link"   href="http://192.168.31.101:3000/" >http://192.168.31.101:3000/<i class="fas fa-external-link-alt"></i></a></p><p>管理员账号设置：可以先添加一个</p></blockquote><p>最后点立即安装就行。这样就初始化好了。</p><p>然后用管理员账号登录就可以操作了。</p><h2 id="三、将Gitea注册为Windows服务"><a href="#三、将Gitea注册为Windows服务" class="headerlink" title="三、将Gitea注册为Windows服务"></a>三、将Gitea注册为Windows服务</h2><p>官方文档上有说：<a class="link"   href="https://docs.gitea.io/zh-cn/windows-service/" >https://docs.gitea.io/zh-cn/windows-service/<i class="fas fa-external-link-alt"></i></a></p><p>以管理员身份打开Windows PowerShell或命令提示符 （CMD），然后运行以下命令：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sc create gitea start= auto binPath= <span class="string">&quot;\&quot;C:\gitea\gitea.exe\&quot; web --config \&quot;C:\gitea\custom\conf\app.ini\&quot;&quot;</span></span><br></pre></td></tr></table></figure><p>将 <code>C:\gitea</code> 替换成你的 Gitea 安装目录。</p><p>但是，发现直接运行的时候有点问题（我也不知道是不是我的个例）。</p><p>然后看了下sc命令后，格式是这样的：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sc &lt;server&gt; [<span class="built_in">command</span>] [service name] &lt;option1&gt; &lt;option2&gt;</span><br></pre></td></tr></table></figure><p>具体用的时候，第一次可能需要在命令行输入Tab键，然后会自动补全sc命令的用法，是<code>.\sc.exe</code>，反正按提示输入。</p><p>比如我这是<code>.\sc.exe</code>，就改成这样（注意等号后面有空格）：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">.\sc.exe create gitea binPath= <span class="string">&quot;E:\Gitea\gitea.exe --config E:\Gitea\custom\conf\app.ini&quot;</span> start= auto</span><br></pre></td></tr></table></figure><p>再打开【服务】就可以看到 gitea 这项服务，启动一下就可以了。</p><p>后面再用这个sc命令的时候，直接用 <code>sc.exe</code>就行了。按Tab键，看补全的是不是。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 启动gitea服务（可以直接在【服务】中启动）</span></span><br><span class="line">sc start gitea</span><br><span class="line"></span><br><span class="line"><span class="comment"># 从Windows服务中删除服务gitea</span></span><br><span class="line">sc delete gitea</span><br></pre></td></tr></table></figure><h2 id="四、在VS-Code中使用自建的Gitea"><a href="#四、在VS-Code中使用自建的Gitea" class="headerlink" title="四、在VS Code中使用自建的Gitea"></a>四、在VS Code中使用自建的Gitea</h2><h3 id="1-克隆仓库代码"><a href="#1-克隆仓库代码" class="headerlink" title="1.克隆仓库代码"></a>1.克隆仓库代码</h3><p>在Gitea中创建仓库后，在【下载此仓库】的下拉选项中，直接选择“在 VS Code 中克隆”。<br>然后这个目录就可以进行版本管理了。</p><h3 id="2-修改、提交新代码"><a href="#2-修改、提交新代码" class="headerlink" title="2.修改、提交新代码"></a>2.修改、提交新代码</h3><ul><li>修改文件、内容后，在VS Code左侧有个【源代码管理】的选项（一般第3个）</li><li>点开后，移动到更改过的文件上方，点击+号按钮（暂存更改），可以批量选中文件的</li><li>然后在上面消息框输入消息内容，点击“提交”按钮提交</li><li>最后，点击“同步更改”，就会提交推送到仓库去</li></ul>]]></content>
      
      
      <categories>
          
          <category> Windows </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Windows </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Python Flask SQLAlchemy 插入字典数据方法</title>
      <link href="/2023/02/12/Python-Flask-SQLAlchemy%E6%8F%92%E5%85%A5%E5%AD%97%E5%85%B8%E6%95%B0%E6%8D%AE%E6%96%B9%E6%B3%95/"/>
      <url>/2023/02/12/Python-Flask-SQLAlchemy%E6%8F%92%E5%85%A5%E5%AD%97%E5%85%B8%E6%95%B0%E6%8D%AE%E6%96%B9%E6%B3%95/</url>
      
        <content type="html"><![CDATA[<p>在Flask中用SQLAlchemy来插入字典数据，常用方法可能是这样的：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">item = &#123;<span class="string">&#x27;name&#x27;</span>: <span class="string">&#x27;foo&#x27;</span>, <span class="string">&#x27;value&#x27;</span>: <span class="number">42.0</span>&#125;</span><br><span class="line">instance = MyModel(name=item[<span class="string">&#x27;name&#x27;</span>], value=item[<span class="string">&#x27;value&#x27;</span>])</span><br><span class="line"></span><br><span class="line">db.session.add(instance)</span><br><span class="line">db.session.commit()</span><br></pre></td></tr></table></figure><p>创建一个MyModel类型的实例instance，然后用add方法添加到数据库后提交一下就行了。</p><a id="more"></a><p>然后就有个小问题来了，如果这个数据库表的字段有十几二十个，那这个创建实例的时候就要写十几二十个参数吗？这也太长了。</p><p>于是，懒人就发现了另一个<strong>方法</strong>：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">item = &#123;<span class="string">&#x27;name&#x27;</span>: <span class="string">&#x27;foo&#x27;</span>, <span class="string">&#x27;value&#x27;</span>: <span class="number">42.0</span>&#125;</span><br><span class="line">instance = MyModel(**item) <span class="comment"># 实例化的时候这里改了</span></span><br><span class="line"></span><br><span class="line">db.session.add(instance)</span><br><span class="line">db.session.commit()</span><br></pre></td></tr></table></figure><p>这样不管有多少个字段，就简洁多了！</p><p><strong>完整的代码示例：</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Flask</span><br><span class="line"><span class="keyword">from</span> flask_sqlalchemy <span class="keyword">import</span> SQLAlchemy</span><br><span class="line"></span><br><span class="line">app = Flask(__name__)</span><br><span class="line">app.config[<span class="string">&#x27;SQLALCHEMY_DATABASE_URI&#x27;</span>] = <span class="string">&#x27;sqlite:///db/test.db&#x27;</span></span><br><span class="line">app.config[<span class="string">&#x27;SQLALCHEMY_TRACK_MODIFICATIONS&#x27;</span>] = <span class="literal">False</span></span><br><span class="line"></span><br><span class="line">db = SQLAlchemy(app)</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyModel</span>(<span class="params">db.Model</span>):</span></span><br><span class="line">    <span class="built_in">id</span> = db.Column(db.Integer, primary_key=<span class="literal">True</span>)</span><br><span class="line">    name = db.Column(db.String(<span class="number">80</span>))</span><br><span class="line">    value = db.Column(db.Float)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 遍历列表 插入数据库表</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">insert_data</span>():</span></span><br><span class="line">    <span class="comment"># 列表中的字典数据</span></span><br><span class="line">    data = [</span><br><span class="line">        &#123;<span class="string">&#x27;name&#x27;</span>: <span class="string">&#x27;foo&#x27;</span>, <span class="string">&#x27;value&#x27;</span>: <span class="number">42.0</span>&#125;,</span><br><span class="line">        &#123;<span class="string">&#x27;name&#x27;</span>: <span class="string">&#x27;bar&#x27;</span>, <span class="string">&#x27;value&#x27;</span>: <span class="number">23.0</span>&#125;,</span><br><span class="line">        &#123;<span class="string">&#x27;name&#x27;</span>: <span class="string">&#x27;baz&#x27;</span>, <span class="string">&#x27;value&#x27;</span>: <span class="number">13.0</span>&#125;,</span><br><span class="line">    ]</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 遍历列表，映射为模型实例</span></span><br><span class="line">    <span class="keyword">for</span> item <span class="keyword">in</span> data:</span><br><span class="line">        instance = MyModel(name=item[<span class="string">&#x27;name&#x27;</span>], value=item[<span class="string">&#x27;value&#x27;</span>])</span><br><span class="line">        db.session.add(instance)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 提交模型实例</span></span><br><span class="line">    db.session.commit()</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">insert_data2</span>():</span></span><br><span class="line">    <span class="comment"># 列表中的字典数据</span></span><br><span class="line">    data = [</span><br><span class="line">        &#123;<span class="string">&#x27;name&#x27;</span>: <span class="string">&#x27;foo&#x27;</span>, <span class="string">&#x27;value&#x27;</span>: <span class="number">42.0</span>&#125;,</span><br><span class="line">        &#123;<span class="string">&#x27;name&#x27;</span>: <span class="string">&#x27;bar&#x27;</span>, <span class="string">&#x27;value&#x27;</span>: <span class="number">23.0</span>&#125;,</span><br><span class="line">        &#123;<span class="string">&#x27;name&#x27;</span>: <span class="string">&#x27;baz&#x27;</span>, <span class="string">&#x27;value&#x27;</span>: <span class="number">13.0</span>&#125;,</span><br><span class="line">    ]</span><br><span class="line"></span><br><span class="line">    <span class="keyword">with</span> app.app_context():        </span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            <span class="keyword">for</span> item <span class="keyword">in</span> data:</span><br><span class="line">                instance = instance = MyModel(**item)</span><br><span class="line">                db.session.add(instance)</span><br><span class="line">            db.session.commit()</span><br><span class="line">        <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">            db.session.rollback()</span><br><span class="line">            <span class="built_in">print</span>(e)</span><br><span class="line"></span><br><span class="line"><span class="comment"># db init</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">db_init</span>():</span></span><br><span class="line">    <span class="keyword">with</span> app.app_context():</span><br><span class="line">        <span class="comment"># 删除表</span></span><br><span class="line">        db.drop_all()</span><br><span class="line">        <span class="comment"># 创建表</span></span><br><span class="line">        db.create_all()</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    <span class="comment"># 数据库初始化</span></span><br><span class="line">    db_init()</span><br><span class="line"></span><br><span class="line">    insert_data2()</span><br><span class="line"></span><br><span class="line">    <span class="comment"># app.run(debug=True)</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>PS.注意 <code>&#39;sqlite:///db/test.db&#39;</code> 数据库连接这里：</p><blockquote><p>sqlite连接字符串中的/斜杠说明：三斜杠为相对路径，四斜杠为绝对路径<br>比如这里相对路径 test.db 文件是在当前项目目录下的db目录下</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
            <tag> Flask </tag>
            
            <tag> SQLAlchemy </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Python Flask页面定时刷新显示数据</title>
      <link href="/2023/02/12/Python-Flask%E9%A1%B5%E9%9D%A2%E5%AE%9A%E6%97%B6%E5%88%B7%E6%96%B0%E6%98%BE%E7%A4%BA%E6%95%B0%E6%8D%AE/"/>
      <url>/2023/02/12/Python-Flask%E9%A1%B5%E9%9D%A2%E5%AE%9A%E6%97%B6%E5%88%B7%E6%96%B0%E6%98%BE%E7%A4%BA%E6%95%B0%E6%8D%AE/</url>
      
        <content type="html"><![CDATA[<p>我想做的是在Flask的前端页面上显示一条从数据库获取过来的数据，是这个表中最新的一条数据。</p><p>因为数据库的数据是一直在刷新的，所以页面上就需要定时把数据从数据库取出来，再显示出来就行了。</p><a id="more"></a><p><strong>思路：</strong></p><p>网页端可以使用 JavaScript 实现定时从一个接口获取数据并显示在页面上。</p><p>那只需要用Flask写一个接口，然后这个接口是获取数据库表中的最新一条数据。<br>然后，网页端定时从这个接口获取数据就行了。</p><p><strong>解决方法：</strong></p><ul><li>1.Flask后台写一个接口 <code>/get_data</code>，获取数据库表中最新一条数据，返回 json格式的数据；</li><li>2.网页前端把 json格式的数据显示出来，并定时刷新。</li></ul><p><strong>1.Flask后台 app.py 文件内容示例：</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Flask 服务器端代码</span></span><br><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Flask, render_template, jsonify</span><br><span class="line"></span><br><span class="line">app = Flask(__name__)</span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/&#x27;</span></span>)</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">index</span>():</span></span><br><span class="line">    <span class="keyword">return</span> render_template(<span class="string">&quot;index.html&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/get_data&#x27;</span></span>)</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_data</span>():</span></span><br><span class="line">    <span class="comment"># 从数据库获取数据，此处仅模拟数据，所以这里没有设计数据库表这些</span></span><br><span class="line">    data_dict = &#123;<span class="string">&#x27;temperature&#x27;</span>: <span class="string">&#x27;20.8&#x27;</span>, <span class="string">&#x27;humidity&#x27;</span>: <span class="string">&#x27;64.29&#x27;</span>, <span class="string">&#x27;light&#x27;</span>: <span class="string">&#x27;201&#x27;</span>&#125;</span><br><span class="line">    <span class="keyword">return</span> jsonify(data_dict)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    app.run(debug=<span class="literal">True</span>)</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>如果接口想传输多个对象去网页前端，可以用 <code>return jsonify(&#123;&quot;record_id&quot;:record_id, &quot;data&quot;:data_dict&#125;)</code>。</p><p><strong>2.网页前端 index.html文件</strong></p><p>index.html 文件中在JavaScript  中 updateData 函数中：</p><ul><li>使用了 XMLHttpRequest 对象发送请求到 Flask 服务器端，并在接收到响应后通过 JSON.parse 函数解析数据。</li><li>接着，通过<code>document.getElementById</code> 获取页面上的元素，并将数据显示在页面上。</li><li>最后，通过 setInterval 函数每隔 1 秒（1000毫秒）调用 updateData 函数，从而实现定时获取数据并显示在页面上的效果。</li></ul><p>内容：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">      <span class="function"><span class="keyword">function</span> <span class="title">updateData</span>(<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">        <span class="keyword">var</span> xhr = <span class="keyword">new</span> XMLHttpRequest();</span></span><br><span class="line"><span class="javascript">        xhr.open(<span class="string">&quot;GET&quot;</span>, <span class="string">&quot;/get_data&quot;</span>, <span class="literal">true</span>);</span></span><br><span class="line"><span class="javascript">        xhr.onreadystatechange = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span></span><br><span class="line">          if (xhr.readyState === XMLHttpRequest.DONE &amp;&amp; xhr.status === 200) &#123;</span><br><span class="line"><span class="javascript">            <span class="keyword">var</span> response = <span class="built_in">JSON</span>.parse(xhr.responseText);</span></span><br><span class="line"><span class="javascript">            <span class="built_in">document</span>.getElementById(<span class="string">&quot;temperature&quot;</span>).innerHTML = response.temperature;</span></span><br><span class="line"><span class="javascript">            <span class="built_in">document</span>.getElementById(<span class="string">&quot;humidity&quot;</span>).innerHTML = response.humidity;</span></span><br><span class="line"><span class="javascript">            <span class="built_in">document</span>.getElementById(<span class="string">&quot;light&quot;</span>).innerHTML = response.light;</span></span><br><span class="line"><span class="javascript">            <span class="comment">// ... 其他数据</span></span></span><br><span class="line">          &#125;</span><br><span class="line">        &#125;;</span><br><span class="line">        xhr.send();</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line"><span class="javascript">      <span class="built_in">setInterval</span>(updateData, <span class="number">1000</span>);</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h1</span>&gt;</span>实时数据<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>温度：<span class="tag">&lt;<span class="name">span</span> <span class="attr">id</span>=<span class="string">&quot;temperature&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>湿度：<span class="tag">&lt;<span class="name">span</span> <span class="attr">id</span>=<span class="string">&quot;humidity&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>光照强度：<span class="tag">&lt;<span class="name">span</span> <span class="attr">id</span>=<span class="string">&quot;light&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    // ... 其他数据</span><br><span class="line">  <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>运行后，打开 <code>http://localhost:5000</code> 访问index.html就能看到了。</p><p><strong>3.带数据库设计的完整 app.py 内容示例：</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Flask 服务器端代码</span></span><br><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Flask, render_template, jsonify</span><br><span class="line"><span class="keyword">from</span> flask_sqlalchemy <span class="keyword">import</span> SQLAlchemy</span><br><span class="line"></span><br><span class="line">app = Flask(__name__)</span><br><span class="line"></span><br><span class="line">app.config[<span class="string">&#x27;SQLALCHEMY_DATABASE_URI&#x27;</span>] = <span class="string">&#x27;mysql://root:password@192.168.0.110:3306/db_monitor&#x27;</span></span><br><span class="line"><span class="comment"># 跟踪数据库的修改--&gt;不建议开启未来的版本中会移除</span></span><br><span class="line">app.config[<span class="string">&#x27;SQLALCHEMY_TRACK_MODIFICATIONS&#x27;</span>] = <span class="literal">False</span></span><br><span class="line"></span><br><span class="line">db = SQLAlchemy(app)</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MqttData</span>(<span class="params">db.Model</span>) :</span></span><br><span class="line">    __tablename__ = <span class="string">&quot;mqtt_data&quot;</span></span><br><span class="line">    <span class="built_in">id</span> = db.Column(db.Integer, primary_key=<span class="literal">True</span>)</span><br><span class="line">    temperature = db.Column(db.Float) <span class="comment"># 温度</span></span><br><span class="line">    humidity = db.Column(db.Float) <span class="comment"># 湿度</span></span><br><span class="line">    light = db.Column(db.Integer) <span class="comment"># 环境光</span></span><br><span class="line">    create_time = db.Column(db.DateTime) <span class="comment"># datetime.datetime.now()</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">to_list</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="keyword">return</span> [self.<span class="built_in">id</span>, self.temperature, self.humidity, self.light]</span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/&#x27;</span></span>)</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">index</span>():</span></span><br><span class="line">    <span class="keyword">return</span> render_template(<span class="string">&quot;index_demo.html&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/get_data&#x27;</span></span>)</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_data</span>():</span></span><br><span class="line">    <span class="comment"># 从数据库获取数据，此处仅模拟数据</span></span><br><span class="line">    <span class="comment"># data_dict = &#123;&#x27;temperature&#x27;: &#x27;20.8&#x27;, &#x27;humidity&#x27;: &#x27;64.29&#x27;, &#x27;light&#x27;: &#x27;201&#x27;&#125;</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 获取最新一条数据</span></span><br><span class="line">    the_newest_data = MqttData.query.order_by(MqttData.<span class="built_in">id</span>.desc()).first()</span><br><span class="line">    data = the_newest_data.to_list() <span class="comment"># [self.id, self.temperature, self.humidity, self.light]</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> jsonify(data)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 数据库初始化</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">db_init</span>():</span></span><br><span class="line">    <span class="keyword">with</span> app.app_context():</span><br><span class="line">        <span class="comment"># 删除表</span></span><br><span class="line">        db.drop_all()</span><br><span class="line">        <span class="comment"># 创建表</span></span><br><span class="line">        db.create_all()</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    <span class="comment"># 数据库初始化</span></span><br><span class="line">    <span class="comment">#db_init()</span></span><br><span class="line">    <span class="comment"># 数据库的数据插入就省略了</span></span><br><span class="line"></span><br><span class="line">    app.run(debug=<span class="literal">True</span>)</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
            <tag> Flask </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Python Flask &quot;set up an application context with app.app_context()&quot;问题</title>
      <link href="/2023/02/12/Python-Flask-set-up-an-application-context-with-app-app-context-%E9%97%AE%E9%A2%98/"/>
      <url>/2023/02/12/Python-Flask-set-up-an-application-context-with-app-app-context-%E9%97%AE%E9%A2%98/</url>
      
        <content type="html"><![CDATA[<p>Flask更新到新版本后，现在我用的是 Flask2.2.2，会报这个错：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">This typically means that you attempted to use functionality that needed</span><br><span class="line">to interface with the current application object <span class="keyword">in</span> some way. To solve</span><br><span class="line">this, <span class="built_in">set</span> up an application context with app.app_context().  See the</span><br><span class="line">documentation <span class="keyword">for</span> more information.</span><br></pre></td></tr></table></figure><p>以前用的旧版本没碰到这个问题。</p><a id="more"></a><p>这是我第2次碰到这个问题了。</p><h3 id="第1次-数据库初始化的时候"><a href="#第1次-数据库初始化的时候" class="headerlink" title="第1次 数据库初始化的时候"></a>第1次 数据库初始化的时候</h3><p>第1次是数据库初始化的时候，原来在<code>main</code>函数中是这样写的，就报了这个错。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    <span class="comment"># 数据库初始化</span></span><br><span class="line">    <span class="comment"># 删除表</span></span><br><span class="line">    db.drop_all()</span><br><span class="line">    <span class="comment"># 创建表</span></span><br><span class="line">    db.create_all()</span><br><span class="line"></span><br><span class="line">    app.run(<span class="string">&#x27;0.0.0.0&#x27;</span>, port=<span class="number">5000</span>) <span class="comment"># 这句会报提醒，测试用问题不大</span></span><br></pre></td></tr></table></figure><p><strong>解决方法：</strong></p><p>改成下面这样就行了，加了句<code>with app.app_context()</code>：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    <span class="comment"># 数据库初始化</span></span><br><span class="line">    <span class="keyword">with</span> app.app_context():</span><br><span class="line">        <span class="comment"># 删除表</span></span><br><span class="line">        db.drop_all()</span><br><span class="line">        <span class="comment"># 创建表</span></span><br><span class="line">        db.create_all()</span><br><span class="line"></span><br><span class="line">    app.run(<span class="string">&#x27;0.0.0.0&#x27;</span>, port=<span class="number">5000</span>) <span class="comment"># 这句会报提醒，测试用问题不大</span></span><br></pre></td></tr></table></figure><p>关于<code>app.run()</code>这句的提醒，想解决看这篇文章：<a href="/2023/01/10/Python-Flask%E4%BD%BF%E7%94%A8WSGI-server/" title="Python Flask使用WSGI server">Python Flask使用WSGI server</a></p><h3 id="第2次-数据库插入数据的时候"><a href="#第2次-数据库插入数据的时候" class="headerlink" title="第2次 数据库插入数据的时候"></a>第2次 数据库插入数据的时候</h3><p>用flask_sqlalchemy，进行数据库插入的时候，也报了这个错。</p><p>原来是这么写的</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># ...省略</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Record</span>(<span class="params">db.Model</span>):</span></span><br><span class="line">    <span class="built_in">id</span> = db.Column(db.Integer, primary_key=<span class="literal">True</span>)</span><br><span class="line">    device_id = db.Column(db.String(<span class="number">80</span>), unique=<span class="literal">False</span>, nullable=<span class="literal">False</span>)</span><br><span class="line">    temperature = db.Column(db.Float, nullable=<span class="literal">False</span>)</span><br><span class="line">    humidity = db.Column(db.Float, nullable=<span class="literal">False</span>)</span><br><span class="line">    pressure = db.Column(db.Float, nullable=<span class="literal">False</span>)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self, device_id, temperature, humidity, pressure</span>):</span></span><br><span class="line">        self.device_id = device_id</span><br><span class="line">        self.temperature = temperature</span><br><span class="line">        self.humidity = humidity</span><br><span class="line">        self.pressure = pressure</span><br><span class="line"></span><br><span class="line"><span class="comment"># 处理订阅到的消息，存入数据库</span></span><br><span class="line"><span class="meta">@mqtt_client.on_message()</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">handle_mqtt_message</span>(<span class="params">client, userdata, message</span>):</span></span><br><span class="line">    <span class="keyword">global</span> user_data <span class="comment"># user_data 是dict字典类型</span></span><br><span class="line">    <span class="comment"># ...省略</span></span><br><span class="line">    <span class="comment"># 写入数据库，然后就这里报错了</span></span><br><span class="line">    record = Record(**user_data)</span><br><span class="line">    <span class="built_in">print</span>(record)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        db.session.add(record)</span><br><span class="line">        db.session.commit()</span><br><span class="line">    <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">        db.session.rollback()</span><br><span class="line">        <span class="built_in">print</span>(e)</span><br><span class="line"><span class="comment"># ...省略</span></span><br></pre></td></tr></table></figure><p>改成下面这样，其实也是一样的，涉及到数据库写入的时候，套上<code>with app.app_context()</code>就行：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># ...省略</span></span><br><span class="line"><span class="comment"># 处理订阅到的消息，存入数据库</span></span><br><span class="line"><span class="meta">@mqtt_client.on_message()</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">handle_mqtt_message</span>(<span class="params">client, userdata, message</span>):</span></span><br><span class="line">    <span class="keyword">global</span> user_data</span><br><span class="line">    <span class="comment"># ...省略</span></span><br><span class="line">    <span class="comment"># 写入数据库</span></span><br><span class="line">    <span class="keyword">with</span> app.app_context():</span><br><span class="line">        record = Record(**user_data)</span><br><span class="line">        <span class="built_in">print</span>(record)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            db.session.add(record)</span><br><span class="line">            db.session.commit()</span><br><span class="line">        <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">            db.session.rollback()</span><br><span class="line">            <span class="built_in">print</span>(e)</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
            <tag> Flask </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Linux dmidecode命令获取硬件信息</title>
      <link href="/2023/02/05/Linux-dmidecode%E5%91%BD%E4%BB%A4%E8%8E%B7%E5%8F%96%E7%A1%AC%E4%BB%B6%E4%BF%A1%E6%81%AF/"/>
      <url>/2023/02/05/Linux-dmidecode%E5%91%BD%E4%BB%A4%E8%8E%B7%E5%8F%96%E7%A1%AC%E4%BB%B6%E4%BF%A1%E6%81%AF/</url>
      
        <content type="html"><![CDATA[<p>dmidecode命令可以在Linux系统下获取有关硬件方面的信息。dmidecode的作用是将DMI数据库中的信息解码，以可读的文本方式显示。由于DMI信息可以人为修改，因此里面的信息不一定是系统准确的信息。dmidecode遵循SMBIOS/DMI标准，其输出的信息包括BIOS、系统、主板、处理器、内存、缓存等等。</p><p>DMI（Desktop Management Interface，DMI）就是帮助收集电脑系统信息的管理系统，DMI信息的收集必须在严格遵照SMBIOS规范的前提下进行。SMBIOS（System Management BIOS）是主板或系统制造者以标准格式显示产品管理信息所需遵循的统一规范。SMBIOS和DMI是由行业指导机构Desktop Management Task Force(DMTF)起草的开放性的技术标准，其中DMI设计适用于任何的平台和操作系统。</p><a id="more"></a><p>DMI充当了管理工具和系统层之间接口的角色。它建立了标准的可管理系统更加方便了电脑厂商和用户对系统的了解。DMI的主要组成部分是Management Information Format(MIF)数据库。这个数据库包括了所有有关电脑系统和配件的信息。通过DMI，用户可以获取序列号、电脑厂商、串口信息以及其它系统配件信息。</p><h3 id="安装-dmidecode"><a href="#安装-dmidecode" class="headerlink" title="安装 dmidecode"></a>安装 dmidecode</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Debian/Ubuntu</span></span><br><span class="line">sudo apt-get install dmidecode</span><br><span class="line"></span><br><span class="line"><span class="comment"># RHEL/CentOS/Fedora</span></span><br><span class="line">sudo yum install dmidecode</span><br></pre></td></tr></table></figure><h3 id="dmidecode命令详解"><a href="#dmidecode命令详解" class="headerlink" title="dmidecode命令详解"></a>dmidecode命令详解</h3><p><strong>语法：</strong><br><code>dmidecode [选项]</code></p><p><strong>选项：</strong></p><blockquote><p> -d：(default:/dev/mem)从设备文件读取信息，输出内容与不加参数标准输出相同。<br>-h：显示帮助信息。<br>-s：只显示指定DMI字符串的信息。(string)<br><strong>-t：只显示指定条目的信息。</strong>(type)<br>-u：显示未解码的原始条目内容。<br>–dump-bin file：将DMI数据转储到一个二进制文件中。<br>–from-dump FILE：从一个二进制文件读取DMI数据。<br>-V：显示版本信息。</p></blockquote><p>不带选项执行 dmidecode 通常会输出所有的硬件信息。</p><p><code>-t</code>这个参数用的就比较方便了，输出想要的相关信息。</p><p><strong>dmidecode常用命令举例：</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 需要sudo权限</span></span><br><span class="line">sudo dmidecode -t 1 <span class="comment"># 系统信息（System Information）</span></span><br><span class="line">sudo dmidecode -t 2 <span class="comment"># 基本主板信息（Base Board Information）</span></span><br><span class="line">sudo dmidecode -t 4 <span class="comment"># CPU信息（Processor Information）</span></span><br><span class="line">sudo dmidecode -t processor <span class="comment"># CPU信息</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看内存信息</span></span><br><span class="line">sudo dmidecode -t memory</span><br><span class="line"><span class="comment"># 查看内存的插槽数，已经使用多少插槽。每条内存多大。</span></span><br><span class="line">sudo dmidecode|grep -P -A5 <span class="string">&quot;Memory\s+Device&quot;</span>|grep Size|grep -v Range</span><br><span class="line"><span class="comment"># 查看内存支持的最大内存容量</span></span><br><span class="line">sudo dmidecode|grep -P <span class="string">&#x27;Maximum\s+Capacity&#x27;</span></span><br><span class="line"><span class="comment"># 查看内存的频率（查看内存信息的看Speed 项）</span></span><br><span class="line">sudo dmidecode|grep -A16 <span class="string">&quot;Memory Device&quot;</span>|grep <span class="string">&#x27;Speed&#x27;</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Gitbook使用指南</title>
      <link href="/2023/01/24/Gitbook%E4%BD%BF%E7%94%A8%E6%8C%87%E5%8D%97/"/>
      <url>/2023/01/24/Gitbook%E4%BD%BF%E7%94%A8%E6%8C%87%E5%8D%97/</url>
      
        <content type="html"><![CDATA[<p>Gitbook 就是一个电子书生成工具，可以用来写电子书，电子教程。有点像Hexo，写完后可以生成html，还可以生成pdf。</p><p>当然，跟Hexo一样，也是用Markdown写内容的，挺方便好用的。</p><a id="more"></a><h3 id="一、Gitbook搭建"><a href="#一、Gitbook搭建" class="headerlink" title="一、Gitbook搭建"></a>一、Gitbook搭建</h3><p>怎么搭建使用，看这篇文章：<a href="/2023/01/10/Docker%E6%90%AD%E5%BB%BAGitbook/" title="Docker搭建Gitbook">Docker搭建Gitbook</a></p><p>当然，可以用我上传的镜像：</p><ul><li>Ubuntu(Linux）用：<code>docker pull hduzn/gitbook:3.2.3</code></li><li>Windows用：<code>docker pull hduzn/gitbook_win:3.2.3</code></li></ul><p>为什么不同，只是因为Windows下有个js文件会报错，就改了一下这个js文件。</p><h3 id="二、Gitbook创建一本电子书-教程"><a href="#二、Gitbook创建一本电子书-教程" class="headerlink" title="二、Gitbook创建一本电子书/教程"></a>二、Gitbook创建一本电子书/教程</h3><h4 id="1-新建电子书目录"><a href="#1-新建电子书目录" class="headerlink" title="1.新建电子书目录"></a>1.新建电子书目录</h4><p>比如新建目录：book_python</p><h4 id="2-初始化"><a href="#2-初始化" class="headerlink" title="2.初始化"></a>2.初始化</h4><p>如果是用Docker部署的Gitbook，就创建容器，进入容器后再执行  <code>gitbook init</code>；<br>如果部署在本地，没有用Docker，就直接进入 book_python 目录，执行  <code>gitbook init</code></p><p>执行<code>gitbook init</code>后，在book_python目录下就生成了：README.md 和SUMMARY.md 文件。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Docker部署Gitbook</span></span><br><span class="line"><span class="comment"># 拉取镜像</span></span><br><span class="line">docker pull hduzn/gitbook:3.2.3</span><br><span class="line"></span><br><span class="line"><span class="comment"># 1.创建容器</span></span><br><span class="line">docker run -idt --name py_gitbook -p 14000:4000 -v E:\Gitbook\book_python:/gitbook hduzn/gitbook:3.2.3 /bin/bash</span><br><span class="line"></span><br><span class="line"><span class="comment"># 2.进入容器 py_gitbook</span></span><br><span class="line">docker <span class="built_in">exec</span> -it py_gitbook /bin/bash</span><br><span class="line"></span><br><span class="line"><span class="comment"># 3.进入容器后，默认是在/gitbook目录，用以下命令初始化</span></span><br><span class="line"><span class="comment"># 初始化后会在本地的book_python映射目录下生成README.md和SUMMARY.md文件。</span></span><br><span class="line">gitbook init</span><br></pre></td></tr></table></figure><h4 id="3-编辑-SUMMARY-md-文件"><a href="#3-编辑-SUMMARY-md-文件" class="headerlink" title="3.编辑 SUMMARY.md 文件"></a>3.编辑 SUMMARY.md 文件</h4><p>SUMMARY.md 是一个章节和子章节的目录结构文件。</p><p>比如编辑内容如下：</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="section"># Summary</span></span><br><span class="line"></span><br><span class="line"><span class="bullet">*</span> [<span class="string">简介</span>](<span class="link">README.md</span>)</span><br><span class="line"><span class="bullet">*</span> [<span class="string">前言</span>](<span class="link">README.md</span>)</span><br><span class="line"><span class="bullet">*</span> [<span class="string">第一章 abcd</span>](<span class="link">part1/README.md</span>)</span><br><span class="line"><span class="bullet">    *</span> [<span class="string">第一节 aaa</span>](<span class="link">part1/1.md</span>)</span><br><span class="line"><span class="bullet">    *</span> [<span class="string">第二节 bbb</span>](<span class="link">part1/2.md</span>)</span><br><span class="line"><span class="bullet">    *</span> [<span class="string">第三节 ccc</span>](<span class="link">part1/3.md</span>)</span><br><span class="line"><span class="bullet">    *</span> [<span class="string">第四节 ddd</span>](<span class="link">part1/4.md</span>)</span><br><span class="line"><span class="bullet">*</span> [<span class="string">第二章 efgh</span>](<span class="link">part2/README.md</span>)</span><br><span class="line"><span class="bullet">*</span> [<span class="string">第三章 hijk</span>](<span class="link">part3/README.md</span>)</span><br><span class="line"><span class="bullet">*</span> [<span class="string">第四章 lmno</span>](<span class="link">part4/README.md</span>)</span><br></pre></td></tr></table></figure><p>README.md 文件就是简介内容，随便写。</p><h4 id="4-生成目录结构所有文件"><a href="#4-生成目录结构所有文件" class="headerlink" title="4.生成目录结构所有文件"></a>4.生成目录结构所有文件</h4><p>编辑好SUMMARY.md 文件后，再次执行<code>gitbook init</code>后，会生成所有目录和对应的文件。</p><p>然后就编辑章节目录下的文件就行。</p><p>后续再修改 SUMMARY.md 文件，再执行<code>gitbook init</code>后，不会修改和删除已有文件，只会添加新的章节和子章节的对应文件。</p><h4 id="5-启动服务，在线预览"><a href="#5-启动服务，在线预览" class="headerlink" title="5.启动服务，在线预览"></a>5.启动服务，在线预览</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">gitbook serve</span><br></pre></td></tr></table></figure><p>会生成 <code>_book</code>目录，然后打开 <a class="link"   href="http://localhost:14000/" >http://localhost:14000<i class="fas fa-external-link-alt"></i></a> 就可以看到电子书了（我把4000端口映射到14000了，默认是4000）</p><h4 id="6-Gitbook输出格式"><a href="#6-Gitbook输出格式" class="headerlink" title="6.Gitbook输出格式"></a>6.Gitbook输出格式</h4><p>如果只是创建电子书，不生成在线的服务，只用 build 就行。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 1).输出静态HTML页面，生成 _book 目录；</span></span><br><span class="line"><span class="comment"># 也可以用参数指定目录名：gitbook build ./ --output=./_book/</span></span><br><span class="line">gitbook build</span><br><span class="line"></span><br><span class="line"><span class="comment"># 2).输出PDF文件</span></span><br><span class="line">gitbook pdf</span><br></pre></td></tr></table></figure><h3 id="三、Gitbook使用其它问题"><a href="#三、Gitbook使用其它问题" class="headerlink" title="三、Gitbook使用其它问题"></a>三、Gitbook使用其它问题</h3><h4 id="1-后台运行服务"><a href="#1-后台运行服务" class="headerlink" title="1.后台运行服务"></a>1.后台运行服务</h4><p>直接执行<code>gitbook serve</code>，关掉窗口就关掉了。<br>如果想要后台运行的话，用Docker和Linux都挺方便的，直接用nohup命令就行。Docker创建的容器也是Linux系统。<br>参考这篇笔记：<a href="/2022/05/02/Linux-nohup-%E5%90%8E%E5%8F%B0%E8%BF%90%E8%A1%8C-%E5%91%BD%E4%BB%A4%E8%AF%A6%E8%A7%A3/" title="Linux nohup 后台运行 命令详解">Linux nohup 后台运行 命令详解</a></p><p>这样就可以在服务器上用了。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nohup gitbook serve &gt; /dev/null 2&gt;&amp;1 &amp;</span><br></pre></td></tr></table></figure><p>会返回进程的PID号，直接<code>kill [PID]</code>就可以结束进程。</p><h4 id="2-文件权限问题"><a href="#2-文件权限问题" class="headerlink" title="2.文件权限问题"></a>2.文件权限问题</h4><p>如果是直接在本机上映射的目录里的文件直接编辑就行，就没啥问题。</p><p>但如果我是在Linux的服务器上用Docker建了gitbook容器的，映射的目录是在Linux的机器上，<br>然后我是本地编辑好了，再上传到Linux服务器的映射目录里，然后就有文件权限问题了。</p><p>比如修改完的 SUMMARY.md 文件上传想覆盖原来的文件，就报权限问题了。</p><p>所以直接在Linux服务器的映射目录下执行<code>chmod 777 *</code>命令，把权限都给了就行。</p><h4 id="3-插入图片"><a href="#3-插入图片" class="headerlink" title="3.插入图片"></a>3.插入图片</h4><p>如果文章中需要插入图片的，建议使用相对路径，很方便。</p><p>直接在 book_python 目录下建一个imgs目录，用于存放图片。</p><p>比如我在imgs目录下放了一张图片：gitbook.png<br>然后用Markdown语法使用就行：<br><code>![](\imgs\gitbook.png)</code></p><p>或者：<br><code>&lt;img src=&quot;/imgs/gitbook.png&quot; style=&quot;zoom: 75%;&quot;/&gt;</code></p><p>后面这种还可以按比例显示，反正写Hexo博客时，我就一直偏爱用后者。</p><p>这个路径是根目录下的文件，其实也就是 SUMMARY.md 和 README.md 文件内这样使用。</p><p>如果在章节目录下，可以用：<code>&lt;img src=&quot;../imgs/gitbook.png&quot; style=&quot;zoom: 75%;&quot;/&gt;</code> 表示图片路径在上一层路径。</p><h4 id="4-配置文件book-json"><a href="#4-配置文件book-json" class="headerlink" title="4.配置文件book.json"></a>4.配置文件book.json</h4><p>在 book_python 目录下自己建个 book.json文件。</p><p>内容一般就标题、作者这些，比如：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attr">&quot;title&quot;</span>: <span class="string">&quot;GitBook学习笔记&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;description&quot;</span>: <span class="string">&quot;记录Gitbook的配置和一些插件的使用&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;author&quot;</span>: <span class="string">&quot;hduzn&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;language&quot;</span>: <span class="string">&quot;zh-hans&quot;</span>,</span><br><span class="line"><span class="attr">&quot;gitbook&quot;</span>: <span class="string">&quot;3.2.3&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;links&quot;</span>: &#123;</span><br><span class="line">        <span class="attr">&quot;sidebar&quot;</span> : &#123;</span><br><span class="line">            <span class="attr">&quot;Home&quot;</span> : <span class="string">&quot;https://www.hduzn.cn/&quot;</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>配置文件中更多的内容，网上搜一下就有。</p><h4 id="5-折叠左侧目录侧边栏（插件）"><a href="#5-折叠左侧目录侧边栏（插件）" class="headerlink" title="5.折叠左侧目录侧边栏（插件）"></a>5.折叠左侧目录侧边栏（插件）</h4><p>安装插件：expandable-chapters-small ，就可以实现左侧的目录自动折叠。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 本地环境在 book_python 下执行；</span></span><br><span class="line"><span class="comment"># Docker环境，在容器中默认的`/gitbook`目录下执行</span></span><br><span class="line">npm install gitbook-plugin-expandable-chapters-small</span><br></pre></td></tr></table></figure><p>然后在配置文件  book.json 加上相关内容：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attr">&quot;title&quot;</span>: <span class="string">&quot;GitBook学习笔记&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;description&quot;</span>: <span class="string">&quot;记录Gitbook的配置和一些插件的使用&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;author&quot;</span>: <span class="string">&quot;hduzn&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;language&quot;</span>: <span class="string">&quot;zh-hans&quot;</span>,</span><br><span class="line"><span class="attr">&quot;gitbook&quot;</span>: <span class="string">&quot;3.2.3&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;links&quot;</span>: &#123;</span><br><span class="line">        <span class="attr">&quot;sidebar&quot;</span> : &#123;</span><br><span class="line">            <span class="attr">&quot;Home&quot;</span> : <span class="string">&quot;https://www.hduzn.cn/&quot;</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">&quot;plugins&quot;</span>: [</span><br><span class="line"><span class="string">&quot;expandable-chapters-small&quot;</span></span><br><span class="line">]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="6-单击查看图片（插件）"><a href="#6-单击查看图片（插件）" class="headerlink" title="6.单击查看图片（插件）"></a>6.单击查看图片（插件）</h4><p>安装插件：lightbox ，就可以实现单击查看图片，以弹窗形式查看图片。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 本地环境在 book_python 下执行；</span></span><br><span class="line"><span class="comment"># Docker环境，在容器中默认的`/gitbook`目录下执行</span></span><br><span class="line">npm install gitbook-plugin-lightbox</span><br></pre></td></tr></table></figure><p>然后在配置文件  book.json 加上相关内容：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attr">&quot;title&quot;</span>: <span class="string">&quot;GitBook学习笔记&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;description&quot;</span>: <span class="string">&quot;记录Gitbook的配置和一些插件的使用&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;author&quot;</span>: <span class="string">&quot;hduzn&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;language&quot;</span>: <span class="string">&quot;zh-hans&quot;</span>,</span><br><span class="line"><span class="attr">&quot;gitbook&quot;</span>: <span class="string">&quot;3.2.3&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;links&quot;</span>: &#123;</span><br><span class="line">        <span class="attr">&quot;sidebar&quot;</span> : &#123;</span><br><span class="line">            <span class="attr">&quot;Home&quot;</span> : <span class="string">&quot;https://www.hduzn.cn/&quot;</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">&quot;plugins&quot;</span>: [</span><br><span class="line"><span class="string">&quot;expandable-chapters-small&quot;</span>,</span><br><span class="line"><span class="string">&quot;lightbox&quot;</span></span><br><span class="line">]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="7-文章悬浮目录（插件）"><a href="#7-文章悬浮目录（插件）" class="headerlink" title="7.文章悬浮目录（插件）"></a>7.文章悬浮目录（插件）</h4><p>安装插件：ancre-navigation ，就有右上角悬浮导航和回到顶部按钮。</p><p>注意：内容从从h1、h2依次写标题。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 本地环境在 book_python 下执行；</span></span><br><span class="line"><span class="comment"># Docker环境，在容器中默认的`/gitbook`目录下执行</span></span><br><span class="line">npm install gitbook-plugin-ancre-navigation</span><br></pre></td></tr></table></figure><p>然后在配置文件  book.json 加上相关内容：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attr">&quot;title&quot;</span>: <span class="string">&quot;GitBook学习笔记&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;description&quot;</span>: <span class="string">&quot;记录Gitbook的配置和一些插件的使用&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;author&quot;</span>: <span class="string">&quot;hduzn&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;language&quot;</span>: <span class="string">&quot;zh-hans&quot;</span>,</span><br><span class="line"><span class="attr">&quot;gitbook&quot;</span>: <span class="string">&quot;3.2.3&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;links&quot;</span>: &#123;</span><br><span class="line">        <span class="attr">&quot;sidebar&quot;</span> : &#123;</span><br><span class="line">            <span class="attr">&quot;Home&quot;</span> : <span class="string">&quot;https://www.hduzn.cn/&quot;</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">&quot;plugins&quot;</span>: [</span><br><span class="line"><span class="string">&quot;expandable-chapters-small&quot;</span>,</span><br><span class="line"><span class="string">&quot;lightbox&quot;</span>,</span><br><span class="line"><span class="string">&quot;ancre-navigation&quot;</span></span><br><span class="line">]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Software </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Software </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>服务器Docker搭建Flask应用（二）</title>
      <link href="/2023/01/14/%E6%9C%8D%E5%8A%A1%E5%99%A8Docker%E6%90%AD%E5%BB%BAFlask%E5%BA%94%E7%94%A8%EF%BC%88%E4%BA%8C%EF%BC%89/"/>
      <url>/2023/01/14/%E6%9C%8D%E5%8A%A1%E5%99%A8Docker%E6%90%AD%E5%BB%BAFlask%E5%BA%94%E7%94%A8%EF%BC%88%E4%BA%8C%EF%BC%89/</url>
      
        <content type="html"><![CDATA[<p>第一篇：<a href="/2022/05/28/%E6%9C%8D%E5%8A%A1%E5%99%A8Docker%E6%90%AD%E5%BB%BAFlask%E5%BA%94%E7%94%A8%EF%BC%88%E4%B8%80%EF%BC%89/" title="服务器 Docker搭建Flask应用（一）">服务器 Docker搭建Flask应用（一）</a>，没带数据库MySQL。如果是用python自带的 sqlite的话，就比较简单，直接反正就一个数据库文件。</p><p>如果要用MySQL的话，就麻烦点。</p><p>比如我自己装了一台Ubuntu20.04LTS作小服务器，并没有安装MySQL，然后反正装了Docker，倒也是没啥大关系，用个MySQL的镜像，创建容器就能用了。</p><a id="more"></a><h2 id="一、制作Flask项目镜像（本地）"><a href="#一、制作Flask项目镜像（本地）" class="headerlink" title="一、制作Flask项目镜像（本地）"></a>一、制作Flask项目镜像（本地）</h2><h3 id="1-项目结构（样例）"><a href="#1-项目结构（样例）" class="headerlink" title="1.项目结构（样例）"></a>1.项目结构（样例）</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">flask_demo</span><br><span class="line">├── app</span><br><span class="line">│   ├── templates</span><br><span class="line">│       └── index.html</span><br><span class="line">│   ├── app.py</span><br><span class="line">│   ├── Dockerfile</span><br><span class="line">│   └── requirements.txt</span><br><span class="line">├── db_data</span><br><span class="line">│   └── init.sql</span><br><span class="line">└── docker-compose.yml</span><br></pre></td></tr></table></figure><p>其中：Dockerfile、requirements.txt、docker-compose.yml文件都是后面创建的。</p><h3 id="2-生成-requirements-txt"><a href="#2-生成-requirements-txt" class="headerlink" title="2.生成 requirements.txt"></a>2.生成 requirements.txt</h3><p>进入<code>flask_demo\app</code>目录下，运行如下命令，就可以生成项目环境的 requirements.txt 文件。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip freeze &gt; requirements.txt</span><br></pre></td></tr></table></figure><p><strong>requirements.txt 举例</strong>：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">cffi&#x3D;&#x3D;1.15.1</span><br><span class="line">click&#x3D;&#x3D;8.1.3</span><br><span class="line">colorama&#x3D;&#x3D;0.4.6</span><br><span class="line">et-xmlfile&#x3D;&#x3D;1.1.0</span><br><span class="line">Flask&#x3D;&#x3D;2.2.2</span><br><span class="line">Flask-SQLAlchemy&#x3D;&#x3D;3.0.2</span><br><span class="line">Flask-WTF&#x3D;&#x3D;1.0.1</span><br><span class="line">gevent&#x3D;&#x3D;22.10.2</span><br><span class="line">greenlet&#x3D;&#x3D;2.0.1</span><br><span class="line">importlib-metadata&#x3D;&#x3D;5.2.0</span><br><span class="line">itsdangerous&#x3D;&#x3D;2.1.2</span><br><span class="line">Jinja2&#x3D;&#x3D;3.1.2</span><br><span class="line">MarkupSafe&#x3D;&#x3D;2.1.1</span><br><span class="line">mysqlclient&#x3D;&#x3D;2.1.1</span><br><span class="line">numpy&#x3D;&#x3D;1.24.1</span><br><span class="line">openpyxl&#x3D;&#x3D;3.0.10</span><br><span class="line">pandas&#x3D;&#x3D;1.5.2</span><br><span class="line">prettytable&#x3D;&#x3D;3.6.0</span><br><span class="line">pycparser&#x3D;&#x3D;2.21</span><br><span class="line">pyecharts&#x3D;&#x3D;2.0.1</span><br><span class="line">PyMySQL&#x3D;&#x3D;1.0.2</span><br><span class="line">python-dateutil&#x3D;&#x3D;2.8.2</span><br><span class="line">pytz&#x3D;&#x3D;2022.7</span><br><span class="line">simplejson&#x3D;&#x3D;3.18.1</span><br><span class="line">six&#x3D;&#x3D;1.16.0</span><br><span class="line">SQLAlchemy&#x3D;&#x3D;1.4.45</span><br><span class="line">wcwidth&#x3D;&#x3D;0.2.5</span><br><span class="line">Werkzeug&#x3D;&#x3D;2.2.2</span><br><span class="line">WTForms&#x3D;&#x3D;3.0.1</span><br><span class="line">zipp&#x3D;&#x3D;3.11.0</span><br><span class="line">zope.event&#x3D;&#x3D;4.6</span><br><span class="line">zope.interface&#x3D;&#x3D;5.5.2</span><br></pre></td></tr></table></figure><p>我安装的库就是这些：<br><code>pip install flask, flask_wtf, flask_sqlalchemy, pymysql, mysqlclient, pandas, openpyxl, gevent, pyecharts</code></p><h3 id="3-用Dockerfile-文件创建镜像"><a href="#3-用Dockerfile-文件创建镜像" class="headerlink" title="3.用Dockerfile 文件创建镜像"></a>3.用Dockerfile 文件创建镜像</h3><p>注意一下，我这个Dockerfile文件只是建立一个初步的环境，后期是可以修改里面的python文件，最后在容器里运行python文件的。所以没把整个项目代码都copy进去。</p><p>Dockerfile文件内容如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"># Use an official Python runtime as an image</span><br><span class="line">FROM python:3.9</span><br><span class="line"></span><br><span class="line"># Sets the working directory for following COPY and CMD instructions</span><br><span class="line"># Notice we haven’t created a directory by this name - this instruction</span><br><span class="line"># creates a directory with this name if it doesn’t exist</span><br><span class="line">WORKDIR &#x2F;app</span><br><span class="line"></span><br><span class="line"># copy code</span><br><span class="line"># COPY . &#x2F;app</span><br><span class="line">COPY requirements.txt &#x2F;app</span><br><span class="line"></span><br><span class="line"># RUN python -m pip install --upgrade pip</span><br><span class="line"># RUN pip install --trusted-host pypi.org --trusted-host pypi.python.org --trusted-host&#x3D;files.pythonhosted.org --no-cache-dir -r requirements.txt</span><br><span class="line">RUN pip3 install -i https:&#x2F;&#x2F;pypi.tuna.tsinghua.edu.cn&#x2F;simple --upgrade pip </span><br><span class="line">RUN pip3 install -i https:&#x2F;&#x2F;pypi.tuna.tsinghua.edu.cn&#x2F;simple -r requirements.txt </span><br><span class="line"></span><br><span class="line"># The EXPOSE instruction indicates the ports on which a container</span><br><span class="line">EXPOSE 5002</span><br><span class="line"></span><br><span class="line"># Run app.py when the container launches</span><br><span class="line">COPY app.py &#x2F;app</span><br><span class="line"># CMD python app.py</span><br></pre></td></tr></table></figure><p><code>EXPOSE 5020</code>：这里需要改成你自己设置的端口号。Flask一般默认用5000。别的可以啥也不用改。</p><p>然后，把app目录中的文件上传到服务器上，比如上传至 flask_demo目录。可以直接用Xftp上传。<br>（app目录下只需要：Dockerfile、requirements.txt、app.py文件就行）</p><p>然后SSH连接服务器，进入到app 目录，运行以下命令生成镜像：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker build -t flask_demo:1.0 .</span><br></pre></td></tr></table></figure><blockquote><p>-t 设置镜像名字和版本号<br>最后有个点不要漏了，表示当前目录路径</p></blockquote><p>执行完，就可以用命令 <code>docker images</code>看到以下镜像了（当然也有python3.9的镜像）。</p><h2 id="二、创建Flask项目容器（服务器）"><a href="#二、创建Flask项目容器（服务器）" class="headerlink" title="二、创建Flask项目容器（服务器）"></a>二、创建Flask项目容器（服务器）</h2><p>根据刚创建的镜像：flask_demo:1.0 创建一个容器。</p><p>因为还涉及到MySQL，所以这里用docker-compose的方法，docker-compose的介绍看这里：<a href="/2022/06/19/Docker-Compose%E8%AF%A6%E8%A7%A3/" title="Docker-Compose详解">Docker-Compose详解</a></p><p>先在 flask_demo目录下创建个 docker_app 目录，作来做映射需要的。</p><h3 id="1-docker-compose-yml文件"><a href="#1-docker-compose-yml文件" class="headerlink" title="1.docker-compose.yml文件"></a>1.docker-compose.yml文件</h3><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">version:</span> <span class="string">&quot;3&quot;</span></span><br><span class="line"><span class="attr">services:</span></span><br><span class="line">  <span class="attr">app:</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">flask_demo:1.0</span></span><br><span class="line">    <span class="attr">container_name:</span> <span class="string">my_flask_demo</span></span><br><span class="line">    <span class="attr">tty:</span> <span class="literal">true</span></span><br><span class="line">    <span class="attr">ports:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">&quot;5002:5002&quot;</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">&quot;5522:22&quot;</span></span><br><span class="line">    <span class="attr">volumes:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">./docker_app:/app</span></span><br><span class="line">    <span class="attr">environment:</span></span><br><span class="line">      <span class="attr">MYSQL_HOST:</span> <span class="string">db</span> </span><br><span class="line">      <span class="attr">MYSQL_USER:</span> <span class="string">root</span></span><br><span class="line">      <span class="attr">MYSQL_ROOT_PASSWORD:</span> <span class="string">123MYSQL321</span></span><br><span class="line">      <span class="attr">MYSQL_DATABASE:</span> <span class="string">flask_demo_mysql</span></span><br><span class="line">  <span class="attr">db:</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">mysql:8.0</span></span><br><span class="line">    <span class="attr">container_name:</span> <span class="string">my_flask_demo_db</span></span><br><span class="line">    <span class="attr">restart:</span> <span class="string">always</span></span><br><span class="line">    <span class="attr">ports:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">&quot;3307:3306&quot;</span></span><br><span class="line">    <span class="attr">environment:</span></span><br><span class="line">      <span class="attr">MYSQL_ROOT_PASSWORD:</span> <span class="string">123MYSQL321</span></span><br><span class="line">      <span class="attr">MYSQL_DATABASE:</span> <span class="string">flask_demo_mysql</span></span><br><span class="line">    <span class="attr">volumes:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">./db_data:/docker-entrypoint-initdb.d/:ro</span></span><br><span class="line"></span><br><span class="line"><span class="attr">volumes:</span></span><br><span class="line">  <span class="attr">app:</span></span><br><span class="line">  <span class="attr">db:</span></span><br></pre></td></tr></table></figure><blockquote><p>因为在app中用 restart: always 创建容器后会一直Restarting，所以用了 tty: true</p></blockquote><p>db_data/init.sql 文件：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">drop</span> database flask_demo_mysql;</span><br><span class="line"><span class="keyword">create</span> database flask_demo_mysql;</span><br><span class="line">use flask_demo_mysql;</span><br></pre></td></tr></table></figure><h3 id="2-部署Compose应用"><a href="#2-部署Compose应用" class="headerlink" title="2.部署Compose应用"></a>2.部署Compose应用</h3><p>docker-compose命令就在有 docker-compose.yml文件的目录下执行。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">docker-compose up -d</span><br><span class="line"><span class="comment"># -d参数令应用在后台启动</span></span><br><span class="line"><span class="comment"># 默认情况下该命令会读取名为 docker-compose.yml，也可以使用-f指定其他文件名。</span></span><br><span class="line"><span class="comment"># docker-compose -f docker-compose.yml up -d</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 其它常用docker-compose命令</span></span><br><span class="line"><span class="comment"># 列出Compose应用中的各个容器</span></span><br><span class="line">docker-compose ps</span><br><span class="line">docker ps -a <span class="comment"># 显示包括停止的容器</span></span><br><span class="line"><span class="comment"># 停止Compose应用相关的所有容器，但不会删除它们</span></span><br><span class="line">docker-compose stop</span><br><span class="line"><span class="comment"># 重启已停止的Compose应用</span></span><br><span class="line">docker-compose restart</span><br><span class="line"><span class="comment"># 停止并删除运行中的Compose应用，会删除容器和网络，但是不会删除卷和镜像。</span></span><br><span class="line">docker-compose down</span><br></pre></td></tr></table></figure><h3 id="3-把app目录下的所有文件复制到docker-app目录中"><a href="#3-把app目录下的所有文件复制到docker-app目录中" class="headerlink" title="3.把app目录下的所有文件复制到docker_app目录中"></a>3.把app目录下的所有文件复制到docker_app目录中</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cp -r app/. docker_app/</span><br></pre></td></tr></table></figure><blockquote><p>cp -r app docker_app/ ：表示将app目录及其目录下所有文件复制到docker_app目录下，就会有 docker_app/app目录</p><p>cp -r app/. docker_app/ ：表示将app目录下所有文件复制到docker_app目录下，不包括app目录</p></blockquote><p>以后要改容器中的代码，就直接改这个目录下的代码就行了。</p><h2 id="三、后台一直运行app-py"><a href="#三、后台一直运行app-py" class="headerlink" title="三、后台一直运行app.py"></a>三、后台一直运行app.py</h2><p>这个用<code>nohup</code>命令，有文章写过介绍了：<a href="/2022/05/02/Linux-nohup-%E5%90%8E%E5%8F%B0%E8%BF%90%E8%A1%8C-%E5%91%BD%E4%BB%A4%E8%AF%A6%E8%A7%A3/" title="Linux nohup 后台运行 命令详解">Linux nohup 后台运行 命令详解</a></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 1.进入容器</span></span><br><span class="line">docker <span class="built_in">exec</span> -it my_flask_demo /bin/bash</span><br><span class="line"></span><br><span class="line"><span class="comment"># 2.后台运行Flask项目，运行后，会显示进程的PID</span></span><br><span class="line"><span class="comment"># 运行后就可以通过：http://192.168.1.121:5002 访问了。</span></span><br><span class="line">nohup python3 -u app.py &gt; /dev/null 2&gt;&amp;1 &amp;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 3.结束进程</span></span><br><span class="line"><span class="comment"># 1).查找进程，找到app.py进程的PID</span></span><br><span class="line">ps -aux | grep <span class="string">&quot;app.py&quot;</span></span><br><span class="line"><span class="comment"># 2).结束进程</span></span><br><span class="line"><span class="built_in">kill</span> [PID]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 5.退出容器</span></span><br><span class="line"><span class="built_in">exit</span></span><br></pre></td></tr></table></figure><h2 id="四、MySQL"><a href="#四、MySQL" class="headerlink" title="四、MySQL"></a>四、MySQL</h2><p>看 docker-compose.yml文件内容：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">MYSQL_USER:</span> <span class="string">root</span></span><br><span class="line"><span class="attr">MYSQL_ROOT_PASSWORD:</span> <span class="string">123MYSQL321</span></span><br><span class="line"><span class="attr">MYSQL_DATABASE:</span> <span class="string">flask_demo_mysql</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 端口已经从3306映射到3307了</span></span><br><span class="line"><span class="string">&quot;3307:3306&quot;</span></span><br></pre></td></tr></table></figure><p>所以在Flask使用：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">mysql_host = <span class="string">&#x27;192.168.1.121&#x27;</span></span><br><span class="line">mysql_user = <span class="string">&#x27;root&#x27;</span></span><br><span class="line">mysql_passwd = <span class="string">&#x27;123MYSQL321&#x27;</span></span><br><span class="line">mysql_db = <span class="string">&#x27;flask_demo_mysql&#x27;</span></span><br><span class="line">mysql_port = <span class="number">3307</span></span><br><span class="line"><span class="comment"># DATABASE_URI = &#x27;mysql://root:123MYSQL321@192.168.1.121:3307/flask_demo_mysql&#x27;</span></span><br><span class="line">DATABASE_URI = <span class="string">&#x27;mysql://&#x27;</span> + mysql_user + <span class="string">&#x27;:&#x27;</span> + mysql_passwd + <span class="string">&#x27;@&#x27;</span> + mysql_host + <span class="string">&#x27;:&#x27;</span> + <span class="built_in">str</span>(mysql_port) + <span class="string">&#x27;/&#x27;</span> + mysql_db</span><br><span class="line"></span><br><span class="line"><span class="comment"># 配置数据库地址</span></span><br><span class="line">app.config[<span class="string">&#x27;SQLALCHEMY_DATABASE_URI&#x27;</span>] = DATABASE_URI</span><br><span class="line"><span class="comment"># 跟踪数据库的修改--&gt;不建议开启未来的版本中会移除</span></span><br><span class="line">app.config[<span class="string">&#x27;SQLALCHEMY_TRACK_MODIFICATIONS&#x27;</span>] = <span class="literal">False</span></span><br><span class="line">db = SQLAlchemy(app)</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Docker </tag>
            
            <tag> Python </tag>
            
            <tag> Flask </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Python Flask使用pyecharts画图表</title>
      <link href="/2023/01/13/Python-Flask%E4%BD%BF%E7%94%A8pyecharts%E7%94%BB%E5%9B%BE%E8%A1%A8/"/>
      <url>/2023/01/13/Python-Flask%E4%BD%BF%E7%94%A8pyecharts%E7%94%BB%E5%9B%BE%E8%A1%A8/</url>
      
        <content type="html"><![CDATA[<p>pyecharts 是一个用于生成 Echarts 图表的类库，Echarts 是百度开源的一个数据可视化 JS 库，主要用于数据可视化。所以，pyecharts 实际上就是 Echarts 与 Python 的对接。</p><p>官方文档：<a class="link"   href="https://pyecharts.org/#/zh-cn/intro" >https://pyecharts.org/#/zh-cn/intro<i class="fas fa-external-link-alt"></i></a></p><p><strong>安装pyecharts：</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install pyecharts</span><br></pre></td></tr></table></figure><a id="more"></a><h3 id="1-在Flask中画柱形图"><a href="#1-在Flask中画柱形图" class="headerlink" title="1.在Flask中画柱形图"></a>1.在Flask中画柱形图</h3><p>官方文档中也有关于在Flask中使用的说明：<a class="link"   href="https://pyecharts.org/#/zh-cn/web_flask" >https://pyecharts.org/#/zh-cn/web_flask<i class="fas fa-external-link-alt"></i></a></p><p>这个跟官方的例子差不多，稍微改了下，chart1中变量bar赋值的时候用的是链式的，不习惯这种方式，参考chart2中写法就行，一样的效果。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># app.py</span></span><br><span class="line"><span class="comment"># pip install gevent</span></span><br><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Flask, render_template</span><br><span class="line"><span class="keyword">from</span> gevent.pywsgi <span class="keyword">import</span> WSGIServer</span><br><span class="line"><span class="keyword">from</span> pyecharts.charts <span class="keyword">import</span> Bar</span><br><span class="line"><span class="keyword">from</span> pyecharts <span class="keyword">import</span> options <span class="keyword">as</span> opts</span><br><span class="line"></span><br><span class="line">app = Flask(__name__)</span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&quot;/chart1&quot;</span></span>)</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">chart1</span>():</span></span><br><span class="line">    bar = (</span><br><span class="line">        Bar()</span><br><span class="line">        .add_xaxis([<span class="string">&quot;衬衫&quot;</span>, <span class="string">&quot;羊毛衫&quot;</span>, <span class="string">&quot;雪纺衫&quot;</span>, <span class="string">&quot;裤子&quot;</span>, <span class="string">&quot;高跟鞋&quot;</span>, <span class="string">&quot;袜子&quot;</span>])</span><br><span class="line">        .add_yaxis(<span class="string">&quot;商家A&quot;</span>, [<span class="number">5</span>, <span class="number">20</span>, <span class="number">36</span>, <span class="number">10</span>, <span class="number">75</span>, <span class="number">90</span>])</span><br><span class="line">        .add_yaxis(<span class="string">&quot;商家B&quot;</span>, [<span class="number">15</span>, <span class="number">25</span>, <span class="number">16</span>, <span class="number">55</span>, <span class="number">48</span>, <span class="number">8</span>])</span><br><span class="line">        .set_global_opts(title_opts=opts.TitleOpts(title=<span class="string">&quot;Bar-基本示例&quot;</span>, subtitle=<span class="string">&quot;我是副标题&quot;</span>))</span><br><span class="line">    )</span><br><span class="line">    chart1 = bar.render_embed()</span><br><span class="line">    <span class="keyword">return</span> render_template(<span class="string">&#x27;chart1.html&#x27;</span>, chart1=chart1)</span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&quot;/chart2&quot;</span></span>)</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">chart2</span>():</span></span><br><span class="line">    bar = Bar(init_opts=opts.InitOpts(width=<span class="string">&#x27;800px&#x27;</span>, height=<span class="string">&#x27;400px&#x27;</span>))</span><br><span class="line">    bar.add_xaxis([<span class="string">&quot;衬衫&quot;</span>, <span class="string">&quot;羊毛衫&quot;</span>, <span class="string">&quot;雪纺衫&quot;</span>, <span class="string">&quot;裤子&quot;</span>, <span class="string">&quot;高跟鞋&quot;</span>, <span class="string">&quot;袜子&quot;</span>])</span><br><span class="line">    bar.add_yaxis(<span class="string">&quot;商家A&quot;</span>, [<span class="number">5</span>, <span class="number">20</span>, <span class="number">36</span>, <span class="number">10</span>, <span class="number">75</span>, <span class="number">90</span>])</span><br><span class="line">    bar.add_yaxis(<span class="string">&quot;商家B&quot;</span>, [<span class="number">15</span>, <span class="number">25</span>, <span class="number">16</span>, <span class="number">55</span>, <span class="number">48</span>, <span class="number">8</span>])</span><br><span class="line">    bar.set_global_opts(title_opts=opts.TitleOpts(title=<span class="string">&quot;Bar-基本示例&quot;</span>, subtitle=<span class="string">&quot;副标题&quot;</span>))</span><br><span class="line">    chart2 = bar.render_embed()</span><br><span class="line">    <span class="keyword">return</span> render_template(<span class="string">&#x27;chart2.html&#x27;</span>, chart2=chart2)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    <span class="comment"># app.run(&#x27;0.0.0.0&#x27;, port=5000)</span></span><br><span class="line">    http_server = WSGIServer((<span class="string">&#x27;0.0.0.0&#x27;</span>, <span class="number">5000</span>), app)</span><br><span class="line">    http_server.serve_forever()</span><br></pre></td></tr></table></figure><p><strong>chart1.html</strong>（我这里不想用在线的js文件，所以把下载好的 echarts.min.js放在项目目录下的<code>static/js</code>目录下了 ）：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;meta charset&#x3D;&quot;UTF-8&quot;&gt;</span><br><span class="line">    &lt;title&gt;Bar-基本示例&lt;&#x2F;title&gt;</span><br><span class="line">    &lt;script src&#x3D;&quot;&#123;&#123;url_for(&#39;static&#39;, filename&#x3D;&#39;js&#x2F;echarts.min.js&#39;)&#125;&#125;&quot;&gt;&lt;&#x2F;script&gt;</span><br><span class="line">&lt;&#x2F;head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">    &lt;div class&#x3D;&quot;chart&quot;&gt;</span><br><span class="line">        &#123;&#123; chart1|safe &#125;&#125;</span><br><span class="line">    &lt;&#x2F;div&gt;</span><br><span class="line">&lt;&#x2F;body&gt;</span><br><span class="line">&lt;&#x2F;html&gt;</span><br></pre></td></tr></table></figure><h3 id="2-在Flask中画时间线轮播多张饼图（Timeline）"><a href="#2-在Flask中画时间线轮播多张饼图（Timeline）" class="headerlink" title="2.在Flask中画时间线轮播多张饼图（Timeline）"></a>2.在Flask中画时间线轮播多张饼图（Timeline）</h3><p>需要展示多个图表的话，依次展示的话直接把2个chart传过去就行。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># app.py</span></span><br><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Flask, render_template</span><br><span class="line"><span class="keyword">from</span> gevent.pywsgi <span class="keyword">import</span> WSGIServer</span><br><span class="line"><span class="keyword">from</span> pyecharts.charts <span class="keyword">import</span> Bar, Timeline, Pie</span><br><span class="line"><span class="keyword">from</span> pyecharts <span class="keyword">import</span> options <span class="keyword">as</span> opts</span><br><span class="line"><span class="keyword">import</span> random</span><br><span class="line"></span><br><span class="line">app = Flask(__name__)</span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&quot;/chart3&quot;</span></span>)</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">chart3</span>():</span></span><br><span class="line">    <span class="comment"># 画柱形图</span></span><br><span class="line">    bar = Bar(init_opts=opts.InitOpts(width=<span class="string">&#x27;800px&#x27;</span>, height=<span class="string">&#x27;400px&#x27;</span>))</span><br><span class="line">    bar.add_xaxis([<span class="string">&quot;衬衫&quot;</span>, <span class="string">&quot;羊毛衫&quot;</span>, <span class="string">&quot;雪纺衫&quot;</span>, <span class="string">&quot;裤子&quot;</span>, <span class="string">&quot;高跟鞋&quot;</span>, <span class="string">&quot;袜子&quot;</span>])</span><br><span class="line">    bar.add_yaxis(<span class="string">&quot;商家A&quot;</span>, [<span class="number">5</span>, <span class="number">20</span>, <span class="number">36</span>, <span class="number">10</span>, <span class="number">75</span>, <span class="number">90</span>])</span><br><span class="line">    bar.add_yaxis(<span class="string">&quot;商家B&quot;</span>, [<span class="number">15</span>, <span class="number">25</span>, <span class="number">16</span>, <span class="number">55</span>, <span class="number">48</span>, <span class="number">8</span>])</span><br><span class="line">    bar.set_global_opts(title_opts=opts.TitleOpts(title=<span class="string">&quot;Bar-基本示例&quot;</span>, subtitle=<span class="string">&quot;副标题&quot;</span>))</span><br><span class="line">    chart1 = bar.render_embed()</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 画时间线轮播多张饼图（每一题统计结果）</span></span><br><span class="line">    timeline = Timeline()</span><br><span class="line">    x_list = [<span class="string">&#x27;A&#x27;</span>, <span class="string">&#x27;B&#x27;</span>, <span class="string">&#x27;C&#x27;</span>, <span class="string">&#x27;D&#x27;</span>]</span><br><span class="line">    ques_id_list = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>] <span class="comment"># 题目序号</span></span><br><span class="line">    standard_answer_dict = &#123;<span class="number">1</span>:<span class="string">&#x27;A&#x27;</span>, <span class="number">2</span>:<span class="string">&#x27;C&#x27;</span>, <span class="number">3</span>:<span class="string">&#x27;D&#x27;</span>, <span class="number">4</span>:<span class="string">&#x27;B&#x27;</span>, <span class="number">5</span>:<span class="string">&#x27;C&#x27;</span>&#125; <span class="comment"># 标准答案</span></span><br><span class="line">    <span class="keyword">for</span> ques_id <span class="keyword">in</span> ques_id_list:</span><br><span class="line">        standard_answer = standard_answer_dict[ques_id]</span><br><span class="line">        <span class="comment"># 在正确答案后面添加文字：&#x27; 正确答案&#x27;</span></span><br><span class="line">        new_x_list = []</span><br><span class="line">        <span class="keyword">for</span> x <span class="keyword">in</span> x_list:</span><br><span class="line">            <span class="keyword">if</span>(x == standard_answer):</span><br><span class="line">                new_x_list.append(x + <span class="string">&#x27; 正确答案&#x27;</span>)</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                new_x_list.append(x)</span><br><span class="line">        </span><br><span class="line">        num_list = [random.randint(<span class="number">0</span>, <span class="number">5</span>) <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">4</span>)] <span class="comment"># 随机生成每个选项的选择人数</span></span><br><span class="line">        pie_data_dict = <span class="built_in">list</span>(<span class="built_in">zip</span>(new_x_list, num_list)) <span class="comment"># [(&#x27;A&#x27;, 1), (&#x27;B 正确答案&#x27;, 1), (&#x27;C&#x27;, 2), (&#x27;D&#x27;, 3)]</span></span><br><span class="line">        </span><br><span class="line">        <span class="comment"># 饼图</span></span><br><span class="line">        pie = Pie(init_opts=opts.InitOpts(width=<span class="string">&#x27;300px&#x27;</span>, height=<span class="string">&#x27;300px&#x27;</span>))</span><br><span class="line">        pie.add(<span class="string">&quot;&quot;</span>, pie_data_dict)</span><br><span class="line">        pie.set_global_opts(title_opts=opts.TitleOpts(title=<span class="built_in">str</span>(ques_id)+<span class="string">&#x27;题&#x27;</span>, subtitle=<span class="string">&quot;副标题&quot;</span>))</span><br><span class="line">        pie.set_series_opts(label_opts=opts.LabelOpts(formatter=<span class="string">&quot;&#123;b&#125;: &#123;c&#125;&quot;</span>)) <span class="comment"># &#123;b&#125;是数据项的名称，&#123;c&#125;是数据项的值。</span></span><br><span class="line">        timeline.add(pie, ques_id)</span><br><span class="line">    chart2 = timeline.render_embed()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> render_template(<span class="string">&#x27;chart3.html&#x27;</span>, chart1=chart1, chart2=chart2)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    <span class="comment"># app.run(&#x27;0.0.0.0&#x27;, port=5000)</span></span><br><span class="line">    http_server = WSGIServer((<span class="string">&#x27;0.0.0.0&#x27;</span>, <span class="number">5000</span>), app)</span><br><span class="line">    http_server.serve_forever()</span><br></pre></td></tr></table></figure><p><a class="link"   href="http://localhost:5000/chart3" >http://localhost:5000/chart3<i class="fas fa-external-link-alt"></i></a> 运行结果如图：<br><img                       lazyload                     src="/images/loading.svg"                     data-src="/img/Python_flask_pyecharts_1.png"                      style="zoom: 50%;"                ></p><h3 id="3-Grid：并行多图"><a href="#3-Grid：并行多图" class="headerlink" title="3.Grid：并行多图"></a>3.Grid：并行多图</h3><p>如果需要布局多张图表的话，可以用Grid类：</p><blockquote><p>pos_bottom：表示与下方间距<br>pos_top：表示与上方间距<br>pos_right：表示与右方间距<br>pos_left：表示与左方间距</p></blockquote><p>布局的时候，顺便也要把 LegendOpts（图例配置项）和 TitleOpts（标题配置项）位置也调整下。</p><p>举个例子：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># app.py</span></span><br><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Flask, render_template</span><br><span class="line"><span class="keyword">from</span> gevent.pywsgi <span class="keyword">import</span> WSGIServer</span><br><span class="line"><span class="keyword">from</span> pyecharts.charts <span class="keyword">import</span> Bar, Grid</span><br><span class="line"><span class="keyword">from</span> pyecharts <span class="keyword">import</span> options <span class="keyword">as</span> opts</span><br><span class="line"></span><br><span class="line">app = Flask(__name__)</span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&quot;/&quot;</span></span>)</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">index</span>():</span></span><br><span class="line">    bar1 = Bar(init_opts=opts.InitOpts(width=<span class="string">&#x27;150px&#x27;</span>, height=<span class="string">&#x27;100px&#x27;</span>))</span><br><span class="line">    bar1.add_xaxis([<span class="string">&quot;衬衫&quot;</span>, <span class="string">&quot;羊毛衫&quot;</span>, <span class="string">&quot;雪纺衫&quot;</span>, <span class="string">&quot;裤子&quot;</span>, <span class="string">&quot;高跟鞋&quot;</span>, <span class="string">&quot;袜子&quot;</span>])</span><br><span class="line">    bar1.add_yaxis(<span class="string">&quot;商家A&quot;</span>, [<span class="number">5</span>, <span class="number">20</span>, <span class="number">36</span>, <span class="number">10</span>, <span class="number">75</span>, <span class="number">90</span>])</span><br><span class="line">    bar1.set_global_opts(title_opts=opts.TitleOpts(title=<span class="string">&quot;Bar1-基本示例&quot;</span>, subtitle=<span class="string">&quot;Bar1副标题&quot;</span>, pos_bottom=<span class="string">&quot;93%&quot;</span>, pos_right=<span class="string">&quot;85%&quot;</span>),</span><br><span class="line">                        legend_opts=opts.LegendOpts(pos_bottom=<span class="string">&quot;95%&quot;</span>, pos_right=<span class="string">&quot;70%&quot;</span>))</span><br><span class="line"></span><br><span class="line">    bar2 = Bar(init_opts=opts.InitOpts(width=<span class="string">&#x27;150px&#x27;</span>, height=<span class="string">&#x27;100px&#x27;</span>))</span><br><span class="line">    bar2.add_xaxis([<span class="string">&quot;衬衫&quot;</span>, <span class="string">&quot;羊毛衫&quot;</span>, <span class="string">&quot;雪纺衫&quot;</span>, <span class="string">&quot;裤子&quot;</span>, <span class="string">&quot;高跟鞋&quot;</span>, <span class="string">&quot;袜子&quot;</span>])</span><br><span class="line">    bar2.add_yaxis(<span class="string">&quot;商家A&quot;</span>, [<span class="number">5</span>, <span class="number">20</span>, <span class="number">36</span>, <span class="number">10</span>, <span class="number">75</span>, <span class="number">80</span>])</span><br><span class="line">    bar2.set_global_opts(title_opts=opts.TitleOpts(title=<span class="string">&quot;Bar2-基本示例&quot;</span>, subtitle=<span class="string">&quot;Bar2副标题&quot;</span>, pos_bottom=<span class="string">&quot;93%&quot;</span>, pos_left=<span class="string">&quot;55%&quot;</span>),</span><br><span class="line">                        legend_opts=opts.LegendOpts(pos_bottom=<span class="string">&quot;95%&quot;</span>, pos_left=<span class="string">&quot;70%&quot;</span>))</span><br><span class="line"></span><br><span class="line">    bar3 = Bar(init_opts=opts.InitOpts(width=<span class="string">&#x27;150px&#x27;</span>, height=<span class="string">&#x27;100px&#x27;</span>))</span><br><span class="line">    bar3.add_xaxis([<span class="string">&quot;衬衫&quot;</span>, <span class="string">&quot;羊毛衫&quot;</span>, <span class="string">&quot;雪纺衫&quot;</span>, <span class="string">&quot;裤子&quot;</span>, <span class="string">&quot;高跟鞋&quot;</span>, <span class="string">&quot;袜子&quot;</span>])</span><br><span class="line">    bar3.add_yaxis(<span class="string">&quot;商家A&quot;</span>, [<span class="number">5</span>, <span class="number">20</span>, <span class="number">36</span>, <span class="number">10</span>, <span class="number">75</span>, <span class="number">70</span>])</span><br><span class="line">    bar3.set_global_opts(title_opts=opts.TitleOpts(title=<span class="string">&quot;Bar3-基本示例&quot;</span>, subtitle=<span class="string">&quot;Bar3副标题&quot;</span>, pos_top=<span class="string">&quot;52%&quot;</span>, pos_right=<span class="string">&quot;85%&quot;</span>),</span><br><span class="line">                        legend_opts=opts.LegendOpts(pos_top=<span class="string">&quot;54%&quot;</span>, pos_right=<span class="string">&quot;70%&quot;</span>))</span><br><span class="line"></span><br><span class="line">    bar4 = Bar(init_opts=opts.InitOpts(width=<span class="string">&#x27;150px&#x27;</span>, height=<span class="string">&#x27;100px&#x27;</span>))</span><br><span class="line">    bar4.add_xaxis([<span class="string">&quot;衬衫&quot;</span>, <span class="string">&quot;羊毛衫&quot;</span>, <span class="string">&quot;雪纺衫&quot;</span>, <span class="string">&quot;裤子&quot;</span>, <span class="string">&quot;高跟鞋&quot;</span>, <span class="string">&quot;袜子&quot;</span>])</span><br><span class="line">    bar4.add_yaxis(<span class="string">&quot;商家A&quot;</span>, [<span class="number">5</span>, <span class="number">20</span>, <span class="number">36</span>, <span class="number">10</span>, <span class="number">75</span>, <span class="number">60</span>])</span><br><span class="line">    bar4.set_global_opts(title_opts=opts.TitleOpts(title=<span class="string">&quot;Bar4-基本示例&quot;</span>, subtitle=<span class="string">&quot;Bar4副标题&quot;</span>, pos_top=<span class="string">&quot;52%&quot;</span>, pos_left=<span class="string">&quot;55%&quot;</span>),</span><br><span class="line">                        legend_opts=opts.LegendOpts(pos_top=<span class="string">&quot;54%&quot;</span>, pos_left=<span class="string">&quot;70%&quot;</span>))</span><br><span class="line"></span><br><span class="line">    grid = Grid(init_opts=opts.InitOpts(width=<span class="string">&#x27;960px&#x27;</span>, height=<span class="string">&#x27;800px&#x27;</span>))</span><br><span class="line">    grid.add(bar1, grid_opts=opts.GridOpts(pos_bottom=<span class="string">&quot;60%&quot;</span>, pos_right=<span class="string">&quot;60%&quot;</span>)) <span class="comment"># 左上</span></span><br><span class="line">    grid.add(bar2, grid_opts=opts.GridOpts(pos_bottom=<span class="string">&quot;60%&quot;</span>, pos_left=<span class="string">&quot;60%&quot;</span>)) <span class="comment"># 右上</span></span><br><span class="line">    grid.add(bar3, grid_opts=opts.GridOpts(pos_top=<span class="string">&quot;60%&quot;</span>, pos_right=<span class="string">&quot;60%&quot;</span>)) <span class="comment"># 左下</span></span><br><span class="line">    grid.add(bar4, grid_opts=opts.GridOpts(pos_top=<span class="string">&quot;60%&quot;</span>, pos_left=<span class="string">&quot;60%&quot;</span>)) <span class="comment"># 右下</span></span><br><span class="line"></span><br><span class="line">    chart1 = grid.render_embed()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> render_template(<span class="string">&#x27;index.html&#x27;</span>, chart1=chart1)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    <span class="comment"># app.run(&#x27;0.0.0.0&#x27;, port=5000)</span></span><br><span class="line">    http_server = WSGIServer((<span class="string">&#x27;0.0.0.0&#x27;</span>, <span class="number">5000</span>), app)</span><br><span class="line">    http_server.serve_forever()</span><br></pre></td></tr></table></figure><p>运行效果如下图：<br><img                       lazyload                     src="/images/loading.svg"                     data-src="/img/Python_flask_pyecharts_2.png"                      style="zoom: 50%;"                ></p>]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
            <tag> Flask </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Python Flask使用WSGI server</title>
      <link href="/2023/01/10/Python-Flask%E4%BD%BF%E7%94%A8WSGI-server/"/>
      <url>/2023/01/10/Python-Flask%E4%BD%BF%E7%94%A8WSGI-server/</url>
      
        <content type="html"><![CDATA[<p>Flask运行后有以下WARNING提示：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">WARNING: Do not use the development server <span class="keyword">in</span> a production environment.Use a production WSGI server instead.</span><br></pre></td></tr></table></figure><p>上面只是警告，不管继续用也是可以的。它的意思是Flask 的默认服务器是在开发环境中使用的，仅供开发测试。然后Flask配置默认是生产环境，所以建议用生产级的WSGI服务器代替。</p><a id="more"></a><p>原来的代码是这样的：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">……</span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    app.run(<span class="string">&#x27;0.0.0.0&#x27;</span>, port=<span class="number">5000</span>, debug=<span class="literal">True</span>)</span><br></pre></td></tr></table></figure><p><strong>解决方法：</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># pip install gevent</span></span><br><span class="line"><span class="keyword">from</span> gevent.pywsgi <span class="keyword">import</span> WSGIServer</span><br><span class="line">……</span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    <span class="comment"># 原来用：app.run(&#x27;0.0.0.0&#x27;, port=5000, debug=True)</span></span><br><span class="line">    http_server = WSGIServer((<span class="string">&#x27;0.0.0.0&#x27;</span>, <span class="number">5000</span>), app)</span><br><span class="line">    http_server.serve_forever()</span><br></pre></td></tr></table></figure><p>再运行后发现不像原来有这样一堆提示，但直接打开 <a class="link"   href="http://127.0.0.1:5000/" >http://127.0.0.1:5000/<i class="fas fa-external-link-alt"></i></a> 也是可以访问的。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">* Serving Flask app <span class="string">&quot;app&quot;</span> (lazy loading)</span><br><span class="line">* Environment: production</span><br><span class="line">WARNING: Do not use the development server <span class="keyword">in</span> a production environment.Use a production wSGI server instead.</span><br><span class="line">* Debug mode: on</span><br><span class="line">* Restarting with <span class="built_in">stat</span></span><br><span class="line">* Debugger is active!</span><br><span class="line">* Debugger PIN:146-032-183</span><br><span class="line">* Running on http://127.0.0.1:5000/ (Press CTRL+C to quit)</span><br></pre></td></tr></table></figure><p>PS.Flask 的开发服务器是 Werkzeug 设计的，便于测试，但不是那么的高效、稳定或安全。所以想投入生产环境，还是首选 WSGI 服务器。</p>]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
            <tag> Flask </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Docker Dockerfile制作Gitbook镜像</title>
      <link href="/2023/01/10/Docker-Dockerfile%E5%88%B6%E4%BD%9CGitbook%E9%95%9C%E5%83%8F/"/>
      <url>/2023/01/10/Docker-Dockerfile%E5%88%B6%E4%BD%9CGitbook%E9%95%9C%E5%83%8F/</url>
      
        <content type="html"><![CDATA[<p>上一篇文章用Docker搭建了Gitbook的环境：<a href="/2023/01/10/Docker%E6%90%AD%E5%BB%BAGitbook/" title="Docker搭建Gitbook">Docker搭建Gitbook</a>，然后发现个小问题，问题不大，不过感觉Gitbook的版本实在太低了。</p><p>毕竟是7年前的镜像了，用<code>gitbook -V</code>查看了下gitbook的版本，竟然是：0.3.4</p><p>于是，决定还是自己用Dockerfile制作个Gitbook的镜像好了。</p><p>自己用Dockerfile制作镜像也挺方便的，参考：<a href="/2022/05/29/Docker-Dockerfile%E6%96%87%E4%BB%B6%E8%AF%A6%E8%A7%A3%EF%BC%88%E5%88%B6%E4%BD%9C%E8%87%AA%E5%B7%B1%E7%9A%84%E9%95%9C%E5%83%8F%EF%BC%89/" title="Docker Dockerfile文件详解（制作自己的镜像）">Docker Dockerfile文件详解（制作自己的镜像）</a></p><p>也就是第一次生成镜像的时候花点时间。</p><a id="more"></a><h2 id="一、制作Gitbook镜像"><a href="#一、制作Gitbook镜像" class="headerlink" title="一、制作Gitbook镜像"></a>一、制作Gitbook镜像</h2><h3 id="1-Dockerfile文件"><a href="#1-Dockerfile文件" class="headerlink" title="1.Dockerfile文件"></a>1.Dockerfile文件</h3><p>node的版本反正用12点几的还是有问题，索性降到8，反正是没问题的。</p><p>因为我只是需要环境，并不是直接就生成电子书了，所以最后的CMD的命令也不需要执行。</p><p>Dockerfile文件内容如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"># Use an official Node.js runtime as a parent image</span><br><span class="line">FROM node:8.11.1</span><br><span class="line"></span><br><span class="line"># creates a directory with this name if it doesn’t exist</span><br><span class="line"># WORKDIR：设置容器启动后的默认运行目录 &#x2F;gitbook</span><br><span class="line">WORKDIR &#x2F;gitbook</span><br><span class="line"></span><br><span class="line"># Set npm registry to China Taobao and install Gitbook</span><br><span class="line">RUN npm config set registry https:&#x2F;&#x2F;registry.npm.taobao.org</span><br><span class="line">RUN npm install gitbook-cli -g</span><br><span class="line">RUN gitbook -V</span><br><span class="line"></span><br><span class="line"># Make port 4000 available to the world outside this container</span><br><span class="line">EXPOSE 4000</span><br><span class="line"></span><br><span class="line"># CMD [&quot;sh&quot;, &quot;-c&quot;, &quot;gitbook install &#x2F;gitbook; gitbook serve &#x2F;gitbook&quot;]</span><br></pre></td></tr></table></figure><h3 id="2-生成镜像"><a href="#2-生成镜像" class="headerlink" title="2.生成镜像"></a>2.生成镜像</h3><p>因为有本地安装过，所以知道现在的gitbook版本是：3.2.3，不确定的话，这里的版本号自己看着写吧。自己编一个差不多的也行。</p><p>注意最后有个点表示当前目录，所以需要在Dockerfile文件所在的目录下运行此命令。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker build -t gitbook:3.2.3 .</span><br></pre></td></tr></table></figure><p>等待制作完成，估计需要几分钟。完成后用命令<code>docker images</code>就可以看到 gitbook:3.2.3 这个镜像了。</p><h2 id="二、运行Gitbook容器"><a href="#二、运行Gitbook容器" class="headerlink" title="二、运行Gitbook容器"></a>二、运行Gitbook容器</h2><h3 id="1-运行Gitbook容器"><a href="#1-运行Gitbook容器" class="headerlink" title="1.运行Gitbook容器"></a>1.运行Gitbook容器</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run -idt --name gitbook_cs -p 14001:4000 -v E:\SynologyDrive\Gitbook\cs_gitbook:/gitbook gitbook:3.2.3 /bin/bash</span><br></pre></td></tr></table></figure><blockquote><p>–name gitbook_cs：容器名称，自己取<br>-p 14001:4000：把容器中的4000端口映射到本地14001端口，这个也随意</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 进入容器</span></span><br><span class="line">docker <span class="built_in">exec</span> -it gitbook_cs /bin/bash</span><br><span class="line"></span><br><span class="line"><span class="comment"># 初始化，会生成README.md 和SUMMARY.md文件</span></span><br><span class="line">gitbook init</span><br><span class="line"></span><br><span class="line"><span class="comment"># 编辑README.md 和SUMMARY.md文件后再次执行，生成目录、文件</span></span><br><span class="line">gitbook init</span><br><span class="line"></span><br><span class="line"><span class="comment"># 启动服务，在线预览，打开 http://localhost:14001 就可以看到了</span></span><br><span class="line">gitbook serve</span><br></pre></td></tr></table></figure><h3 id="2-Error：no-such-file-fontsettings-js"><a href="#2-Error：no-such-file-fontsettings-js" class="headerlink" title="2.Error：no such file fontsettings.js"></a>2.Error：no such file fontsettings.js</h3><p>这个报错不一定会有，我用Win10装的Docker里有这个问题，用Ubuntu20.04 LTS的服务器上也是Docker里装，就没碰到这个报错。</p><p>执行<code>gitbook serve</code>或<code>gitbook build</code>都会报错：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Error: ENOENT: no such file or directory, <span class="built_in">stat</span> <span class="string">&#x27;***/_book/gitbook/gitbook-plugin-fontsettings/fontsettings.js&#x27;</span></span><br></pre></td></tr></table></figure><p><strong>解决方法：</strong></p><p>找到<code>/root/.gitbook/versions/3.2.3/lib/output/website/copyPluginAssets.js</code>文件：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">return</span> fs.copyDir(</span><br><span class="line">    assetsFolder,</span><br><span class="line">    assetOutputFolder,</span><br><span class="line">    &#123;</span><br><span class="line">        deleteFirst: <span class="literal">false</span>,</span><br><span class="line">        overwrite: <span class="literal">true</span>,</span><br><span class="line">        confirm: <span class="literal">true</span></span><br><span class="line">    &#125;</span><br><span class="line">);</span><br></pre></td></tr></table></figure><p>把<code>confirm: true</code>修改为<code>confirm: false</code>，注意有2处！</p><p>这个文件的路径中有个gitbook的版本号，找对应的版本号。可先在容器内查看找到此文件。</p><p>因为用的Docker，所以使用 Docker 容器修改方法如下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 1.把copyPluginAssets.js文件从容器中拷到当前目录下</span></span><br><span class="line">docker cp gitbook_cs:/root/.gitbook/versions/3.2.3/lib/output/website/copyPluginAssets.js ./copyPluginAssets.js</span><br><span class="line"></span><br><span class="line"><span class="comment"># 2.按上面的方法修改copyPluginAssets.js文件</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 3.再把修改后的copyPluginAssets.js文件覆盖容器内的文件</span></span><br><span class="line">docker cp copyPluginAssets.js gitbook_cs:/root/.gitbook/versions/3.2.3/lib/output/website/copyPluginAssets.js</span><br></pre></td></tr></table></figure><p>再执行<code>gitbook serve</code>就没问题啦。</p>]]></content>
      
      
      <categories>
          
          <category> Docker </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Docker </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Docker搭建Gitbook</title>
      <link href="/2023/01/10/Docker%E6%90%AD%E5%BB%BAGitbook/"/>
      <url>/2023/01/10/Docker%E6%90%AD%E5%BB%BAGitbook/</url>
      
        <content type="html"><![CDATA[<p>在网上看到用Gitbook写的教程/文档，感觉还挺方便看的，想用它来试一下写教程/电子书之类的。</p><p>看到安装Gitbook还挺方便的，跟Hexo一样（用的就是Hexo的博客），是一个基于Node.js 的命令行工具，可使用Github/Git 和Markdown 来制作精美的电子书。</p><p>于是，原来都装好了Node.js和git这些，感觉倒也方便，安装下Gitbook就行了。</p><p>谁料，是我年轻了，想的太简单了。</p><a id="more"></a><h2 id="Gitbook直接安装方法"><a href="#Gitbook直接安装方法" class="headerlink" title="Gitbook直接安装方法"></a>Gitbook直接安装方法</h2><p>前提是已经安装了Node.js。然后用以下命令能安装上，是很方便了。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 1.安装 gitbook-cli</span></span><br><span class="line">npm install -g gitbook-cli</span><br><span class="line"></span><br><span class="line"><span class="comment"># 2.版本，这里开始出问题，GitBook installing开始报错</span></span><br><span class="line"><span class="comment"># 然后修改了报错的polyfills.js文件，注释掉62~64行这3行内容，才成功安装</span></span><br><span class="line">gitbook -V</span><br><span class="line"><span class="comment"># 结果如下：</span></span><br><span class="line"><span class="comment"># CLI version: 2.3.2</span></span><br><span class="line"><span class="comment"># GitBook version: 3.2.3</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 3.创建目录，初始化</span></span><br><span class="line">mkdir gitbook-test</span><br><span class="line"><span class="built_in">cd</span> gitbook-test</span><br><span class="line">gitbook init</span><br><span class="line"><span class="comment"># 结果报错：</span></span><br><span class="line"><span class="comment"># TypeError [ERR_INVALID_ARG_TYPE]: The &quot;data&quot; argument must be of type string or an instance of Buffer, ……</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看Node.js版本，v14.15.4</span></span><br><span class="line">node -v</span><br></pre></td></tr></table></figure><p>好家伙，前面那个问题好不容易解决，init初始化的时候还是挂了。然后查看下Node.js的版本，反正就是版本过高的问题，要么再安装个低版本的，但环境问题真是折腾人，就放弃了。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 卸载Gitbook</span></span><br><span class="line"><span class="comment"># 1.找到C:\Users\&#123;用户名&#125;\.gitbook目录，删除</span></span><br><span class="line"><span class="comment"># 2.卸载</span></span><br><span class="line">npm uninstall -g gitbook-cli</span><br><span class="line"><span class="comment"># 3.清除npm缓存</span></span><br><span class="line">npm cache clean -f</span><br></pre></td></tr></table></figure><h2 id="Docker搭建Gitbook"><a href="#Docker搭建Gitbook" class="headerlink" title="Docker搭建Gitbook"></a>Docker搭建Gitbook</h2><p>不想折腾环境，就开始找Docker安装的方法。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 1.拉取镜像 https://hub.docker.com/r/tobegit3hub/gitbook-server</span></span><br><span class="line">docker pull tobegit3hub/gitbook-server</span><br><span class="line"></span><br><span class="line"><span class="comment"># 2.创建目录 python\gitbook，回头用来作映射的</span></span><br><span class="line">mkdir gitbook</span><br><span class="line"></span><br><span class="line"><span class="comment"># 3.创建容器</span></span><br><span class="line">docker run -idt --name gitbook -p 14000:4000 -v E:\SynologyDrive\Gitbook\python\gitbook:/gitbook tobegit3hub/gitbook-server /bin/bash</span><br><span class="line"></span><br><span class="line"><span class="comment"># 4.进入容器</span></span><br><span class="line">docker <span class="built_in">exec</span> -it gitbook /bin/bash</span><br><span class="line"></span><br><span class="line"><span class="comment"># 5.进入容器后，默认是在/gitbook目录，用以下命令初始化</span></span><br><span class="line"><span class="comment"># 初始化后会在本地的gitbook映射目录下生成README.md和SUMMARY.md文件。</span></span><br><span class="line">gitbook init</span><br></pre></td></tr></table></figure><p><strong>6.编辑SUMMARY.md和README.md文件</strong></p><p>比如SUMMARY.md文件内容如下（README.md文件随便写点内容）：</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="section"># Summary</span></span><br><span class="line"></span><br><span class="line"><span class="bullet">*</span> [<span class="string">简介</span>](<span class="link">README.md</span>)</span><br><span class="line"><span class="bullet">*</span> [<span class="string">前言</span>](<span class="link">README.md</span>)</span><br><span class="line"><span class="bullet">*</span> [<span class="string">第一章</span>](<span class="link">part1/README.md</span>)</span><br><span class="line"><span class="bullet">    *</span> [<span class="string">第一节</span>](<span class="link">part1/1.md</span>)</span><br><span class="line"><span class="bullet">    *</span> [<span class="string">第二节</span>](<span class="link">part1/2.md</span>)</span><br><span class="line"><span class="bullet">    *</span> [<span class="string">第三节</span>](<span class="link">part1/3.md</span>)</span><br><span class="line"><span class="bullet">    *</span> [<span class="string">第四节</span>](<span class="link">part1/4.md</span>)</span><br><span class="line"><span class="bullet">*</span> [<span class="string">第二章</span>](<span class="link">part2/README.md</span>)</span><br><span class="line"><span class="bullet">*</span> [<span class="string">第三章</span>](<span class="link">part3/README.md</span>)</span><br><span class="line"><span class="bullet">*</span> [<span class="string">第四章</span>](<span class="link">part4/README.md</span>)</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 7.再次执行init</span></span><br><span class="line"><span class="comment"># 会发现安照SUMMARY.md文件的内容自动生成对应的目录结构和md文件</span></span><br><span class="line">gitbook init</span><br><span class="line"></span><br><span class="line"><span class="comment"># 8.启动服务，在线预览（会生成 _book目录，静态HTML）</span></span><br><span class="line"><span class="comment"># 然后打开 http://localhost:14000 就可以看到电子书了（我把4000端口映射到14000了）</span></span><br><span class="line">gitbook serve</span><br><span class="line"></span><br><span class="line"><span class="comment"># Gitbook输出格式</span></span><br><span class="line"><span class="comment"># 1).输出静态HTML页面，生成 _book 目录；</span></span><br><span class="line"><span class="comment"># 也可以用参数指定目录名：gitbook build ./ --output=./_book/</span></span><br><span class="line">gitbook build</span><br><span class="line"><span class="comment"># 2).输出PDF文件</span></span><br><span class="line">gitbook pdf</span><br></pre></td></tr></table></figure><p><strong>9.文件权限问题</strong></p><p>如果是直接在本机上映射的目录里的文件直接编辑就行，就没啥问题。</p><p>但如果我是在Linux的服务器上用Docker建了gitbook容器的，映射的目录是在Linux的机器上，<br>然后我是本地编辑好了，再上传到Linux服务器的映射目录里，然后就有文件权限问题了。</p><p>比如修改完的 SUMMARY.md 文件上传想覆盖原来的文件，就报权限问题了。</p><p>所以直接在Linux服务器的映射目录下执行<code>chmod 777 *</code>命令，把权限都给了就行。</p><p><strong>10.插入图片</strong></p><p>如果需要插入图片的，建议使用相对路径，很方便。</p><p>直接在 <code>python\gitbook</code> 目录下建一个imgs目录，用于存放图片。</p><p>比如我在imgs目录下放了一张图片：gitbook.png<br>然后用Markdown语法使用就行：<br><code>![](\imgs\gitbook.png)</code></p><p>或者：<br><code>&lt;img src=&quot;/imgs/gitbook.png&quot; style=&quot;zoom: 75%;&quot;/&gt;</code></p><p>后面这种还可以按比例显示，反正写Hexo博客时，我就一直偏爱用后者。</p><p><strong>11.配置文件book.json</strong></p><p>在<code>python\gitbook</code> 目录下自己建个book.json文件。</p><p>内容一般就标题、作者这些，比如：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attr">&quot;title&quot;</span>: <span class="string">&quot;GitBook学习笔记&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;description&quot;</span>: <span class="string">&quot;记录Gitbook的配置和一些插件的使用&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;author&quot;</span>: <span class="string">&quot;hduzn&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;language&quot;</span>: <span class="string">&quot;zh-hans&quot;</span>,</span><br><span class="line"><span class="attr">&quot;gitbook&quot;</span>: <span class="string">&quot;3.2.3&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;links&quot;</span>: &#123;</span><br><span class="line">        <span class="attr">&quot;sidebar&quot;</span> : &#123;</span><br><span class="line">            <span class="attr">&quot;Home&quot;</span> : <span class="string">&quot;https://www.hduzn.cn/&quot;</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>配置文件中更多的内容，网上搜一下就有。</p><p>PS.如果跟我一样，嫌弃gitbook的版本太旧了，可以考虑自己制作下Gitbook的镜像：<a href="/2023/01/10/Docker-Dockerfile%E5%88%B6%E4%BD%9CGitbook%E9%95%9C%E5%83%8F/" title="Docker Dockerfile制作Gitbook镜像">Docker Dockerfile制作Gitbook镜像</a></p>]]></content>
      
      
      <categories>
          
          <category> Docker </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Docker </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Docker Desktp更改镜像、容器存储位置</title>
      <link href="/2023/01/09/Docker-Desktp%E6%9B%B4%E6%94%B9%E9%95%9C%E5%83%8F-%E5%AE%B9%E5%99%A8%E5%AD%98%E5%82%A8%E4%BD%8D%E7%BD%AE/"/>
      <url>/2023/01/09/Docker-Desktp%E6%9B%B4%E6%94%B9%E9%95%9C%E5%83%8F-%E5%AE%B9%E5%99%A8%E5%AD%98%E5%82%A8%E4%BD%8D%E7%BD%AE/</url>
      
        <content type="html"><![CDATA[<p>Docker用的多一点，特别是装了一个几十G的Linux后 ，就好几十G空间了，太占用系统盘了。所以想换一下存储位置。</p><p>Docker Desktop查看settings设置，发现无法在设置里更改，用的是WSL2。通过WSL2启动，会自动创建2个子系统，分别对应2个 vhdx 硬盘映像文件。</p><p>默认安装在C盘，默认的镜像容器这些存储在：C:\Users[用户名]\AppData\Local\Docker\wsl\，分别在data和distro目录下都有个ext4.vhdx文件。（特别是data目录下文件，就巨大）</p><blockquote><p>WSL全称：Windows Subsystem for Linux，即「适用于 Linux 的 Windows 子系统」，可让开发人员按原样运行 GNU/Linux 环境 – 包括大多数命令行工具、实用工具和应用程序 – 且不会产生传统虚拟机（a traditional virtual machine）或双启动设置开销。</p></blockquote><a id="more"></a><p><strong>步骤：</strong></p><p><strong>1.查看WSL2自建的2个子系统</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 查看WSL2自建的2个子系统</span></span><br><span class="line">wsl --list -v</span><br></pre></td></tr></table></figure><p>可以看到结果有2个：docker-desktop-data和docker-desktop，同时还能看到STATE（状态）是Running或者Stopped。</p><p><strong>2.关闭WSL</strong></p><p>直接右键退出 Docker Desktop软件。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 退出后再次运行查看STATE（状态）是否是Stopped</span></span><br><span class="line">wsl --list -v</span><br><span class="line"></span><br><span class="line"><span class="comment"># 若退出后还是Running，运行以下命令关闭WSL</span></span><br><span class="line">wsl --shutdown</span><br></pre></td></tr></table></figure><p><strong>3.导出镜像ext4.vhdx到压缩包</strong></p><p>导出的路径需要提前创建好目录，否则可能会报错。<br>比如我这里提前建好了<code>E:\docker\wsl</code>，以及wsl下的data和distro目录。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 把 data\ext4.vhdx 导出到压缩文件 docker-desktop-data.tar</span></span><br><span class="line">wsl --<span class="built_in">export</span> docker-desktop-data E:\docker\wsl\docker-desktop-data.tar</span><br><span class="line"></span><br><span class="line"><span class="comment"># 把 distro\ext4.vhdx 导出到压缩文件 docker-desktop.tar</span></span><br><span class="line">wsl --<span class="built_in">export</span> docker-desktop E:\docker\wsl\docker-desktop.tar</span><br></pre></td></tr></table></figure><p><strong>4.注销原来的镜像</strong></p><p>依次注销，注销完成后可以看到原来C盘的2个ext4.vhdx文件都没了。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">wsl --unregister docker-desktop-data</span><br><span class="line"></span><br><span class="line">wsl --unregister docker-desktop</span><br></pre></td></tr></table></figure><p><strong>5.将导出的压缩包再导入回wsl，并设置挂载目录</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">wsl --import docker-desktop-data E:\docker\wsl\data  E:\docker\wsl\docker-desktop-data.tar --version 2</span><br><span class="line"></span><br><span class="line">wsl --import docker-desktop E:\docker\wsl\distro  E:\docker\wsl\docker-desktop.tar --version 2</span><br></pre></td></tr></table></figure><p>依次执行完后，在目录下又可以看到ext4.vhdx文件了，再启动Docker Desktop，就正常了。</p><p>压缩包docker-desktop-data.tar和docker-desktop.tar正常启动以后就不需要了，可以删除了。</p>]]></content>
      
      
      <categories>
          
          <category> Docker </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Docker </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Python md5加密（哈希加密）</title>
      <link href="/2023/01/07/Python-md5%E5%8A%A0%E5%AF%86%EF%BC%88%E5%93%88%E5%B8%8C%E5%8A%A0%E5%AF%86%EF%BC%89/"/>
      <url>/2023/01/07/Python-md5%E5%8A%A0%E5%AF%86%EF%BC%88%E5%93%88%E5%B8%8C%E5%8A%A0%E5%AF%86%EF%BC%89/</url>
      
        <content type="html"><![CDATA[<p>MD5是一种旧的哈希算法，Python 内置的 hashlib 库就可以实现 MD5 哈希加密。</p><p>一般自己用的话，就用来保存密码到数据库，密码用md5加密下再存进数据库。</p><a id="more"></a><h2 id="md5加密"><a href="#md5加密" class="headerlink" title="md5加密"></a>md5加密</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> hashlib</span><br><span class="line"></span><br><span class="line"><span class="comment"># md5加密</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">md5_hash</span>(<span class="params"><span class="built_in">str</span></span>):</span></span><br><span class="line">    <span class="comment"># 创建md5对象</span></span><br><span class="line">    new_md5 = hashlib.md5()</span><br><span class="line">    <span class="comment"># 这里必须用encode()函数对字符串进行编码</span></span><br><span class="line">    new_md5.update(<span class="built_in">str</span>.encode(encoding=<span class="string">&#x27;utf-8&#x27;</span>))</span><br><span class="line">    <span class="keyword">return</span> new_md5.hexdigest()</span><br><span class="line"></span><br><span class="line"><span class="comment"># md5加密</span></span><br><span class="line"><span class="built_in">str</span> = <span class="string">&#x27;1234&#x27;</span></span><br><span class="line">str_md5 = md5_hash(<span class="built_in">str</span>)</span><br><span class="line"><span class="built_in">print</span>(str_md5) <span class="comment"># 81dc9bdb52d04dc20036dbd8313ed055</span></span><br></pre></td></tr></table></figure><h2 id="sha-256加密"><a href="#sha-256加密" class="headerlink" title="sha-256加密"></a>sha-256加密</h2><p>md5这种加密算法，已被认为不安全。推荐使用更安全的算法，比如sha-256或更高版本。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> hashlib</span><br><span class="line"></span><br><span class="line"><span class="comment"># sha-256加密</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">sha256_hash</span>(<span class="params"><span class="built_in">str</span></span>):</span></span><br><span class="line">    new_str = hashlib.sha256()</span><br><span class="line">    new_str.update(<span class="built_in">str</span>.encode(<span class="string">&#x27;utf-8&#x27;</span>))</span><br><span class="line">    <span class="keyword">return</span> new_str.hexdigest()</span><br><span class="line"></span><br><span class="line"><span class="comment"># sha-256加密</span></span><br><span class="line"><span class="built_in">print</span>(sha256_hash(<span class="built_in">str</span>)) <span class="comment"># 03ac674216f3e15c761ee1a5e255f067953623c8b388b4459e13f978d7c846f4</span></span><br></pre></td></tr></table></figure><p>md5：32个字符的十六进制字符串<br>sha256：64个字符的十六进制字符串</p>]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Python pandas统计Excel表中人名次数</title>
      <link href="/2023/01/07/Python-pandas%E7%BB%9F%E8%AE%A1Excel%E8%A1%A8%E4%B8%AD%E4%BA%BA%E5%90%8D%E6%AC%A1%E6%95%B0/"/>
      <url>/2023/01/07/Python-pandas%E7%BB%9F%E8%AE%A1Excel%E8%A1%A8%E4%B8%AD%E4%BA%BA%E5%90%8D%E6%AC%A1%E6%95%B0/</url>
      
        <content type="html"><![CDATA[<p>比如用钉钉的智能填表做投票优秀员工，得到了以下这样一份表格数据：</p><img                       lazyload                     src="/images/loading.svg"                     data-src="/img/Python_pandas_ex_count_1.png"                      style="zoom: 50%;"                ><p>每个人投了3个优秀员工，当然，这里是举例，3个可能还好拆，如果是10、个20个呢？然后有几百人投票的话，这个统计次数就有点麻烦。</p><p>对于这样在Excel表格中，一个单元格中有多项内容的统计，在Excel中当然也可以处理，这里会Python的话，介绍用pandas这个库，就超级简单了。</p><a id="more"></a><p><strong>思路：</strong></p><ul><li>1.从Excel中读取 “优秀员工”这一列数据；</li><li>2.把数据处理成一个List，类似这样：[‘张三’, ‘李四’, ‘李四’, ‘张三’]；</li><li>3.统计List中每一项的次数，并把结果写入Excel统计结果表中。</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">ceping_count</span>(<span class="params">ex_file, output_file</span>):</span></span><br><span class="line">    <span class="comment"># 1.从Excel读取</span></span><br><span class="line">    usecols = [<span class="string">&#x27;优秀员工&#x27;</span>]</span><br><span class="line">    sheet_name = <span class="string">&#x27;Sheet1&#x27;</span> <span class="comment"># sheet名</span></span><br><span class="line">    df = pd.read_excel(ex_file, sheet_name=sheet_name, usecols=usecols)</span><br><span class="line">    data_list = np.array(df).tolist() <span class="comment"># 把数据转为List</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 2.处理数据</span></span><br><span class="line">    result_list = [] <span class="comment"># 一列数据</span></span><br><span class="line">    <span class="keyword">for</span> data <span class="keyword">in</span> data_list:</span><br><span class="line">        <span class="built_in">str</span> = data[<span class="number">0</span>]</span><br><span class="line">        new_list = <span class="built_in">str</span>.split(<span class="string">&#x27;,&#x27;</span>)</span><br><span class="line">        result_list = result_list + new_list</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 3.写入Excel</span></span><br><span class="line">    <span class="keyword">if</span> os.path.exists(output_file):</span><br><span class="line">        os.remove(output_file)</span><br><span class="line">    result = pd.value_counts(result_list) <span class="comment"># 统计列表中每项的次数</span></span><br><span class="line">    <span class="comment"># print(type(result)) # &lt;class &#x27;pandas.core.series.Series&#x27;&gt;</span></span><br><span class="line">    result.to_excel(output_file)</span><br><span class="line"></span><br><span class="line">ceping_count(<span class="string">&#x27;民主测评.xlsx&#x27;</span>, <span class="string">&#x27;测评-统计.xlsx&#x27;</span>)</span><br></pre></td></tr></table></figure><p>结果如下图（默认排序都降序排好了，改一下标题就行了）：<br><img                       lazyload                     src="/images/loading.svg"                     data-src="/img/Python_pandas_ex_count_2.png"                      style="zoom: 100%;"                ></p>]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
            <tag> Excel </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Docker可视化查询工具：Lazydocker（Ubuntu安装使用）</title>
      <link href="/2022/12/29/Docker%E5%8F%AF%E8%A7%86%E5%8C%96%E6%9F%A5%E8%AF%A2%E5%B7%A5%E5%85%B7%EF%BC%9ALazydocker/"/>
      <url>/2022/12/29/Docker%E5%8F%AF%E8%A7%86%E5%8C%96%E6%9F%A5%E8%AF%A2%E5%B7%A5%E5%85%B7%EF%BC%9ALazydocker/</url>
      
        <content type="html"><![CDATA[<p>Windows这些有界面的系统，装个Docker Desktop就可以对Docker进行可视化操作、管理。</p><p>像Linux的服务器系统，只有命令行，没有带界面的，每次查看Docker的使用情况，基本上就先用<code>docker images</code>查看有哪些镜像，再用<code>docker ps -a</code>查看有哪些容器和容器的运行状态。</p><p>看到 Lazydocker 这个开源的UI终端，支持Linux、OSX、Windows操作系统。用命令就可以运行，界面很简洁的，就日常查看下状态够用了。</p><a id="more"></a><h2 id="Lazydocker安装使用（Ubuntu）"><a href="#Lazydocker安装使用（Ubuntu）" class="headerlink" title="Lazydocker安装使用（Ubuntu）"></a>Lazydocker安装使用（Ubuntu）</h2><p>Lazydocker项目地址：<a class="link"   href="https://github.com/jesseduffield/lazydocker" >https://github.com/jesseduffield/lazydocker<i class="fas fa-external-link-alt"></i></a></p><p>项目地址上安装方法也分好几种。这里介绍在Ubuntu中使用方法。</p><p>系统：Ubuntu 20.04 LTS</p><p><strong>1.下载Lazydocker包</strong></p><p>先去releases页面，下载最新的Lazydocker包：<br><a class="link"   href="https://github.com/jesseduffield/lazydocker/releases" >https://github.com/jesseduffield/lazydocker/releases<i class="fas fa-external-link-alt"></i></a></p><p>看自己哪个系统需要哪个，我这下载的是：lazydocker_0.20.0_Linux_x86_64.tar.gz</p><p>用防止github的访问问题，可以像我一样下载后用ftp工具上传到Ubuntu服务器。</p><p>当然，能下载的话，也可以直接用wget或者curl下载。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># curl下载保存为lazydocker_0.20.0.tar.gz，试了下 ，速度好慢</span></span><br><span class="line">curl -Lo lazydocker_0.20.0.tar.gz <span class="string">&quot;https://github.com/jesseduffield/lazydocker/releases/download/v0.20.0/lazydocker_0.20.0_Linux_x86_64.tar.gz&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># wget下载</span></span><br><span class="line">wget https://github.com/jesseduffield/lazydocker/releases/download/v0.20.0/lazydocker_0.20.0_Linux_x86_64.tar.gz</span><br></pre></td></tr></table></figure><p><strong>2.解压Lazydocker包</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">tar xf lazydocker_0.20.0_Linux_x86_64.tar.gz</span><br><span class="line"></span><br><span class="line"><span class="comment"># 如果想解压到某个目录，可以先创建个目录，反正最后其它的都可以删除的</span></span><br><span class="line">mkdir lazydocker-temp</span><br><span class="line">tar xf lazydocker_0.20.0_Linux_x86_64.tar.gz -C lazydocker-temp</span><br></pre></td></tr></table></figure><p><strong>3.把lazydocker（可执行文件）移动到用户可执行程序目录下</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 解压出来的lazydocker可以用ls -l命令看是，是否有带x可执行权限，现在新版本应该都有的</span></span><br><span class="line">sudo mv lazydocker /usr/<span class="built_in">local</span>/bin</span><br><span class="line"></span><br><span class="line"><span class="comment"># 如果是放在lazydocker-temp目录的，用以下命令</span></span><br><span class="line">sudo mv lazydocker-temp/lazydocker /usr/<span class="built_in">local</span>/bin</span><br></pre></td></tr></table></figure><p><strong>4.使用lazydocker</strong></p><p>直接运行命令就行了。这就跟在windows系统里放了一个.exe的小程序一样。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">lazydocker</span><br></pre></td></tr></table></figure><p>如下图所示：能看到所有的容器、镜像、还有数据卷Volumes。按q键退出。<br><img                       lazyload                     src="/images/loading.svg"                     data-src="/img/Docker_lazydocker.png"                      style="zoom: 50%;"                ></p><p>如果觉得<code>lazydocker</code>这个命令太长了，项目文档上也说了可以取一个命令别名，方便使用：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">echo</span> <span class="string">&quot;alias lzd=&#x27;lazydocker&#x27;&quot;</span> &gt;&gt; ~/.zshrc</span><br><span class="line"><span class="built_in">source</span> ~/.zshrc</span><br></pre></td></tr></table></figure><p>然后，就可以直接用<code>lzd</code>命令代替<code>lazydocker</code>命令了。</p><p>PS.解压出来还有一个LICENSE和README.md文件都可以删除，如果是解压到lazydocker-temp目录的话，整个目录都可以删除。压缩包不想留着也可以删除。</p>]]></content>
      
      
      <categories>
          
          <category> Docker </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Docker </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>换硬盘后Python虚拟环境virtualenv迁移方法</title>
      <link href="/2022/12/26/%E6%8D%A2%E7%A1%AC%E7%9B%98%E5%90%8EPython%E8%99%9A%E6%8B%9F%E7%8E%AF%E5%A2%83virtualenv%E8%BF%81%E7%A7%BB%E6%96%B9%E6%B3%95/"/>
      <url>/2022/12/26/%E6%8D%A2%E7%A1%AC%E7%9B%98%E5%90%8EPython%E8%99%9A%E6%8B%9F%E7%8E%AF%E5%A2%83virtualenv%E8%BF%81%E7%A7%BB%E6%96%B9%E6%B3%95/</url>
      
        <content type="html"><![CDATA[<p>关于Python使用虚拟环境virtualenv的方法，可以看之前这篇笔记：<a href="/2022/09/20/VSCode%E8%BF%90%E8%A1%8CPython%E8%99%9A%E6%8B%9F%E7%8E%AF%E5%A2%83virtualenv/" title="VSCode运行Python虚拟环境virtualenv">VSCode运行Python虚拟环境virtualenv</a></p><p>换了硬盘后，要迁移virtualenv也很方便。先把虚拟环境的整个目录（比如我是Envs）放在硬盘任意一处。</p><a id="more"></a><h2 id="迁移步骤"><a href="#迁移步骤" class="headerlink" title="迁移步骤"></a>迁移步骤</h2><h3 id="1-确认virtualenv正常"><a href="#1-确认virtualenv正常" class="headerlink" title="1.确认virtualenv正常"></a>1.确认virtualenv正常</h3><p>因为我只是换了数据盘，没有动系统盘这块硬盘，所以我的Python和virtualenv都是安装好的。</p><p>通过以下命令检查：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 查看python版本</span></span><br><span class="line">python --version</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看virtualenv版本</span></span><br><span class="line">virtualenv --version</span><br></pre></td></tr></table></figure><p>如果硬盘全部换掉了，就先重新安装相同版本的Python，和再安装虚拟环境virtualenv就行。</p><h3 id="2-修改虚拟环境的系统环境变量值"><a href="#2-修改虚拟环境的系统环境变量值" class="headerlink" title="2.修改虚拟环境的系统环境变量值"></a>2.修改虚拟环境的系统环境变量值</h3><p>原来创建的系统环境变量：</p><blockquote><p>变量名：WORKON_HOME<br>变量值：G:\SynologyDrive\Python\Envs</p></blockquote><p>只需要把值变成现在的Envs路径就行。</p><p>因为mkvirtualenv.bat 文件(Windows)中用的是<code>%WORKON_HOME%</code>这个变量名 ，所以不需要修改，只需要直接改系统变量的值就行了。</p><h3 id="3-创建与原虚拟环境同名的虚拟环境"><a href="#3-创建与原虚拟环境同名的虚拟环境" class="headerlink" title="3.创建与原虚拟环境同名的虚拟环境"></a>3.创建与原虚拟环境同名的虚拟环境</h3><p>比如原来叫flask_py的，再创建一个同名的就行。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mkvirtualenv flask_py</span><br></pre></td></tr></table></figure><h3 id="4-把原硬盘虚拟环境中对应的目录覆盖"><a href="#4-把原硬盘虚拟环境中对应的目录覆盖" class="headerlink" title="4.把原硬盘虚拟环境中对应的目录覆盖"></a>4.把原硬盘虚拟环境中对应的目录覆盖</h3><p>把原来虚拟环境中flask_py这个目录全部覆盖新创建的目录下的文件就行。</p><p>如果有多个的话，可以一起创建好之后，全部一起覆盖就行了。</p><p>在VS Code中使用，也只需要重新选择下运行的解释器。</p>]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Windows PowerShell 使用代理</title>
      <link href="/2022/12/18/windows-PowerShell%E4%BD%BF%E7%94%A8%E4%BB%A3%E7%90%86/"/>
      <url>/2022/12/18/windows-PowerShell%E4%BD%BF%E7%94%A8%E4%BB%A3%E7%90%86/</url>
      
        <content type="html"><![CDATA[<p>比如我用v2rayN设置好了代理，在Windows Powershell里也想用的话。</p><p>v2rayN软件左下角可以看到：</p><blockquote><p>socks 127.0.0.1:10808<br>http 127.0.0.1:10809<br>默认socks是1080（比较容易与其它端口，自己换一个就行），然后http的是默认加1的。</p></blockquote><a id="more"></a><p><strong>使用代理：</strong><br>直接在Windows Powershell中运行以下命令：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$env</span>:HTTP_PROXY=<span class="string">&quot;http://127.0.0.1:10809&quot;</span></span><br></pre></td></tr></table></figure><p>然后就可以了。</p><p>如果是cmd命令行的话：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">set</span> http_proxy=http://127.0.0.1:10809</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Windows </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Windows </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>用pip install 时出现“由于目标计算机积极拒绝，无法连接”错误</title>
      <link href="/2022/12/18/%E7%94%A8pip-install%E6%97%B6%E5%87%BA%E7%8E%B0%E2%80%9C%E7%94%B1%E4%BA%8E%E7%9B%AE%E6%A0%87%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A7%AF%E6%9E%81%E6%8B%92%E7%BB%9D%EF%BC%8C%E6%97%A0%E6%B3%95%E8%BF%9E%E6%8E%A5%E2%80%9D%E9%94%99%E8%AF%AF/"/>
      <url>/2022/12/18/%E7%94%A8pip-install%E6%97%B6%E5%87%BA%E7%8E%B0%E2%80%9C%E7%94%B1%E4%BA%8E%E7%9B%AE%E6%A0%87%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A7%AF%E6%9E%81%E6%8B%92%E7%BB%9D%EF%BC%8C%E6%97%A0%E6%B3%95%E8%BF%9E%E6%8E%A5%E2%80%9D%E9%94%99%E8%AF%AF/</url>
      
        <content type="html"><![CDATA[<p>在envs虚拟环境中使用pip install安装包时，全部报错：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">WARNING: Retrying (Retry(total&#x3D;0, connect&#x3D;None, read&#x3D;None, </span><br><span class="line">redirect&#x3D;None, status&#x3D;None)) after connection broken </span><br><span class="line">by &#39;ProxyError(&#39;Cannot connect to proxy.&#39;, NewConnectionError</span><br><span class="line">(&#39;&lt;pip._vendor.urllib3.connection.VerifiedHTTPSConnection</span><br><span class="line"> object at 0x000001A5C1BEF630&gt;: Failed to establish a new connection: </span><br><span class="line">[WinError 10061] 由于目标计算机积极拒绝，无法连接。&#39;)</span><br></pre></td></tr></table></figure><p>都提示“由于目标计算机积极拒绝，无法连接。”一看就感觉跟代理有关系。</p><p>于是，把代理关了，直接退出了。但是发现还是报这个错。</p><a id="more"></a><p>网上查了下，找到了解决方法。</p><p><strong>解决方法：</strong></p><p>1、打开注册表<br>按Win+R快捷键，输入regedit，打开注册表编辑器</p><p>2、找到<code>HKEY_CURRENT_USER/Software/Microsoft/Windows/CurrentVersion/Internet Settings</code></p><p>3、将以 Proxy 开头的键值对（如ProxyEnable、ProxyOverride、ProxyServer等）全部删除<br>我这就这3个。</p><p>然后就正常了。</p><p>本来是想注销下电脑的，因为开着很多窗口，有点不想注销，试一下成功了就不用注销了。</p>]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>yt-dlp 使用教程</title>
      <link href="/2022/12/18/yt-dlp-%E4%BD%BF%E7%94%A8%E6%95%99%E7%A8%8B/"/>
      <url>/2022/12/18/yt-dlp-%E4%BD%BF%E7%94%A8%E6%95%99%E7%A8%8B/</url>
      
        <content type="html"><![CDATA[<p>很久没用youtube-dl这个工具了，然后在油管上看到想下载的视频，发现下载速度超慢，只有几十KB最多。</p><p>于是，搜一下，发现可能是被限速了吧。</p><p>找到了这个 yt-dlp 的代替工具。<br>项目地址：<a class="link"   href="https://github.com/yt-dlp/yt-dlp" >https://github.com/yt-dlp/yt-dlp<i class="fas fa-external-link-alt"></i></a></p><p>这个下载，就看个人网速了，因为我晚上下载有时候1M/s、几百K/s都有，白天下载有时候10几M/s、20~30M/s来回跳，几M/s都有。</p><p>发现它就是从youtube-dl fork过来的，就理解为是从youtube-dl复制过来的，做了一些修复和添加了一些东西。</p><a id="more"></a><h2 id="安装yt-dlp"><a href="#安装yt-dlp" class="headerlink" title="安装yt-dlp"></a>安装yt-dlp</h2><h3 id="1-安装Python和ffmpeg"><a href="#1-安装Python和ffmpeg" class="headerlink" title="1.安装Python和ffmpeg"></a>1.安装Python和ffmpeg</h3><p>是从youtube-dl复制过来的，所以，原来如果有使用youtube-dl的话，就简单了，原来都已经安装过了。就直接安装yt-dlp就可以了，用法都一样。</p><p>youtube-dl的使用教程，之前写过了：<a href="/2022/04/09/youtube-dl%20%E4%BD%BF%E7%94%A8%E6%95%99%E7%A8%8B/" title="youtube-dl 使用教程">youtube-dl 使用教程</a><br>主要就是安装了：</p><ul><li>Python：安装时把pip和添加系统环境变量都选上</li><li>ffmpeg：下载好exe文件，把目录添加到系统环境变量就行</li></ul><h3 id="2-安装yt-dlp"><a href="#2-安装yt-dlp" class="headerlink" title="2.安装yt-dlp"></a>2.安装yt-dlp</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install yt-dlp</span><br></pre></td></tr></table></figure><p>如果不想用pip安装的，就去项目地址下载exe版本：<br><a class="link"   href="https://github.com/yt-dlp/yt-dlp#release-files" >https://github.com/yt-dlp/yt-dlp#release-files<i class="fas fa-external-link-alt"></i></a></p><p>然后把yt-dlp.exe 也一样放到系统环境的目录下就行。比如就放到ffmpeg的bin目录下，跟ffmpeg.exe和youtube-dl.exe放一起就行。</p><h2 id="下载视频"><a href="#下载视频" class="headerlink" title="下载视频"></a>下载视频</h2><p>支持下载哪些网站，项目文档上也有：<br><a class="link"   href="https://github.com/yt-dlp/yt-dlp/blob/master/supportedsites.md" >https://github.com/yt-dlp/yt-dlp/blob/master/supportedsites.md<i class="fas fa-external-link-alt"></i></a></p><p>我这里就有下载油管的视频举例。</p><p>比如我想下载这个视频：<a class="link"   href="https://www.youtube.com/watch?v=kNU2WCHVVBk" >https://www.youtube.com/watch?v=kNU2WCHVVBk<i class="fas fa-external-link-alt"></i></a><br>视频格式为：<a class="link"   href="https://www.youtube.com/watch?v=" >https://www.youtube.com/watch?v=<i class="fas fa-external-link-alt"></i></a>*<strong><strong>****</strong></strong></p><h3 id="1-直接下载"><a href="#1-直接下载" class="headerlink" title="1.直接下载"></a>1.直接下载</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 默认格式，高于720P的格式一般是 webm 格式</span></span><br><span class="line">yt-dlp https://www.youtube.com/watch?v=kNU2WCHVVBk</span><br><span class="line"></span><br><span class="line"><span class="comment"># 下载视频转换成mp4（用--merge-output-format参数）</span></span><br><span class="line">yt-dlp --merge-output-format mp4 https://www.youtube.com/watch?v=kNU2WCHVVBk</span><br></pre></td></tr></table></figure><h3 id="2-查看视频所有分辨率"><a href="#2-查看视频所有分辨率" class="headerlink" title="2.查看视频所有分辨率"></a>2.查看视频所有分辨率</h3><p>跟用 youtube-dl命令一样，先用<code>-F</code>参数查看有哪些分辨率。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yt-dlp -F https://www.youtube.com/watch?v=kNU2WCHVVBk</span><br></pre></td></tr></table></figure><img                       lazyload                     src="/images/loading.svg"                     data-src="/img/yt-dlp.png"                      style="zoom: 50%;"                >结果跟用 youtube-dl命令的差不多，标题行含义：> ID：文件ID> EXT：格式> RESOLUTION：分辨率> FPS：视频的帧率> FILESIZE：文件大小> VCODEC：audio only表示仅音频> ACODEC：video only表示仅视频（没有音频）；像mp4a.40.2（720p）就直接包含了音频<h3 id="3-下载指定分辨率"><a href="#3-下载指定分辨率" class="headerlink" title="3.下载指定分辨率"></a>3.下载指定分辨率</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 1.只下载音频</span></span><br><span class="line"><span class="comment"># 找m4a格式，列表越靠后越清晰。比如ID：140 | EXT：m4a | audio only</span></span><br><span class="line">yt-dlp -f140 https://www.youtube.com/watch?v=kNU2WCHVVBk</span><br><span class="line"></span><br><span class="line"><span class="comment"># 2.下载音频转换成mp3（加上-x --audio-format参数）</span></span><br><span class="line">yt-dlp -f140 -x --audio-format mp3 https://www.youtube.com/watch?v=kNU2WCHVVBk</span><br><span class="line"></span><br><span class="line"><span class="comment"># 3.下载视频（带音频）ID：22 | EXT：mp4 | 1280*720</span></span><br><span class="line">yt-dlp -f22 https://www.youtube.com/watch?v=kNU2WCHVVBk</span><br><span class="line"></span><br><span class="line"><span class="comment"># 4.下载指定分辨率视频+音频（为了方便就直接下载mp4格式了）</span></span><br><span class="line"><span class="comment"># 1080及以上分辨率的音频和视频是分开的，所以一般会音频和视频一起下载</span></span><br><span class="line">yt-dlp -f299+140 https://www.youtube.com/watch?v=kNU2WCHVVBk</span><br><span class="line"></span><br><span class="line"><span class="comment"># 5.(通用）下载最佳mp4视频+最佳m4a音频格式并合成mp4</span></span><br><span class="line">yt-dlp -f <span class="string">&#x27;bv[ext=mp4]+ba[ext=m4a]&#x27;</span> --embed-metadata --merge-output-format mp4 https://www.youtube.com/watch?v=kNU2WCHVVBk</span><br><span class="line"></span><br><span class="line"><span class="comment"># 6.指定文件名下载（用-o参数）</span></span><br><span class="line"><span class="comment"># 默认下载的文件格式是：title+空格+[id].格式，比如***** [kNU2WCHVVBk].mp4</span></span><br><span class="line"><span class="comment"># 文件名只要标题，不要id，加上 -o &#x27;%(title)s.mp4&#x27;</span></span><br><span class="line">yt-dlp -f <span class="string">&#x27;bv[ext=mp4]+ba[ext=m4a]&#x27;</span> --embed-metadata --merge-output-format mp4 https://www.youtube.com/watch?v=kNU2WCHVVBk -o <span class="string">&#x27;%(title)s.mp4&#x27;</span></span><br></pre></td></tr></table></figure><p>最方便直接用，可以直接用最后一种通用的下载最佳视频的方式。</p><h3 id="5-下载播放列表所有视频"><a href="#5-下载播放列表所有视频" class="headerlink" title="5.下载播放列表所有视频"></a>5.下载播放列表所有视频</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yt-dlp https://www.youtube.com/playlist?list=**********</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Software </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Software </tag>
            
            <tag> ffmpeg </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Docker从容器中复制文件到本地</title>
      <link href="/2022/12/16/Docker%E4%BB%8E%E5%AE%B9%E5%99%A8%E4%B8%AD%E5%A4%8D%E5%88%B6%E6%96%87%E4%BB%B6%E5%88%B0%E6%9C%AC%E5%9C%B0/"/>
      <url>/2022/12/16/Docker%E4%BB%8E%E5%AE%B9%E5%99%A8%E4%B8%AD%E5%A4%8D%E5%88%B6%E6%96%87%E4%BB%B6%E5%88%B0%E6%9C%AC%E5%9C%B0/</url>
      
        <content type="html"><![CDATA[<p>对于运行的容器没有做目录映射的，或者有权限问题的，需要把文件从容器中复制出来。用<code>docker cp</code>命令。</p><p><code>docker cp</code>命令不管容器有没有启动，拷贝命令都会生效。 如果拷贝的内容已存在，则直接覆盖。</p><a id="more"></a><h3 id="从容器中复制文件到本地"><a href="#从容器中复制文件到本地" class="headerlink" title="从容器中复制文件到本地"></a>从容器中复制文件到本地</h3><p>比如在当前目录下新建了 temp_data 目录：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 1.把oj-backend容器中的/data目录下的public目录都复制到本地temp_data目录下</span></span><br><span class="line">docker cp oj-backend:/data/public ./temp_data/</span><br><span class="line"><span class="comment"># 2.把oj-backend容器中的/data目录下的test_case目录复制到本地temp_data目录下</span></span><br><span class="line">docker cp oj-backend:/data/test_case ./temp_data/</span><br></pre></td></tr></table></figure><h3 id="把本地文件复制到容器中"><a href="#把本地文件复制到容器中" class="headerlink" title="把本地文件复制到容器中"></a>把本地文件复制到容器中</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 1.复制数据(db_backup_a.sql)到oj-postgres容器的/root中</span></span><br><span class="line">docker cp db_backup_a.sql oj-postgres:/root</span><br><span class="line"></span><br><span class="line"><span class="comment"># 2.复制当前目录下的temp_data/public/目录到oj-backend容器的/data/目录</span></span><br><span class="line">docker cp ./temp_data/public/ oj-backend:/data/</span><br><span class="line"><span class="comment"># 3.复制当前目录下的temp_data/test_case/目录到oj-backend容器的/data/目录</span></span><br><span class="line">docker cp ./temp_data/test_case/ oj-backend:/data/</span><br></pre></td></tr></table></figure><p>复制文件和目录都可以，就是容器的路径是：[容器名]:[文件/目录]</p>]]></content>
      
      
      <categories>
          
          <category> Docker </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Docker </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>删除postgresql数据库报错database xx is being accessed by other users</title>
      <link href="/2022/12/16/%E5%88%A0%E9%99%A4postgresql%E6%95%B0%E6%8D%AE%E5%BA%93%E6%8A%A5%E9%94%99database-xx-is-being-accessed-by-other-users/"/>
      <url>/2022/12/16/%E5%88%A0%E9%99%A4postgresql%E6%95%B0%E6%8D%AE%E5%BA%93%E6%8A%A5%E9%94%99database-xx-is-being-accessed-by-other-users/</url>
      
        <content type="html"><![CDATA[<p>恢复青岛大学的onlinejudge的数据库的时候，运行删除postgresql数据库命令<br><code>dropdb -U onlinejudge onlinejudge</code>时发现报错了。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">dropdb: database removal failed: ERROR:  database <span class="string">&quot;onlinejudge&quot;</span> is being accessed by other users</span><br><span class="line">DETAIL:  There are 2 other sessions using the database.</span><br></pre></td></tr></table></figure><p>这是因为当前数据库也在被别的用户使用，这里要删除也要慎重，确保数据库是可以被删除的再继续操作。</p><a id="more"></a><p><strong>解决方法：</strong></p><p>断开连接到这个数据库上的所有链接，再删除数据库。在PostgreSQL 9.2 及以上版本，执行下面的语句：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 1.登录postgres数据库</span></span><br><span class="line">psql -U onlinejudge</span><br><span class="line"><span class="comment"># 列出数据库</span></span><br><span class="line"><span class="comment"># \l or \list</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 2.断开所有连接到这个数据库上的连接，成功可以看到提示2 rows</span></span><br><span class="line">SELECT pg_terminate_backend(pg_stat_activity.pid)</span><br><span class="line">FROM pg_stat_activity</span><br><span class="line">WHERE datname=<span class="string">&#x27;onlinejudge&#x27;</span> AND pid&lt;&gt;pg_backend_pid();</span><br><span class="line"></span><br><span class="line"><span class="comment"># 3.退出postgres</span></span><br><span class="line">\q</span><br><span class="line"></span><br><span class="line"><span class="comment"># 再删除原有数据库</span></span><br><span class="line">dropdb -U onlinejudge onlinejudge</span><br></pre></td></tr></table></figure><p>断开所有连接到这个数据库上的连接的语句说明：</p><blockquote><p>pg_terminate_backend：用来终止与数据库的连接的进程id的函数。<br>pg_stat_activity：是一个系统表，用于存储服务进程的属性和状态。<br>pg_backend_pid()：是一个系统函数，获取附加到当前会话的服务器进程的ID。</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> Postgresql </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Postgresql </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>QingdaoU OnlineJudge 数据备份与恢复</title>
      <link href="/2022/12/16/QingdaoU-OnlineJudge%E6%95%B0%E6%8D%AE%E5%A4%87%E4%BB%BD%E4%B8%8E%E6%81%A2%E5%A4%8D/"/>
      <url>/2022/12/16/QingdaoU-OnlineJudge%E6%95%B0%E6%8D%AE%E5%A4%87%E4%BB%BD%E4%B8%8E%E6%81%A2%E5%A4%8D/</url>
      
        <content type="html"><![CDATA[<p>平台本身提供了数据库的备份，还挺方便的。不过，发现只导入数据库的备份文件，还是有问题。就折腾了好一会。</p><a id="more"></a><h2 id="Online-Judge平台数据备份与恢复"><a href="#Online-Judge平台数据备份与恢复" class="headerlink" title="Online Judge平台数据备份与恢复"></a>Online Judge平台数据备份与恢复</h2><h3 id="1-数据备份"><a href="#1-数据备份" class="headerlink" title="1.数据备份"></a>1.数据备份</h3><h4 id="1-数据库备份（postgresql）"><a href="#1-数据库备份（postgresql）" class="headerlink" title="1).数据库备份（postgresql）"></a>1).数据库备份（postgresql）</h4><p>进入OnlineJudgeDeploy/backup目录，运行以下命令就会此目录下生成一个.sql数据库备份文件。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sh db_backup.sh</span><br></pre></td></tr></table></figure><p>比如我得到了 db_backup_2022_12_16_13_51_41.sql 文件</p><h4 id="2-data目录下的public和test-case文件夹备份"><a href="#2-data目录下的public和test-case文件夹备份" class="headerlink" title="2).data目录下的public和test_case文件夹备份"></a>2).data目录下的public和test_case文件夹备份</h4><p>如果只用一个数据库文件，没有导入这两个目录，判题时会显示编译错误，点击会显示测试用例不存在。所以需要把这两个目录也从容器中复制出来。</p><p>因为直接用ftp工具发现不行，test_case目录都没有读的权限。所以，就直接从容器中把这两个目录复制出来。</p><p>比如我就在当前目录下新建一个temp_data目录，然后把public和test_case目录都复制到这个目录下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">docker cp oj-backend:/data/public ./temp_data/</span><br><span class="line">docker cp oj-backend:/data/test_case ./temp_data/</span><br></pre></td></tr></table></figure><h3 id="2-数据恢复"><a href="#2-数据恢复" class="headerlink" title="2.数据恢复"></a>2.数据恢复</h3><p>必须先恢复数据库，再复制public和test_case目录。</p><p>不管是本机，还是换了一台新的机子，都可以用以下方法恢复数据，因为是很彻底的删除了数据库的。</p><h4 id="1-数据库导入（postgresql）"><a href="#1-数据库导入（postgresql）" class="headerlink" title="1).数据库导入（postgresql）"></a>1).数据库导入（postgresql）</h4><p>先查看docker-compse.yml配置文件中配置的数据库容器、数据库名和数据库使用用户名：</p><ul><li>数据库容器：oj-postgres</li><li>数据库名：onlinejudge</li><li>数据库使用用户名：onlinejudge</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 1.拷贝数据(.sql)到数据库容器oj-postgres</span></span><br><span class="line">docker cp db_backup_xxxxxxx.sql oj-postgres:/root</span><br><span class="line"></span><br><span class="line"><span class="comment"># 2.进入数据库所在容器</span></span><br><span class="line">docker <span class="built_in">exec</span> -it oj-postgres bash</span><br><span class="line"></span><br><span class="line"><span class="comment"># 3.删除原有数据库</span></span><br><span class="line"><span class="comment"># -U onlinejudge表示数据库user:onlinejudge</span></span><br><span class="line">dropdb -U onlinejudge onlinejudge</span><br><span class="line"></span><br><span class="line"><span class="comment"># 删除的时候如果提示有其它用户在用，有2个sessions在用，无法删除，就需要先断开所有连接到这个数据库上的连接</span></span><br><span class="line"><span class="comment"># 1).登录postgresql数据库</span></span><br><span class="line">psql -U onlinejudge</span><br><span class="line"><span class="comment"># 列出数据库</span></span><br><span class="line"><span class="comment"># \l or \list</span></span><br><span class="line"><span class="comment"># 2).断开所有连接到这个数据库上的连接，成功可以看到提示2 rows</span></span><br><span class="line">SELECT pg_terminate_backend(pg_stat_activity.pid)</span><br><span class="line">FROM pg_stat_activity</span><br><span class="line">WHERE datname=<span class="string">&#x27;onlinejudge&#x27;</span> AND pid&lt;&gt;pg_backend_pid();</span><br><span class="line"><span class="comment"># 3).退出postgresql</span></span><br><span class="line">\q</span><br><span class="line"></span><br><span class="line"><span class="comment"># 再删除原有数据库</span></span><br><span class="line">dropdb -U onlinejudge onlinejudge</span><br><span class="line"></span><br><span class="line"><span class="comment"># 4.创建数据库</span></span><br><span class="line"><span class="comment"># 数据库user:onlinejudge，数据库名:onlinejudge）</span></span><br><span class="line">createdb -U onlinejudge onlinejudge</span><br><span class="line"></span><br><span class="line"><span class="comment"># 5.复制数据库，执行sql语句</span></span><br><span class="line">psql -f /root/db_backup_xxxxxxx.sql -U onlinejudge</span><br><span class="line"></span><br><span class="line"><span class="comment"># 6.退出容器</span></span><br><span class="line"><span class="built_in">exit</span></span><br></pre></td></tr></table></figure><h4 id="2-public和test-case目录导入"><a href="#2-public和test-case目录导入" class="headerlink" title="2).public和test_case目录导入"></a>2).public和test_case目录导入</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">docker cp ./temp_data/public/ oj-backend:/data/</span><br><span class="line">docker cp ./temp_data/test_case/ oj-backend:/data/</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看结果，进入oj-backend容器</span></span><br><span class="line">docker <span class="built_in">exec</span> -it oj-backend sh</span><br><span class="line"><span class="comment"># 列出/data目录，看到这两个目录的日期跟别的不同就是有效了</span></span><br><span class="line">ls -l /data</span><br><span class="line"><span class="comment"># 退出容器</span></span><br><span class="line"><span class="built_in">exit</span></span><br></pre></td></tr></table></figure><p>再登录，发现所有的数据都恢复过来了。</p>]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Docker </tag>
            
            <tag> Python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Docker搭建QingdaoU OnlineJudge平台</title>
      <link href="/2022/12/16/Docker%E6%90%AD%E5%BB%BAQingdaoU-OnlineJudge%E5%B9%B3%E5%8F%B0/"/>
      <url>/2022/12/16/Docker%E6%90%AD%E5%BB%BAQingdaoU-OnlineJudge%E5%B9%B3%E5%8F%B0/</url>
      
        <content type="html"><![CDATA[<p>Online Judge系统（简称OJ）是一个在线的判题系统。用户可以在线提交程序多种程序（如C、C++、Python）源代码，系统对源代码进行编译和执行，并通过预先设计的测试数据来检验程序源代码的正确性。</p><p>以前是知道各个大学都有自己的OJ系统用来训练ACM的。</p><p>青岛大学的这个开源Online Judge系统是比较新的，界面感觉也不错，还是开源的，还可以用Docker直接搭建，就很方便了。</p><a id="more"></a><h2 id="Online-Judge平台搭建"><a href="#Online-Judge平台搭建" class="headerlink" title="Online Judge平台搭建"></a>Online Judge平台搭建</h2><p>青岛大学的OJ项目地址：<a class="link"   href="https://github.com/QingdaoU/OnlineJudge/blob/master/README-CN.md" >https://github.com/QingdaoU/OnlineJudge/blob/master/README-CN.md<i class="fas fa-external-link-alt"></i></a></p><p>上面有OJ平台搭建的项目地址：<a class="link"   href="https://github.com/QingdaoU/OnlineJudgeDeploy/tree/2.0" >https://github.com/QingdaoU/OnlineJudgeDeploy/tree/2.0<i class="fas fa-external-link-alt"></i></a></p><p>我是在一台装了Ubuntu 20.04 LTS的机器上装的。</p><h3 id="1-下载"><a href="#1-下载" class="headerlink" title="1.下载"></a>1.下载</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git <span class="built_in">clone</span> -b 2.0 https://github.com/QingdaoU/OnlineJudgeDeploy.git &amp;&amp; <span class="built_in">cd</span> OnlineJudgeDeploy</span><br></pre></td></tr></table></figure><p>执行完上面的命令后，会进入OnlineJudgeDeploy目录。</p><p>不能用git下载的话，直接把上面OJ平台项目的Code包一起下载下来。然后解压到OnlineJudgeDeploy目录后，再cd进入目录，一样的。</p><h3 id="2-启动服务"><a href="#2-启动服务" class="headerlink" title="2.启动服务"></a>2.启动服务</h3><h4 id="1-docker-compose安装"><a href="#1-docker-compose安装" class="headerlink" title="1).docker-compose安装"></a>1).docker-compose安装</h4><p>用的是docker-compose安装一键部署。</p><p>所以，需要提前安装Docker（<a href="/2022/11/19/Ubuntu%E5%AE%89%E8%A3%85Docker/" title="Ubuntu安装Docker">Ubuntu安装Docker</a>）和docker-compose。</p><p>如果装了Docker，没有安装docker-compose的话，有python、pip的话就很简单了，直接用pip命令安装就行了：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install docker-compose</span><br></pre></td></tr></table></figure><h4 id="2-docker-compse-yml-配置文件"><a href="#2-docker-compse-yml-配置文件" class="headerlink" title="2).docker-compse.yml 配置文件"></a>2).docker-compse.yml 配置文件</h4><p>因为服务会有个地址，涉及到端口号会不会冲突。所以，可以先看下OnlineJudgeDeploy目录下的docker-compse.yml配置文件，上面项目地址中也可以查看这个文件。</p><p>文件中可以看到是开了好几个服务的：</p><ul><li>oj-redis</li><li>oj-postgres：数据库，可以看到设置的数据库DB名，用户USER名和密码PASSWORD</li><li>judge-server：服务器</li><li>oj-backend：最后看到这个是依赖以上的服务的。重点就是最下面这个端口号了：<figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">...</span></span><br><span class="line"><span class="attr">ports:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">&quot;0.0.0.0:80:8000&quot;</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">&quot;0.0.0.0:443:1443&quot;</span></span><br></pre></td></tr></table></figure>前面的默认的映射到本机是80端口（HTTP）和443端口（HTTPS）。<br>这个只要不冲突，就随便你自己改了。</li></ul><p>比如一般不想冲突的话，我改成如下的：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">...</span></span><br><span class="line"><span class="attr">ports:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">&quot;0.0.0.0:8080:8000&quot;</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">&quot;0.0.0.0:8443:1443&quot;</span></span><br></pre></td></tr></table></figure><h4 id="3-docker-compose启动服务"><a href="#3-docker-compose启动服务" class="headerlink" title="3).docker-compose启动服务"></a>3).docker-compose启动服务</h4><p>用vi命令修改好配置文件后，用以下命令一键部署启动就行：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker-compose up -d</span><br></pre></td></tr></table></figure><p>根据网速情况，大约2到30分钟都有可能，正常的话，感觉一般几分钟就好了。</p><p>常用的docker-compose还有以下几个：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">docker-compose <span class="built_in">help</span> <span class="comment"># 查看帮助</span></span><br><span class="line">docker-compose up <span class="comment"># 创建并启动容器</span></span><br><span class="line">docker-compose ps <span class="comment"># 列出容器</span></span><br><span class="line">docker-compose stop <span class="comment"># 停止服务</span></span><br><span class="line">docker-compose start <span class="comment"># 启动服务</span></span><br><span class="line">docker-compose down <span class="comment"># 停止并删除资源</span></span><br></pre></td></tr></table></figure><h4 id="4-服务成功启动"><a href="#4-服务成功启动" class="headerlink" title="4).服务成功启动"></a>4).服务成功启动</h4><p>还是在OnlineJudgeDeploy目录下，用<code>docker-compose ps</code>命令查看结果：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">ubuntu@VM-8-10-ubuntu:~&#x2F;onlinejudge&#x2F;OnlineJudgeDeploy$ docker-compose ps</span><br><span class="line">    Name                  Command                  State                            Ports                      </span><br><span class="line">---------------------------------------------------------------------------------------------------------------</span><br><span class="line">judge-server   &#x2F;bin&#x2F;sh -c &#x2F;code&#x2F;entrypoint.sh   Up (healthy)   8080&#x2F;tcp                                        </span><br><span class="line">oj-backend     &#x2F;bin&#x2F;sh -c &#x2F;app&#x2F;deploy&#x2F;ent ...   Up (healthy)   0.0.0.0:8443-&gt;1443&#x2F;tcp, 0.0.0.0:8080-&gt;8000&#x2F;tcp</span><br><span class="line">oj-postgres    docker-entrypoint.sh postgres    Up             5432&#x2F;tcp                                        </span><br><span class="line">oj-redis       docker-entrypoint.sh redis ...   Up             6379&#x2F;tcp                                        </span><br><span class="line">ubuntu@VM-8-10-ubuntu:~&#x2F;onlinejudge&#x2F;OnlineJudgeDeploy$</span><br></pre></td></tr></table></figure><p><code>docker ps -a</code>命令也是可以查看到这些所有容器的（judge-server、oj-backend、oj-postgres和oj-redis）</p><p>前端登录地址：<a class="link"   href="http://ip:8080/" >http://ip:8080<i class="fas fa-external-link-alt"></i></a> （8080是对应8000端口映射到本机的地址）<br>后台管理地址：<a class="link"   href="http://ip:8080/admin" >http://ip:8080/admin<i class="fas fa-external-link-alt"></i></a><br>默认超级管理员用户名为root，密码为rootroot</p><p>关于数据备份与恢复看这篇：<a href="/2022/12/16/QingdaoU-OnlineJudge%E6%95%B0%E6%8D%AE%E5%A4%87%E4%BB%BD%E4%B8%8E%E6%81%A2%E5%A4%8D/" title="QingdaoU OnlineJudge 数据备份与恢复">QingdaoU OnlineJudge 数据备份与恢复</a></p>]]></content>
      
      
      <categories>
          
          <category> Docker </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Docker </tag>
            
            <tag> Python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Python 汉字转拼音</title>
      <link href="/2022/12/06/Python-%E6%B1%89%E5%AD%97%E8%BD%AC%E6%8B%BC%E9%9F%B3/"/>
      <url>/2022/12/06/Python-%E6%B1%89%E5%AD%97%E8%BD%AC%E6%8B%BC%E9%9F%B3/</url>
      
        <content type="html"><![CDATA[<p>一般用来批量创建账号，想把姓名批量生成姓名拼音的账号。</p><p>Python很简单，用pypinyin这个库就行了。</p><a id="more"></a><h2 id="安装pypinyin库"><a href="#安装pypinyin库" class="headerlink" title="安装pypinyin库"></a>安装pypinyin库</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install pypinyin</span><br></pre></td></tr></table></figure><p>官方文档：<a class="link"   href="https://pypinyin.readthedocs.io/zh_CN/master/usage.html#example" >https://pypinyin.readthedocs.io/zh_CN/master/usage.html#example<i class="fas fa-external-link-alt"></i></a></p><h2 id="姓名转拼音"><a href="#姓名转拼音" class="headerlink" title="姓名转拼音"></a>姓名转拼音</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> pypinyin</span><br><span class="line"></span><br><span class="line"><span class="comment"># 姓名转换成拼音</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_pinyin</span>(<span class="params"><span class="built_in">str</span></span>):</span></span><br><span class="line">    pinyin = pypinyin.pinyin(<span class="built_in">str</span>, style=pypinyin.NORMAL) <span class="comment"># [[&#x27;zhang&#x27;], [&#x27;san&#x27;]]</span></span><br><span class="line">    <span class="comment"># pinyin = pypinyin.pinyin(str, heteronym=True) # 显示声调</span></span><br><span class="line">    result1 = <span class="string">&#x27;&#x27;</span>.join(i[<span class="number">0</span>] <span class="keyword">for</span> i <span class="keyword">in</span> pinyin) <span class="comment"># &#x27;zhangsan&#x27;</span></span><br><span class="line">    <span class="keyword">return</span> result1</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(get_pinyin(<span class="string">&quot;张三&quot;</span>)) <span class="comment"># &#x27;zhangsan&#x27;</span></span><br></pre></td></tr></table></figure><p>更多带声调的看官方文档上的例子上都有。</p><h2 id="批量姓名转拼音"><a href="#批量姓名转拼音" class="headerlink" title="批量姓名转拼音"></a>批量姓名转拼音</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> pypinyin</span><br><span class="line"></span><br><span class="line"><span class="comment"># 姓名转换成拼音</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_pinyin</span>(<span class="params"><span class="built_in">str</span></span>):</span></span><br><span class="line">    pinyin = pypinyin.pinyin(<span class="built_in">str</span>, style=pypinyin.NORMAL) <span class="comment"># [[&#x27;zhang&#x27;], [&#x27;san&#x27;]]</span></span><br><span class="line">    <span class="comment"># pinyin = pypinyin.pinyin(str, heteronym=True) # 显示声调</span></span><br><span class="line">    result1 = <span class="string">&#x27;&#x27;</span>.join(i[<span class="number">0</span>] <span class="keyword">for</span> i <span class="keyword">in</span> pinyin) <span class="comment"># zhangsan</span></span><br><span class="line">    <span class="keyword">return</span> result1</span><br><span class="line"></span><br><span class="line"><span class="comment"># 批量姓名转拼音</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_pinyin_list</span>(<span class="params">name_list</span>):</span></span><br><span class="line">    name_pinyin_list = []</span><br><span class="line">    <span class="keyword">for</span> name <span class="keyword">in</span> name_list:</span><br><span class="line">        n = name[<span class="number">0</span>]</span><br><span class="line">        n_pinyin = get_pinyin(n)</span><br><span class="line">        name_pinyin_list.append(n_pinyin)</span><br><span class="line">    <span class="keyword">return</span> name_pinyin_list</span><br><span class="line"></span><br><span class="line">name_list = [<span class="string">&#x27;张三&#x27;</span>, <span class="string">&#x27;李四&#x27;</span>, <span class="string">&#x27;王五&#x27;</span>]</span><br><span class="line">name_pinyin_list = get_pinyin_list(name_list)</span><br><span class="line"><span class="built_in">print</span>(name_pinyin_list)</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Python Pandas使用举例</title>
      <link href="/2022/12/04/Python-Pandas%E4%BD%BF%E7%94%A8%E4%B8%BE%E4%BE%8B/"/>
      <url>/2022/12/04/Python-Pandas%E4%BD%BF%E7%94%A8%E4%B8%BE%E4%BE%8B/</url>
      
        <content type="html"><![CDATA[<p>当Python要操作Excel表格时，用Pandas库就超级方便了。</p><p>Pandas的主要数据结构有Series（一维数据）与DataFrame（二维数据）。<br>用来操作Excel表时，最常用的就是DataFrame了。</p><a id="more"></a><h2 id="安装pandas库"><a href="#安装pandas库" class="headerlink" title="安装pandas库"></a>安装pandas库</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 安装pandas库：</span></span><br><span class="line">pip install pandas</span><br><span class="line"></span><br><span class="line"><span class="comment"># 当然，操作excel的库也要安装一下，一般操作.xlsx格式的，安装openpyxl：</span></span><br><span class="line">pip install openpyxl</span><br><span class="line"></span><br><span class="line"><span class="comment"># 如果，最后保存文件是.xls格式的，需要安装xlwt：</span></span><br><span class="line">pip install xlwt</span><br></pre></td></tr></table></figure><p>最后保存成<code>.xls</code>格式的时候，会有如下提示：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">As the xlwt package is no longer maintained, the xlwt engine will be removed in a fuine will be removed in a future version of pandas.</span><br></pre></td></tr></table></figure><p>这个东西在pandas中会被淘汰，不用管，等以后不能用了再说。<br>毕竟还是有些破系统的导入，只支持xls格式的。不过，自己肯定是能用xlsx就用xlsx。</p><h2 id="使用举例"><a href="#使用举例" class="headerlink" title="使用举例"></a>使用举例</h2><p>以以下表格（data.xlsx）举例：<br><img                       lazyload                     src="/images/loading.svg"                     data-src="/img/Python_pandas_demo.png"                      style="zoom: 100%;"                ></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"></span><br><span class="line"><span class="comment"># 1.读取整个Excel表数据</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">read_ex_01</span>(<span class="params">ex_file</span>):</span></span><br><span class="line">    df = pd.read_excel(ex_file)</span><br><span class="line">    <span class="built_in">print</span>(df)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 2.读取某张sheet中某几列的数据</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">read_ex_02</span>(<span class="params">ex_file</span>):</span></span><br><span class="line">    usecols = [<span class="string">&#x27;主题&#x27;</span>, <span class="string">&#x27;值&#x27;</span>] <span class="comment"># usecols = [&#x27;主题&#x27;, &#x27;值&#x27;, &#x27;时间&#x27;]</span></span><br><span class="line">    sheet_name = <span class="string">&#x27;Sheet1&#x27;</span> <span class="comment"># sheet_name=0 也可</span></span><br><span class="line">    df = pd.read_excel(ex_file, sheet_name=sheet_name, usecols=usecols)</span><br><span class="line">    <span class="built_in">print</span>(df)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 3.读取Excel数据转到List</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">read_ex_03</span>(<span class="params">ex_file</span>):</span></span><br><span class="line">    df = pd.read_excel(ex_file)</span><br><span class="line">    data_list = np.array(df).tolist() <span class="comment"># 方法一</span></span><br><span class="line">    <span class="comment"># data_list = df.values.tolist()  # 方法二：将DataFrame转换为列表</span></span><br><span class="line">    <span class="built_in">print</span>(data_list)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 4.写入Excel</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">write_to_ex01</span>(<span class="params">ex_file</span>):</span></span><br><span class="line">    name_list = [<span class="string">&#x27;张三&#x27;</span>, <span class="string">&#x27;李四&#x27;</span>,  <span class="string">&#x27;王五&#x27;</span>]</span><br><span class="line">    name_pinyin_list = [<span class="string">&#x27;zhangsan&#x27;</span>, <span class="string">&#x27;lisi&#x27;</span>, <span class="string">&#x27;wangwu&#x27;</span>]</span><br><span class="line">    data_dict = &#123;<span class="string">&#x27;姓名&#x27;</span>:name_list, <span class="string">&#x27;账号&#x27;</span>:name_pinyin_list&#125;</span><br><span class="line">    data = pd.DataFrame(data_dict)</span><br><span class="line">    data.to_excel(ex_file)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 5.追加写入Excel</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">write_to_ex02</span>(<span class="params">ex_file, new_col, data_list</span>):</span></span><br><span class="line">    dr = pd.read_excel(ex_file)</span><br><span class="line">    col_name = dr.columns.tolist() <span class="comment"># 所有列名</span></span><br><span class="line">    col_name.append(new_col) <span class="comment"># 将新增的列添加到最后</span></span><br><span class="line">    dr.reindex(columns=col_name) <span class="comment"># 对原行/列索引重新构建索引值</span></span><br><span class="line">    dr[new_col] = data_list</span><br><span class="line">    dr.to_excel(ex_file, index=<span class="literal">False</span>) <span class="comment"># index=False 表示不需要最前面的索引列</span></span><br><span class="line"></span><br><span class="line">ex_file = <span class="string">r&#x27;.\data.xlsx&#x27;</span></span><br><span class="line"><span class="comment"># 读取Excel</span></span><br><span class="line">read_ex_01(ex_file)</span><br><span class="line">read_ex_02(ex_file)</span><br><span class="line">read_ex_03(ex_file)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 写入Excel</span></span><br><span class="line">write_to_ex01(<span class="string">r&#x27;.\ex\data1.xlsx&#x27;</span>)</span><br><span class="line">write_to_ex02(ex_file, <span class="string">&#x27;账号&#x27;</span>, [<span class="string">&#x27;zhangsan&#x27;</span>, <span class="string">&#x27;lisi&#x27;</span>, <span class="string">&#x27;wangwu&#x27;</span>])</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>还有使用Pandas的文章：</p><ul><li><a href="/2022/07/01/Python%E6%8B%86%E5%88%86Excel%E8%A1%A8/" title="Python拆分Excel表">Python拆分Excel表</a></li><li><a href="/2022/10/12/Python-pandas%E8%AF%BB%E5%8F%96Excel%E6%97%B6%E7%A9%BA%E5%8D%95%E5%85%83%E6%A0%BC%E8%AF%BB%E5%8F%96%E4%B8%BAnan/" title="Python pandas读取Excel时空单元格读取为nan">Python pandas读取Excel时空单元格读取为nan</a></li><li><a href="/2023/01/07/Python-pandas%E7%BB%9F%E8%AE%A1Excel%E8%A1%A8%E4%B8%AD%E4%BA%BA%E5%90%8D%E6%AC%A1%E6%95%B0/" title="Python pandas统计Excel表中人名次数">Python pandas统计Excel表中人名次数</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>PowerShell 提示出于兼容性目的已禁用PSReadLine问题</title>
      <link href="/2022/12/04/PowerShell%E6%8F%90%E7%A4%BA%E5%87%BA%E4%BA%8E%E5%85%BC%E5%AE%B9%E6%80%A7%E7%9B%AE%E7%9A%84%E5%B7%B2%E7%A6%81%E7%94%A8PSReadLine%E9%97%AE%E9%A2%98/"/>
      <url>/2022/12/04/PowerShell%E6%8F%90%E7%A4%BA%E5%87%BA%E4%BA%8E%E5%85%BC%E5%AE%B9%E6%80%A7%E7%9B%AE%E7%9A%84%E5%B7%B2%E7%A6%81%E7%94%A8PSReadLine%E9%97%AE%E9%A2%98/</url>
      
        <content type="html"><![CDATA[<p>Windows10系统，发现每次PowerShell都有提示：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">尝试新的跨平台 PowerShell https://aka.ms/pscore6</span><br><span class="line"></span><br><span class="line">警告: PowerShell 检测到你可能正在使用屏幕阅读器，并且已出于兼容性目的禁用 PSReadLine。如果要重新启用它，请运行 <span class="string">&quot;Import-Module PSReadLine&quot;</span>。</span><br></pre></td></tr></table></figure><p>但是，发现运行<code>Import-Module PSReadLine</code>后并没有解决。而办公室电脑的win10上很正常，并没有发现这个问题。</p><p>话说，是怎么发现这个问题的呢？倒也不是用PowerShell的时候，是因为用VS Code，发现终端界面上命令都没有高亮了，而终端用的就是PowerShell，感觉就是PowerShell的问题了。</p><a id="more"></a><p>于是，网上查了很多方法，下载了最新版的PowerShell也没用。</p><p>最终找到一个有用的。</p><p><strong>解决方法：</strong></p><p>1.创建一个.ps1文件（名字随便取，比如xiufu_powershell.ps1），粘贴以下代码：</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">Add-Type</span> <span class="literal">-TypeDefinition</span> <span class="string">&#x27;</span></span><br><span class="line"><span class="string">using System;</span></span><br><span class="line"><span class="string">using System.ComponentModel;</span></span><br><span class="line"><span class="string">using System.Runtime.InteropServices;</span></span><br><span class="line"><span class="string">public static class ScreenReaderFixUtil</span></span><br><span class="line"><span class="string">&#123;</span></span><br><span class="line"><span class="string">    public static bool IsScreenReaderActive()</span></span><br><span class="line"><span class="string">    &#123;</span></span><br><span class="line"><span class="string">        var ptr = IntPtr.Zero;</span></span><br><span class="line"><span class="string">        try</span></span><br><span class="line"><span class="string">        &#123;</span></span><br><span class="line"><span class="string">            ptr = Marshal.AllocHGlobal(sizeof(int));</span></span><br><span class="line"><span class="string">            int hr = Interop.SystemParametersInfo(</span></span><br><span class="line"><span class="string">                Interop.SPI_GETSCREENREADER,</span></span><br><span class="line"><span class="string">                sizeof(int),</span></span><br><span class="line"><span class="string">                ptr,</span></span><br><span class="line"><span class="string">                0);</span></span><br><span class="line"><span class="string">            if (hr == 0)</span></span><br><span class="line"><span class="string">            &#123;</span></span><br><span class="line"><span class="string">                throw new Win32Exception(Marshal.GetLastWin32Error());</span></span><br><span class="line"><span class="string">            &#125;</span></span><br><span class="line"><span class="string">            return Marshal.ReadInt32(ptr) != 0;</span></span><br><span class="line"><span class="string">        &#125;</span></span><br><span class="line"><span class="string">        finally</span></span><br><span class="line"><span class="string">        &#123;</span></span><br><span class="line"><span class="string">            if (ptr != IntPtr.Zero)</span></span><br><span class="line"><span class="string">            &#123;</span></span><br><span class="line"><span class="string">                Marshal.FreeHGlobal(ptr);</span></span><br><span class="line"><span class="string">            &#125;</span></span><br><span class="line"><span class="string">        &#125;</span></span><br><span class="line"><span class="string">    &#125;</span></span><br><span class="line"><span class="string">    public static void SetScreenReaderActiveStatus(bool isActive)</span></span><br><span class="line"><span class="string">    &#123;</span></span><br><span class="line"><span class="string">        int hr = Interop.SystemParametersInfo(</span></span><br><span class="line"><span class="string">            Interop.SPI_SETSCREENREADER,</span></span><br><span class="line"><span class="string">            isActive ? 1u : 0u,</span></span><br><span class="line"><span class="string">            IntPtr.Zero,</span></span><br><span class="line"><span class="string">            Interop.SPIF_SENDCHANGE);</span></span><br><span class="line"><span class="string">        if (hr == 0)</span></span><br><span class="line"><span class="string">        &#123;</span></span><br><span class="line"><span class="string">            throw new Win32Exception(Marshal.GetLastWin32Error());</span></span><br><span class="line"><span class="string">        &#125;</span></span><br><span class="line"><span class="string">    &#125;</span></span><br><span class="line"><span class="string">    private static class Interop</span></span><br><span class="line"><span class="string">    &#123;</span></span><br><span class="line"><span class="string">        public const int SPIF_SENDCHANGE = 0x0002;</span></span><br><span class="line"><span class="string">        public const int SPI_GETSCREENREADER = 0x0046;</span></span><br><span class="line"><span class="string">        public const int SPI_SETSCREENREADER = 0x0047;</span></span><br><span class="line"><span class="string">        [DllImport(&quot;user32&quot;, SetLastError = true, CharSet = CharSet.Unicode)]</span></span><br><span class="line"><span class="string">        public static extern int SystemParametersInfo(</span></span><br><span class="line"><span class="string">            uint uiAction,</span></span><br><span class="line"><span class="string">            uint uiParam,</span></span><br><span class="line"><span class="string">            IntPtr pvParam,</span></span><br><span class="line"><span class="string">            uint fWinIni);</span></span><br><span class="line"><span class="string">    &#125;</span></span><br><span class="line"><span class="string">&#125;&#x27;</span></span><br><span class="line"><span class="keyword">if</span> ([<span class="type">ScreenReaderFixUtil</span>]::IsScreenReaderActive()) &#123;</span><br><span class="line">    [<span class="type">ScreenReaderFixUtil</span>]::SetScreenReaderActiveStatus(<span class="variable">$false</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>2.在PowerShell中运行这个文件</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">.\xiufu_powershell.ps1</span><br></pre></td></tr></table></figure><p>然后重启PowerShell，就解决了。</p><p>当然，VS Code的终端中高亮问题也解决了。</p>]]></content>
      
      
      <categories>
          
          <category> Windows </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Windows </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Python替换Word文档中指定字符</title>
      <link href="/2022/12/01/Python%E6%9B%BF%E6%8D%A2Word%E6%96%87%E6%A1%A3%E4%B8%AD%E6%8C%87%E5%AE%9A%E5%AD%97%E7%AC%A6/"/>
      <url>/2022/12/01/Python%E6%9B%BF%E6%8D%A2Word%E6%96%87%E6%A1%A3%E4%B8%AD%E6%8C%87%E5%AE%9A%E5%AD%97%E7%AC%A6/</url>
      
        <content type="html"><![CDATA[<p>比如我有一大批文档（好几十个、上百个），每个里面的第一页中都有一个”2021年”，我想把这个替换成”2022年”。</p><p>又不想一个一个打开去改，于是用Python写了下，这样每年只需要代码跑一下就全部改了~ 真是机智。</p><p>Python有一个python-docx的库，可以直接用来处理.docx的Word文档的。</p><a id="more"></a><h2 id="安装python-docx库"><a href="#安装python-docx库" class="headerlink" title="安装python-docx库"></a>安装python-docx库</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install python-docx</span><br></pre></td></tr></table></figure><p>官方文档：<a class="link"   href="https://python-docx.readthedocs.org/en/latest/" >https://python-docx.readthedocs.org/en/latest/<i class="fas fa-external-link-alt"></i></a></p><p>安装完后，先简单了解下这个库读取Word后，有几种对象：</p><ul><li>word文件：<strong>Document</strong></li><li>段落：<strong>Paragraph</strong></li><li>文字块：<strong>Run</strong>，感觉文字块有点玄学，不一定是一句话，后面会看代码演示。<img                       lazyload                     src="/images/loading.svg"                     data-src="/img/Python_replace_word_str.png"                      style="zoom: 50%;"                ></li></ul><h2 id="替换Word中的字符"><a href="#替换Word中的字符" class="headerlink" title="替换Word中的字符"></a>替换Word中的字符</h2><p>比如我就把”2021年”替换成”2022年”，当然，这个字符是唯一的。</p><p>先直接放代码：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">from</span> docx <span class="keyword">import</span> Document</span><br><span class="line"><span class="keyword">from</span> docx.shared <span class="keyword">import</span> Pt</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_filelist</span>(<span class="params">path</span>):</span></span><br><span class="line">    file_list = []</span><br><span class="line">    <span class="keyword">for</span> home, dirs, files <span class="keyword">in</span> os.walk(path):</span><br><span class="line">        <span class="keyword">for</span> filename <span class="keyword">in</span> files:</span><br><span class="line">            <span class="keyword">if</span>(filename.startswith(<span class="string">&#x27;~$&#x27;</span>)):</span><br><span class="line">                <span class="keyword">continue</span></span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                <span class="comment"># 文件名列表，包含完整路径</span></span><br><span class="line">                file_list.append(os.path.join(home, filename))</span><br><span class="line">                <span class="comment"># 文件名列表，只包含文件名</span></span><br><span class="line">                <span class="comment"># file_list.append(filename)</span></span><br><span class="line">    <span class="keyword">return</span> file_list</span><br><span class="line"></span><br><span class="line"><span class="comment"># 替换Word文档中的指定字符串</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">replace_str_in_word</span>(<span class="params">old_str, new_str, docx_file_list</span>):</span></span><br><span class="line">    <span class="keyword">for</span> file <span class="keyword">in</span> docx_file_list:</span><br><span class="line">        doc = Document(file)</span><br><span class="line">        <span class="comment"># 每一段内容</span></span><br><span class="line">        <span class="keyword">for</span> p <span class="keyword">in</span> doc.paragraphs:</span><br><span class="line">            <span class="keyword">if</span> old_str <span class="keyword">in</span> p.text:</span><br><span class="line">                <span class="comment"># inline = p.runs</span></span><br><span class="line">                <span class="comment"># for i in inline:</span></span><br><span class="line">                <span class="comment">#     if old_str in i.text:</span></span><br><span class="line">                <span class="comment">#         text = i.text.replace(old_str, new_str)</span></span><br><span class="line">                <span class="comment">#         i.text = text</span></span><br><span class="line">                p.text = p.text.replace(old_str, new_str) <span class="comment"># 替换字符</span></span><br><span class="line">                <span class="comment"># 设置替换后的段落的格式</span></span><br><span class="line">                <span class="keyword">for</span> i <span class="keyword">in</span> p.runs:</span><br><span class="line">                    i.font.size = Pt(<span class="number">18</span>) <span class="comment"># 小二</span></span><br><span class="line">                    i.font.bold = <span class="literal">True</span> <span class="comment"># 加粗</span></span><br><span class="line">                    <span class="comment"># i.font.name = &#x27;Arial&#x27;</span></span><br><span class="line">                    i.font.name = <span class="string">u&#x27;宋体&#x27;</span></span><br><span class="line"></span><br><span class="line">        doc.save(file)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;-----------------开始-----------------&#x27;</span>)</span><br><span class="line"><span class="comment"># word文件位置</span></span><br><span class="line">path = <span class="string">r&#x27;F:\abc&#x27;</span></span><br><span class="line"></span><br><span class="line">file_list = get_filelist(path) <span class="comment"># 文件列表</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">len</span>(file_list))</span><br><span class="line"></span><br><span class="line"><span class="comment"># 替换Word文档中的指定字符串，把2021替换成2022</span></span><br><span class="line">replace_str_in_word(<span class="string">&#x27;2021&#x27;</span>, <span class="string">&#x27;2022&#x27;</span>, file_list)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;-----------------完成！-----------------&#x27;</span>)</span><br></pre></td></tr></table></figure><h2 id="相关解释"><a href="#相关解释" class="headerlink" title="相关解释"></a>相关解释</h2><h3 id="1-replace-str-in-word方法"><a href="#1-replace-str-in-word方法" class="headerlink" title="1.replace_str_in_word方法"></a>1.replace_str_in_word方法</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">doc = Document(file)</span><br><span class="line"><span class="keyword">for</span> p <span class="keyword">in</span> doc.paragraphs: <span class="comment"># 读取每一段内容，p是paragraph对象</span></span><br><span class="line"><span class="keyword">if</span> old_str <span class="keyword">in</span> p.text: <span class="comment"># 当旧的字符串&#x27;2021&#x27;存在这个段落内容中</span></span><br><span class="line">p.text = p.text.replace(old_str, new_str) <span class="comment"># 把这一段的内容设置成替换后的字符串</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 1).关于我注释的这一段是什么情况</span></span><br><span class="line"><span class="comment"># 下面这一段是按块来查询的，但是主要分块感觉很玄学，比如我的&#x27;2021&#x27;就拆成了&#x27;20&#x27;、&#x27;2&#x27;、&#x27;1&#x27;这样3个run（文字块）。</span></span><br><span class="line"><span class="comment"># 所以，如果能用文字块直接替换的话也可以这样子做的。</span></span><br><span class="line"><span class="comment"># inline = p.runs</span></span><br><span class="line"><span class="comment"># for i in inline:</span></span><br><span class="line"><span class="comment">#     if old_str in i.text:</span></span><br><span class="line"><span class="comment">#         text = i.text.replace(old_str, new_str)</span></span><br><span class="line"><span class="comment">#         i.text = text</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 2).关于设置替换后的段落的格式的代码，为什么不直接设置段落的格式，而要用一个循环来设置这个字体格式</span></span><br><span class="line"><span class="comment"># 当然是因为我没找到直接设置段落格式的方法，font这个属性就是run（文字块）的，段落对象没有的。</span></span><br></pre></td></tr></table></figure><p>想清楚看到每一段，每个run的内容，建议用debug模式跑一下就能看清楚了。</p><h3 id="2-字号和磅值对应关系"><a href="#2-字号和磅值对应关系" class="headerlink" title="2.字号和磅值对应关系"></a>2.字号和磅值对应关系</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">    字号和磅值对应关系: </span></span><br><span class="line"><span class="string">    初号: 42磅</span></span><br><span class="line"><span class="string">    小初: 36磅</span></span><br><span class="line"><span class="string">    一号: 26磅</span></span><br><span class="line"><span class="string">    小一: 24磅</span></span><br><span class="line"><span class="string">    二号: 22磅</span></span><br><span class="line"><span class="string">    小二: 18磅</span></span><br><span class="line"><span class="string">    三号: 16磅</span></span><br><span class="line"><span class="string">    小三: 15磅</span></span><br><span class="line"><span class="string">    四号: 14磅</span></span><br><span class="line"><span class="string">    小四: 12磅</span></span><br><span class="line"><span class="string">    五号: 10.5磅</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br></pre></td></tr></table></figure><h3 id="3-如果是-doc格式怎么办"><a href="#3-如果是-doc格式怎么办" class="headerlink" title="3.如果是.doc格式怎么办"></a>3.如果是.doc格式怎么办</h3><p>如果是.doc格式的文档，而不是.docx格式的怎么办呢？</p><p>当然是先全部转换成.docx格式啦，获取到文件列表后，循环转换一下就行。</p><p>用一个pywin32的库就可以啦。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># pip install pywin32</span></span><br><span class="line"><span class="keyword">from</span> win32com <span class="keyword">import</span> client</span><br><span class="line"></span><br><span class="line"><span class="comment"># .doc 格式转换成 .docx</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">doc2docx</span>(<span class="params">doc_file</span>):</span></span><br><span class="line">    word = client.Dispatch(<span class="string">&quot;Word.Application&quot;</span>)</span><br><span class="line">    doc = word.Documents.Open(doc_file)</span><br><span class="line">    doc.SaveAs(<span class="string">&quot;&#123;&#125;x&quot;</span>.<span class="built_in">format</span>(doc_file), <span class="number">12</span>)</span><br><span class="line">    doc.Close()</span><br><span class="line">    word.Quit()</span><br><span class="line">    <span class="keyword">return</span> doc_file+<span class="string">&#x27;x&#x27;</span></span><br></pre></td></tr></table></figure><h3 id="4-批量替换word文件名中指定字符"><a href="#4-批量替换word文件名中指定字符" class="headerlink" title="4.批量替换word文件名中指定字符"></a>4.批量替换word文件名中指定字符</h3><p>如果文件名中，也想把”2021年”替换成”2022年”呢？</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> os</span><br><span class="line"></span><br><span class="line"><span class="comment"># 重命名文件，修改文件名中的年份</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">rename_year</span>(<span class="params">year, file_list</span>):</span></span><br><span class="line">    docx_file_list = []</span><br><span class="line">    <span class="keyword">for</span> file <span class="keyword">in</span> file_list:</span><br><span class="line">        <span class="comment"># file: .doc</span></span><br><span class="line">        (file_path, file_name) = os.path.split(file)</span><br><span class="line">        <span class="comment"># file_path = F:\abc</span></span><br><span class="line">        <span class="comment"># file_name: 2021年度******.docx</span></span><br><span class="line">        <span class="comment"># print(file_name)</span></span><br><span class="line">        new_file_name = year + file_name[<span class="number">4</span>:]</span><br><span class="line">        new_file = os.path.join(file_path, new_file_name)</span><br><span class="line">        <span class="comment"># print(new_file) # F:\abc\2022年度******.docx</span></span><br><span class="line">        os.rename(file, new_file)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 如果有.doc格式，顺手在这里转换成.docx</span></span><br><span class="line">        <span class="keyword">if</span>(new_file.endswith(<span class="string">&quot;.doc&quot;</span>)):</span><br><span class="line">            new_file = doc2docx(new_file) <span class="comment"># doc2docx方法上面有讲</span></span><br><span class="line">        docx_file_list.append(new_file)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> docx_file_list</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;-----------------开始-----------------&#x27;</span>)</span><br><span class="line"><span class="comment"># 文件位置</span></span><br><span class="line">path = <span class="string">r&#x27;F:\abc&#x27;</span></span><br><span class="line">file_list = get_filelist(path) <span class="comment"># get_filelist方法上面也有讲</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">len</span>(file_list))</span><br><span class="line"></span><br><span class="line"><span class="comment"># 命名文件，修改文件名中的年份，这里也懒得替换了，就前面4个数字，反正就直接换上了</span></span><br><span class="line">docx_file_list = rename_year(<span class="string">&#x27;2022&#x27;</span>, file_list)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;-----------------完成！-----------------&#x27;</span>)</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Python合并多个ts视频文件</title>
      <link href="/2022/11/29/Python%E5%90%88%E5%B9%B6%E5%A4%9A%E4%B8%AAts%E8%A7%86%E9%A2%91%E6%96%87%E4%BB%B6/"/>
      <url>/2022/11/29/Python%E5%90%88%E5%B9%B6%E5%A4%9A%E4%B8%AAts%E8%A7%86%E9%A2%91%E6%96%87%E4%BB%B6/</url>
      
        <content type="html"><![CDATA[<p>其实用的还是ffmpeg，之前已经写过笔记了：<a href="/2022/09/21/%E7%94%A8ffmpeg%E5%90%88%E5%B9%B6%E5%A4%9A%E4%B8%AAts%E8%A7%86%E9%A2%91%E6%96%87%E4%BB%B6/" title="用ffmpeg合并多个ts视频文件">用ffmpeg合并多个ts视频文件</a>。</p><p>但是，如果有好多好多的ts文件的话，我又懒得整理这个file.txt（包含每一个ts文件的路径）文件。</p><p>于是，想到了用Python来生成这个file.txt文件。</p><p>话说，是今天用腾讯视频，发现猫抓出来没有m3u8文件的路径，全部是ts文件。于是，就索性全部下载下来，合并一下算了。（别的下载方法可能还有很多，这个就是可以用来合并多个ts文件的）</p><p>Python读取文件夹中所有文件的绝对路径，都很简单的。</p><a id="more"></a><p>比如用Python可以生成这个file.txt如下图所示，然后不管是用Python直接执行下ffmpeg或者用ffmpeg直接执行一条命令就行了。</p><img                       lazyload                     src="/images/loading.svg"                     data-src="/img/Python_merge_ts_files.png"                      style="zoom: 50%;"                ><h3 id="1-Python获取文件夹中所有ts文件的路径列表"><a href="#1-Python获取文件夹中所有ts文件的路径列表" class="headerlink" title="1.Python获取文件夹中所有ts文件的路径列表"></a>1.Python获取文件夹中所有ts文件的路径列表</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">file_dir=<span class="string">r&#x27;F:\3&#x27;</span></span><br><span class="line">ts_files_dir = file_dir + <span class="string">&#x27;\\&#x27;</span> + <span class="string">&#x27;*.*&#x27;</span></span><br><span class="line">ts_file_path_list = glob.glob(ts_files_dir)</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">len</span>(ts_file_path_list), ts_file_path_list)</span><br></pre></td></tr></table></figure><p>这里就有了一个问题，你会发现，ts_file_path_list这个列表中这些文件名想要的顺序并不是你想要的顺序，回头按照这个顺序拼接出来的视频就会有问题了。</p><p>直接用列表的sort()方法排序就是默认的排序方法，也是不行的，要用这篇笔记中的方法，给带数字的字符串进行一个排序先：<a href="/2022/11/29/Python-%E5%B8%A6%E6%95%B0%E5%AD%97%E7%9A%84%E5%AD%97%E7%AC%A6%E4%B8%B2%E6%8E%92%E5%BA%8F/" title="Python 带数字的字符串排序">Python 带数字的字符串排序</a></p><p><strong>修改后的代码应该是这样的：</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> glob</span><br><span class="line"><span class="comment"># &#x27;F:\3\00_gzc_1000035_0bc3riaguaaacmaebliogjqjlcwdnkfaa2sa.f304110.1.ts&#x27;</span></span><br><span class="line"><span class="comment"># 因为是绝对路径，所以ts文件前面的字符串是固定的长度，建议放个简单的位置，我这从第5个坐标开始的</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">customeSort</span>(<span class="params">arr</span>):</span></span><br><span class="line">    <span class="comment"># 查看第一个&#x27;_&#x27;的位置</span></span><br><span class="line">    i = arr.index(<span class="string">&#x27;_&#x27;</span>) <span class="comment"># 5</span></span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">int</span>(arr[<span class="number">5</span>:i]), arr[i:]</span><br><span class="line"></span><br><span class="line">file_dir=<span class="string">r&#x27;F:\3&#x27;</span></span><br><span class="line">ts_files_dir = file_dir + <span class="string">&#x27;\\&#x27;</span> + <span class="string">&#x27;*.*&#x27;</span></span><br><span class="line">ts_file_path_list = glob.glob(ts_files_dir)</span><br><span class="line">ts_file_path_list.sort(key=customeSort)</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">len</span>(ts_file_path_list), ts_file_path_list)</span><br></pre></td></tr></table></figure><p>这样排序出来就没啥问题了。</p><h3 id="2-写入file-txt文件"><a href="#2-写入file-txt文件" class="headerlink" title="2.写入file.txt文件"></a>2.写入file.txt文件</h3><p>有了ts_file_path_list后，按照ffmpeg合并多个ts视频文件的file.txt文件样式，直接写入就行了。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="comment"># 把ts文件路径写入file.txt</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">write_file_path_to_txt</span>(<span class="params">file_name, ts_file_path_list</span>):</span></span><br><span class="line">    <span class="keyword">with</span> <span class="built_in">open</span>(file_name, <span class="string">&quot;w&quot;</span>) <span class="keyword">as</span> f:</span><br><span class="line">        <span class="keyword">for</span> ts_path <span class="keyword">in</span> ts_file_path_list:</span><br><span class="line">            f.write(<span class="string">&#x27;file &#x27;</span> + <span class="string">&quot;&#x27;&quot;</span> + ts_path + <span class="string">&quot;&#x27;&quot;</span>)</span><br><span class="line">            f.write(<span class="string">&#x27;\n&#x27;</span>) </span><br><span class="line"></span><br><span class="line">ts_file_path_list = [] <span class="comment"># 这里先表示一下</span></span><br><span class="line">file_dir=<span class="string">r&#x27;F:\3&#x27;</span></span><br><span class="line">txt_file = file_dir + <span class="string">&#x27;\\&#x27;</span> + <span class="string">&#x27;file.txt&#x27;</span></span><br><span class="line"><span class="comment"># 如果文件存在，删除</span></span><br><span class="line"><span class="keyword">if</span>(os.path.exists(txt_file)):</span><br><span class="line">    os.remove(txt_file)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 把ts文件路径写入file.txt</span></span><br><span class="line">write_file_path_to_txt(txt_file, ts_file_path_list)</span><br></pre></td></tr></table></figure><h3 id="3-Python中执行ffmpeg命令"><a href="#3-Python中执行ffmpeg命令" class="headerlink" title="3.Python中执行ffmpeg命令"></a>3.Python中执行ffmpeg命令</h3><p>用<code>os.system(dos_command)</code>就可以执行命令了。<br>以下代码就在’F:\3’这个ts文件目录中生成了合并好的视频：a.mp4</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> os</span><br><span class="line">file_dir=<span class="string">r&#x27;F:\3&#x27;</span></span><br><span class="line">mp4_fie_name=<span class="string">&#x27;a.mp4&#x27;</span></span><br><span class="line">mp4_fie = file_dir + <span class="string">&#x27;\\&#x27;</span> + mp4_fie_name</span><br><span class="line"><span class="comment"># 用ffmpeg合并全部ts文件为mp4文件，当然这个ffmpeg肯定是添加到系统环境变量了的</span></span><br><span class="line"><span class="comment"># 原命令：ffmpeg.exe -f concat -safe 0 -i file.txt -c copy output.mp4</span></span><br><span class="line">dos_command = <span class="string">&#x27;ffmpeg.exe -f concat -safe 0 -i &#x27;</span> + txt_file + <span class="string">&#x27; -c copy &#x27;</span> + mp4_fie</span><br><span class="line"><span class="built_in">print</span>(dos_command)</span><br><span class="line">os.system(dos_command)</span><br></pre></td></tr></table></figure><h3 id="完整代码"><a href="#完整代码" class="headerlink" title="完整代码"></a>完整代码</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> os, glob</span><br><span class="line"></span><br><span class="line"><span class="comment"># 把ts文件路径写入file.txt</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">write_file_path_to_txt</span>(<span class="params">file_name, ts_file_path_list</span>):</span></span><br><span class="line">    <span class="keyword">with</span> <span class="built_in">open</span>(file_name, <span class="string">&quot;w&quot;</span>) <span class="keyword">as</span> f:</span><br><span class="line">        <span class="keyword">for</span> ts_path <span class="keyword">in</span> ts_file_path_list:</span><br><span class="line">            f.write(<span class="string">&#x27;file &#x27;</span> + <span class="string">&quot;&#x27;&quot;</span> + ts_path + <span class="string">&quot;&#x27;&quot;</span>)</span><br><span class="line">            f.write(<span class="string">&#x27;\n&#x27;</span>) </span><br><span class="line"></span><br><span class="line"><span class="comment"># &#x27;F:\3\00_gzc_1000035_0bc3riaguaaacmaebliogjqjlcwdnkfaa2sa.f304110.1.ts&#x27;</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">customeSort</span>(<span class="params">arr</span>):</span></span><br><span class="line">    <span class="comment"># 查看第一个&#x27;_&#x27;的位置</span></span><br><span class="line">    i = arr.index(<span class="string">&#x27;_&#x27;</span>) <span class="comment"># 5</span></span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">int</span>(arr[<span class="number">5</span>:i]), arr[i:]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 用ffmpeg合并全部ts文件为mp4文件</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span>(<span class="params">file_dir, mp4_fie_name</span>):</span></span><br><span class="line">    txt_file = file_dir + <span class="string">&#x27;\\&#x27;</span> + <span class="string">&#x27;file.txt&#x27;</span></span><br><span class="line">    <span class="comment"># 如果文件存在，删除</span></span><br><span class="line">    <span class="keyword">if</span>(os.path.exists(txt_file)):</span><br><span class="line">        os.remove(txt_file)</span><br><span class="line">    mp4_fie = file_dir + <span class="string">&#x27;\\&#x27;</span> + mp4_fie_name</span><br><span class="line">    </span><br><span class="line">    ts_files_dir = file_dir + <span class="string">&#x27;\\&#x27;</span> + <span class="string">&#x27;*.*&#x27;</span></span><br><span class="line">    ts_file_path_list = glob.glob(ts_files_dir)</span><br><span class="line">    ts_file_path_list.sort(key=customeSort)</span><br><span class="line">    <span class="built_in">print</span>(<span class="built_in">len</span>(ts_file_path_list), ts_file_path_list)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 把ts文件路径写入file.txt</span></span><br><span class="line">    write_file_path_to_txt(txt_file, ts_file_path_list)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 用ffmpeg合并全部ts文件为mp4文件</span></span><br><span class="line">    <span class="comment"># 原命令：ffmpeg.exe -f concat -safe 0 -i file.txt -c copy output.mp4</span></span><br><span class="line">    dos_command = <span class="string">&#x27;ffmpeg.exe -f concat -safe 0 -i &#x27;</span> + txt_file + <span class="string">&#x27; -c copy &#x27;</span> + mp4_fie</span><br><span class="line">    <span class="built_in">print</span>(dos_command)</span><br><span class="line">    os.system(dos_command)</span><br><span class="line"></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;-------------fine!&#x27;</span>)</span><br><span class="line"></span><br><span class="line">main(file_dir=<span class="string">r&#x27;F:\3&#x27;</span>, mp4_fie_name=<span class="string">&#x27;a.mp4&#x27;</span>)</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
            <tag> ffmpeg </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Python 带数字的字符串排序</title>
      <link href="/2022/11/29/Python-%E5%B8%A6%E6%95%B0%E5%AD%97%E7%9A%84%E5%AD%97%E7%AC%A6%E4%B8%B2%E6%8E%92%E5%BA%8F/"/>
      <url>/2022/11/29/Python-%E5%B8%A6%E6%95%B0%E5%AD%97%E7%9A%84%E5%AD%97%E7%AC%A6%E4%B8%B2%E6%8E%92%E5%BA%8F/</url>
      
        <content type="html"><![CDATA[<p>当字符串中有数字的时候，想给字符串进行排序，不管用列表的sort()方法，还是sorted()方法，都一想，得到的结果会发现都不是我们想要的。</p><p>举个例子：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">list1 = [<span class="string">&#x27;01&#x27;</span>, <span class="string">&#x27;11&#x27;</span>, <span class="string">&#x27;10&#x27;</span>, <span class="string">&#x27;21&#x27;</span>, <span class="string">&#x27;02&#x27;</span>]</span><br><span class="line">list2 = [<span class="string">&#x27;学生2&#x27;</span>, <span class="string">&#x27;学生1&#x27;</span>, <span class="string">&#x27;学生10&#x27;</span>, <span class="string">&#x27;学生4&#x27;</span>]</span><br><span class="line"></span><br><span class="line">list1.sort()</span><br><span class="line"><span class="built_in">print</span>(list1) <span class="comment"># [&#x27;01&#x27;, &#x27;02&#x27;, &#x27;10&#x27;, &#x27;11&#x27;, &#x27;21&#x27;]</span></span><br><span class="line">list2.sort()</span><br><span class="line"><span class="built_in">print</span>(list2) <span class="comment"># [&#x27;学生1&#x27;, &#x27;学生10&#x27;, &#x27;学生2&#x27;, &#x27;学生4&#x27;]</span></span><br></pre></td></tr></table></figure><a id="more"></a><p>当给这样的列表中的字符串直接排序的时候，看print打印出来的结果，只有纯数字的字符串列表list1是正确的，list2和list3排完后都不是我们想要的结果。</p><p>比如list2的排序，排序前是：<br><code>list2 = [&#39;学生2&#39;, &#39;学生1&#39;, &#39;学生10&#39;, &#39;学生4&#39;]</code><br>排序完后是：<br><code>list2 = [&#39;学生1&#39;, &#39;学生10&#39;, &#39;学生2&#39;, &#39;学生4&#39;]</code></p><p>这里就需要用到sort()方法中的key参数了。</p><h3 id="List-sort-方法"><a href="#List-sort-方法" class="headerlink" title="List sort()方法"></a>List sort()方法</h3><p><strong>功能：</strong>用于对原列表进行排序，如果指定参数，则使用比较函数指定的比较函数。<br><strong>语法：</strong>list.sort(cmp=None, key=None, reverse=False)</p><blockquote><p>cmp：可选参数, 如果指定了该参数会使用该参数的方法进行排序。<br>key：主要是用来进行比较的元素，只有一个参数，具体的函数的参数就是取自于可迭代对象中，指定可迭代对象中的一个元素来进行排序。<br>reverse：排序规则，reverse=True 降序， reverse=False 升序（默认）。</p></blockquote><h3 id="解决方法"><a href="#解决方法" class="headerlink" title="解决方法"></a>解决方法</h3><h4 id="1-使用匿名函数"><a href="#1-使用匿名函数" class="headerlink" title="1.使用匿名函数"></a>1.使用匿名函数</h4><p>代码如下 ：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">list2 = [<span class="string">&#x27;学生2&#x27;</span>, <span class="string">&#x27;学生1&#x27;</span>, <span class="string">&#x27;学生10&#x27;</span>, <span class="string">&#x27;学生4&#x27;</span>]</span><br><span class="line"></span><br><span class="line">list2.sort(key=<span class="keyword">lambda</span> customeSort: (customeSort[:<span class="number">2</span>], <span class="built_in">int</span>(customeSort[<span class="number">2</span>:])))</span><br><span class="line"><span class="built_in">print</span>(list2) <span class="comment"># [&#x27;学生1&#x27;, &#x27;学生2&#x27;, &#x27;学生4&#x27;, &#x27;学生10&#x27;]</span></span><br></pre></td></tr></table></figure><p>使用匿名函数，customeSort指列表的数据。<br>如果不好理解，可以用下面的方法。</p><h4 id="2-更清晰的写法"><a href="#2-更清晰的写法" class="headerlink" title="2.更清晰的写法"></a>2.更清晰的写法</h4><p>用这个方法，可以直接debug看一下，每一步做了什么。结果是一样的。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">customeSort</span>(<span class="params">arr</span>):</span></span><br><span class="line">    <span class="keyword">return</span> arr[:<span class="number">2</span>], <span class="built_in">int</span>(arr[<span class="number">2</span>:])</span><br><span class="line"></span><br><span class="line">list2 = [<span class="string">&#x27;学生2&#x27;</span>, <span class="string">&#x27;学生1&#x27;</span>, <span class="string">&#x27;学生10&#x27;</span>, <span class="string">&#x27;学生4&#x27;</span>]</span><br><span class="line"></span><br><span class="line">list2.sort(key=customeSort)</span><br><span class="line"><span class="built_in">print</span>(list2) <span class="comment"># [&#x27;学生1&#x27;, &#x27;学生2&#x27;, &#x27;学生4&#x27;, &#x27;学生10&#x27;]</span></span><br></pre></td></tr></table></figure><p>这个方法还有一个好处 ，比如上面的例子中，数字的起始坐标位置都是2，如果不是确定的就写起来更复杂一点了。但写出来一个函数，就看起来清晰一点了。</p><p>比如下面这个例子（明显，我是想按第一个<code>_</code>前面的数字排序一下，默认的排序出来是不对的）：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">customeSort</span>(<span class="params">arr</span>):</span></span><br><span class="line">    <span class="comment"># 查看第一个&#x27;_&#x27;的位置</span></span><br><span class="line">    i = arr.index(<span class="string">&#x27;_&#x27;</span>)</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">int</span>(arr[:i]), arr[i:]</span><br><span class="line"></span><br><span class="line">list3 = [<span class="string">&#x27;00_gzc_1000035_0bc3riaguaaacmaebliogjqjlcwdnkfaa2sa.f304110.1&#x27;</span>,</span><br><span class="line"><span class="string">&#x27;011_gzc_1000035_0bc3riaguaaacmaebliogjqjlcwdnkfaa2sa.f304110.1&#x27;</span>,</span><br><span class="line"><span class="string">&#x27;010_gzc_1000035_0bc3riaguaaacmaebliogjqjlcwdnkfaa2sa.f304110.1&#x27;</span>,</span><br><span class="line"><span class="string">&#x27;03_gzc_1000035_0bc3riaguaaacmaebliogjqjlcwdnkfaa2sa.f304110.1&#x27;</span>]</span><br><span class="line"></span><br><span class="line">list3.sort(key=customeSort)</span><br><span class="line"><span class="built_in">print</span>(list3)</span><br><span class="line"><span class="comment"># list3排序后结果如下：</span></span><br><span class="line"><span class="comment"># [&#x27;00_gzc_1000035_0bc3riaguaaacmaebliogjqjlcwdnkfaa2sa.f304110.1&#x27;,</span></span><br><span class="line"><span class="comment"># &#x27;03_gzc_1000035_0bc3riaguaaacmaebliogjqjlcwdnkfaa2sa.f304110.1&#x27;,</span></span><br><span class="line"><span class="comment"># &#x27;010_gzc_1000035_0bc3riaguaaacmaebliogjqjlcwdnkfaa2sa.f304110.1&#x27;,</span></span><br><span class="line"><span class="comment"># &#x27;011_gzc_1000035_0bc3riaguaaacmaebliogjqjlcwdnkfaa2sa.f304110.1&#x27;]</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Joplin使用群晖NAS作同步存储</title>
      <link href="/2022/11/24/Joplin%E4%BD%BF%E7%94%A8%E7%BE%A4%E6%99%96NAS%E4%BD%9C%E5%90%8C%E6%AD%A5%E5%AD%98%E5%82%A8/"/>
      <url>/2022/11/24/Joplin%E4%BD%BF%E7%94%A8%E7%BE%A4%E6%99%96NAS%E4%BD%9C%E5%90%8C%E6%AD%A5%E5%AD%98%E5%82%A8/</url>
      
        <content type="html"><![CDATA[<p>用了多年印象笔记后，已经逐渐放弃了，近n个月/一年来也就还偶尔用用剪藏，做个备份啥的。越来越臃肿的软件，还会卡死，可怕，频率还挺高，可能一天就一次。还有好几年的会员，但不升专业版、连代码块也用不了 ，简直了~</p><p>之前买了群晖NAS，就云同步用用群晖那丑丑的Note Station做做备份，虽然丑，功能很简洁，到也不卡，手机app也可以用。主要还是用Typora这个本地笔记软件了，原来基本上笔记也是用Markdown语言写的，用的Hexo的博客，带搜索功能，相当于很多笔记都直接在博客上搜索了。</p><p>然后有小伙伴找到了这款开源的免费笔记——Joplin，支持多平台，Windows/Linux/MacOS，IOS/Android都支持，那就方便了。</p><p>然后<strong>云端同步</strong>支持很多种方式，这个真是太棒了！<br>比如支持Dropbox、OneDrive，不过考虑到这个的空间也不大，服务器访问也不稳定，就不用了；<br>比如支持自建Joplin Server，可以在服务器上自己建，也可以用腾讯云的对象存储；<br>还有官方收费版的Joplin Cloud；<br>还有就是WebDAV，群晖NAS有WebDAV Server的官方套件，直接安装、配置下就可以用了！</p><a id="more"></a><h2 id="一、群晖NAS启用WebDAV-Server套件"><a href="#一、群晖NAS启用WebDAV-Server套件" class="headerlink" title="一、群晖NAS启用WebDAV Server套件"></a>一、群晖NAS启用WebDAV Server套件</h2><p>使用属于administrators群组的帐户登录 DSM。<br>比如我的DSM地址为：<a class="link"   href="http://192.168.1.151:5000/" >http://192.168.1.151:5000<i class="fas fa-external-link-alt"></i></a>  （默认5000端口）</p><p>1.进入套件中心安装WebDAV Server。</p><p>2.启动WebDAV Server并勾选启用 HTTP和启用 HTTPS复选框。<br>配置一般默认就行。<br>配置端口号，HTTP端口：5005，HTTPS端口：5006，保存设置。</p><h2 id="二、Joplin配置WebDAV同步"><a href="#二、Joplin配置WebDAV同步" class="headerlink" title="二、Joplin配置WebDAV同步"></a>二、Joplin配置WebDAV同步</h2><p>首先在home目录下，建一个目录用来存储，比如 Joplin-note，那路径即为：<code>/home/Drive/Joplin-note</code></p><p>打开Joplin-&gt;【工具】-&gt;【选项】-&gt;【同步】菜单项。</p><h3 id="（一）、局域网内同步配置"><a href="#（一）、局域网内同步配置" class="headerlink" title="（一）、局域网内同步配置"></a>（一）、局域网内同步配置</h3><h4 id="1-同步目标：WebDAV"><a href="#1-同步目标：WebDAV" class="headerlink" title="1.同步目标：WebDAV"></a>1.同步目标：WebDAV</h4><p>同步目标很简单，这里选：WebDAV</p><h4 id="2-WebDAV-URL"><a href="#2-WebDAV-URL" class="headerlink" title="2.WebDAV URL"></a>2.WebDAV URL</h4><p>这里最主要就是这个URL怎么填写。</p><p>如果你按（局域网）ip来填写，用http的话，那就用上面配置的5005端口，也是简单的：<br>http://[群晖的ip]:5005/home/Drive/Joplin-note</p><p>即：<a class="link"   href="http://192.168.1.151:5005/home/Drive/Joplin-note" >http://192.168.1.151:5005/home/Drive/Joplin-note<i class="fas fa-external-link-alt"></i></a></p><h4 id="3-WebDAV用户名和密码"><a href="#3-WebDAV用户名和密码" class="headerlink" title="3.WebDAV用户名和密码"></a>3.WebDAV用户名和密码</h4><p>WebDAV用户名密码就是群晖NAS的登录的账号和密码。</p><p>填写完后，直接点击【检查同步配置】，看到提示“成功！同步配置看起来没问题。”基本上就没啥问题了。</p><p>但是，这个肯定就只能局域网内使用了，就家里连了这个路由的，是可以访问的。如果要在外网访问，肯定就不行了 。</p><p>PS.点击【显示高级选项】，有一个【删除本地数据并从同步目录导入数据】的按钮，当第1个客户端登录完后，后面再有客户端用这个同步的配置，就点一下这个同步一下就行了。</p><h3 id="（二）、外网同步配置"><a href="#（二）、外网同步配置" class="headerlink" title="（二）、外网同步配置"></a>（二）、外网同步配置</h3><p><strong>思路</strong>：<br>既然内网可以访问了，如果像我一样有公网ip的服务器的话，用frp内网穿透（内网穿透不限这个工具）下就可以啦。</p><p>怎么在服务器上搭建frp服务器看这篇：<a href="/2022/06/18/Docker%E6%90%AD%E5%BB%BAfrp%E5%86%85%E7%BD%91%E7%A9%BF%E9%80%8F%E6%9C%8D%E5%8A%A1%E5%99%A8/" title="Docker搭建frp内网穿透服务器">Docker搭建frp内网穿透服务器</a><br>没有安装Docker看这篇：<a href="/2022/11/19/Ubuntu%E5%AE%89%E8%A3%85Docker/" title="Ubuntu安装Docker">Ubuntu安装Docker</a><br>群晖NAS使用frp看这篇：<a href="/2022/10/17/%E7%BE%A4%E6%99%96NAS-frp%E5%86%85%E7%BD%91%E7%A9%BF%E9%80%8F%E6%95%99%E7%A8%8B/" title="群晖NAS frp内网穿透教程">群晖NAS frp内网穿透教程</a></p><p>使用方法，其实跟普通的电脑也没啥区别，群晖启用下Docker，直接Docker用frp就行。</p><p>比如我服务器ip：43.142.94.65<br>在 frpc.ini配置文件中，把本机（群晖）的 local_port = 5005 映射到对应的 remote_port = 18588后，WebDAV URL就变成了：<a class="link"   href="http://43.142.94.65:18588/home/Drive/Joplin-note" >http://43.142.94.65:18588/home/Drive/Joplin-note<i class="fas fa-external-link-alt"></i></a></p><h3 id="（三）、外网HTTPS配置"><a href="#（三）、外网HTTPS配置" class="headerlink" title="（三）、外网HTTPS配置"></a>（三）、外网HTTPS配置</h3><p>因为我的服务器本来就配了域名的。所以就顺便用https了，毕竟域名比ip好记。回头服务器换了，ip还会跟着换。</p><p>使用https的话，就不能直接用ip了，因为群晖上是需要证书的 ，需要 给域名上传个证书的。</p><h4 id="1-群晖NAS-启用DNSPod-DDNS"><a href="#1-群晖NAS-启用DNSPod-DDNS" class="headerlink" title="1.群晖NAS 启用DNSPod DDNS"></a>1.群晖NAS 启用DNSPod DDNS</h4><p>我的域名是在腾讯云的DNSPod上买的，直接有官网文档：<a class="link"   href="https://docs.dnspod.cn/dns/dnspod-synology-nas-ddns/" >群晖（Synology） NAS 启用 DNSPod DDNS<i class="fas fa-external-link-alt"></i></a></p><ul><li><p>1).DNSPod注册域名</p></li><li><p>2).进入DNSPod管理控制台，添加解析记录，主机记录为 www，记录值为任意 IP 的 A 记录。</p></li><li><p>3).进入 API 密钥 页面，在DNSPod Token页签，单击【创建密钥】，输入自定义的密钥名称。ID和Token保存好。</p></li><li><p>4).管理员登录群晖NAS管理，单击【控制面板】&gt;【外部访问】，【DDNS】中新增。</p><blockquote><p>服务供应商：DNSPod.cn<br>主机名称：注册的域名<br>外部地址：服务器ip（我的域名是解析到这台服务器ip的）<br>用户名/电子邮箱：填写获取到的DNSPod ID。<br>密码/密钥：填写获取到的密钥。</p></blockquote></li><li><p>5).单击【测试联机】，测试是否能成功联机。状态栏显示为正常，即代表成功联机。</p></li></ul><h4 id="2-群晖NAS-安装免费-SSL-证书"><a href="#2-群晖NAS-安装免费-SSL-证书" class="headerlink" title="2.群晖NAS 安装免费 SSL 证书"></a>2.群晖NAS 安装免费 SSL 证书</h4><p>也有官网文档：<a class="link"   href="https://docs.dnspod.cn/dns/dnspod-synology-ssl/" >群晖（Synology）NAS 安装免费 SSL 证书<i class="fas fa-external-link-alt"></i></a></p><ul><li><p>1).DNSPod中进入域名的【记录管理】页面，免费申请SSL证书。</p></li><li><p>2).等待通过后会有通知的，再【查看详情】，下载证书到本地就行。</p></li><li><p>3).下载后打开Nginx文件夹</p><blockquote><p>证书：.crt后缀的文件<br>私钥：.key后缀的文件</p></blockquote></li><li><p>4).管理员登录群晖NAS管理，单击【控制面板】&gt;【安全性】，选择【证书】页签，单击【新增】。<br>【创建证书】-&gt;【添加新证书】-&gt;【导入证书】，描述自己写，上传后确定就行。</p></li></ul><p>然后就可以使用 https://[域名]:5001 访问群晖的管理后台页面了。就表示都配置妥当了。</p><h4 id="3-WebDAV-URL"><a href="#3-WebDAV-URL" class="headerlink" title="3.WebDAV URL"></a>3.WebDAV URL</h4><p>假设我的域名为：abccba.com（当然，域名已解析到我的服务器）<br>然后在 frpc.ini配置文件中，把本机（群晖）的 local_port = 5006 映射到对应的 remote_port = 18589</p><p>那WebDAV URL就是：<br><a class="link"   href="https://www.abccba.com:18589/home/Drive/Joplin-note" >https://www.abccba.com:18589/home/Drive/Joplin-note<i class="fas fa-external-link-alt"></i></a></p><p>PS.话说群晖里是可以申请免费的一个域名的，类似<code>[用户名].synology.me</code>这样，前提是要家里有公网ip或者用ipv6，反正我家里没公网ip，但是自己有域名，就不折腾了，直接用自己的域名+服务器ip。</p><p>PPS.话说在【通用选项】中可以修改笔记存储路径，建议一开始就修改好再使用。博客内搜一下，有笔记。（毕竟默认在系统C盘）<br>然后存储路径中看到有个database.sqlite的文件，就是sqlite的数据库文件啦。可以直接用sqlite数据库的可视化工具查看数据库中的内容，有个notes的表就用来存笔记的。感觉定时备份下这个数据库文件，数据保存应该问题不大。</p><p>最后，想说Joplin虽然也支持印象笔记导出后的文件直接导入，但数据库好像老是崩，也不知道啥情况，可能因为一开始我用的是腾讯的对象存储的关系，算了，也不导入了，就当顺便整理下笔记吧。</p><p>参考：<a class="link"   href="https://www.jianshu.com/p/6cff65fa10b2" >群晖NAS配合Joplin搭建私有笔记服务<i class="fas fa-external-link-alt"></i></a></p>]]></content>
      
      
      <categories>
          
          <category> Windows </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Ubuntu设置普通用户也能执行docker命令</title>
      <link href="/2022/11/19/Ubuntu%E8%AE%BE%E7%BD%AE%E6%99%AE%E9%80%9A%E7%94%A8%E6%88%B7%E4%B9%9F%E8%83%BD%E6%89%A7%E8%A1%8Cdocker%E5%91%BD%E4%BB%A4/"/>
      <url>/2022/11/19/Ubuntu%E8%AE%BE%E7%BD%AE%E6%99%AE%E9%80%9A%E7%94%A8%E6%88%B7%E4%B9%9F%E8%83%BD%E6%89%A7%E8%A1%8Cdocker%E5%91%BD%E4%BB%A4/</url>
      
        <content type="html"><![CDATA[<p>在使用docker命令的时候，是需要在命令前加上<code>sudo</code>的管理员权限的，不然就会没有权限。</p><p>每次要加很烦，之前是直接就切换到root用户来着 。</p><p>如果不想切换到root用户，直接使用当前登录用户，可以用以下</p><a id="more"></a><p><strong>设置方法：</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 1.#添加docker用户组</span></span><br><span class="line">sudo groupadd docker</span><br><span class="line"><span class="comment"># 结果如下：（正常情况下都已经有docker用户组了）</span></span><br><span class="line"><span class="comment"># roupadd: group &#x27;docker&#x27; already exists</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 2.将当前登陆用户加入到docker用户组中</span></span><br><span class="line">sudo gpasswd -a <span class="variable">$USER</span> docker</span><br><span class="line"><span class="comment"># 结果如下（添加成功）：</span></span><br><span class="line"><span class="comment"># Adding user hduzn to group docker</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 3.更新docker用户组</span></span><br><span class="line">newgrp docker</span><br></pre></td></tr></table></figure><p>然后当前用户就可以直接用docker命令了。</p>]]></content>
      
      
      <categories>
          
          <category> Docker </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
            <tag> Docker </tag>
            
            <tag> Ubuntu </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Ubuntu安装Docker</title>
      <link href="/2022/11/19/Ubuntu%E5%AE%89%E8%A3%85Docker/"/>
      <url>/2022/11/19/Ubuntu%E5%AE%89%E8%A3%85Docker/</url>
      
        <content type="html"><![CDATA[<p>自己装了一台Ubuntu Server，就是为了装个Docker，方便安装一些小的服务。</p><p>Ubuntu安装Docker很简单，官方直接就有文档：<br>英文文档：<a class="link"   href="https://docs.docker.com/engine/install/ubuntu/" >https://docs.docker.com/engine/install/ubuntu/<i class="fas fa-external-link-alt"></i></a><br>中文文档：<a class="link"   href="https://dockerdocs.cn/engine/install/ubuntu/" >https://dockerdocs.cn/engine/install/ubuntu/<i class="fas fa-external-link-alt"></i></a></p><a id="more"></a><h2 id="一、操作系统要求"><a href="#一、操作系统要求" class="headerlink" title="一、操作系统要求"></a>一、操作系统要求</h2><p>要安装Docker Engine，Ubuntu64位版本支持的有：</p><blockquote><p>Ubuntu Hirsute 21.04<br>Ubuntu Groovy 20.10<br>Ubuntu Focal 20.04（LTS）<br>Ubuntu Bionic 18.04（LTS）<br>Ubuntu Xenial 16.04（LTS）</p></blockquote><p>现在最新Ubuntu Server是22.04，不知道是否支持，照理应该最新的都会支持的，可能文档还没更新。不确定系统版本，用命令查看一下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">lsb_release -a</span><br><span class="line"></span><br><span class="line"><span class="comment"># 相关结果如下：</span></span><br><span class="line">---------------------------------------</span><br><span class="line">Distributor ID:Ubuntu</span><br><span class="line">Description:Ubuntu 20.04.5 LTS</span><br><span class="line">Release:20.04</span><br><span class="line">---------------------------------------</span><br></pre></td></tr></table></figure><h2 id="二、卸载旧版本Docker"><a href="#二、卸载旧版本Docker" class="headerlink" title="二、卸载旧版本Docker"></a>二、卸载旧版本Docker</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get remove docker docker-engine docker.io containerd runc</span><br></pre></td></tr></table></figure><p>如果提示没有安装，没问题。</p><h2 id="三、安装Docker"><a href="#三、安装Docker" class="headerlink" title="三、安装Docker"></a>三、安装Docker</h2><p><strong>安装方式：</strong></p><ul><li>大多数用户会 设置Docker的存储库并从中进行安装，以简化安装和升级任务。这是推荐的方法。</li><li>一些用户下载并手动安装DEB软件包， 并完全手动管理升级。这在诸如在无法访问互联网的空白系统上安装Docker的情况下很有用。</li><li>在测试和开发环境中，一些用户选择使用自动 便利脚本来安装Docker。</li></ul><p>这里就用推荐的方法：使用存储库安装（Install using the repository）</p><h3 id="1-设置存储库（Set-up-the-repository）"><a href="#1-设置存储库（Set-up-the-repository）" class="headerlink" title="1.设置存储库（Set up the repository）"></a>1.设置存储库（Set up the repository）</h3><p>1).更新apt软件包索引并安装软件包以允许apt通过HTTPS使用存储库</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get update</span><br><span class="line"></span><br><span class="line">sudo apt-get install \</span><br><span class="line">    apt-transport-https \</span><br><span class="line">    ca-certificates \</span><br><span class="line">    curl \</span><br><span class="line">    gnupg \</span><br><span class="line">    lsb-release</span><br></pre></td></tr></table></figure><p>2).添加Docker的官方GPG密钥（Add Docker’s official GPG key）</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">sudo mkdir -p /etc/apt/keyrings</span><br><span class="line"></span><br><span class="line">curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo gpg --dearmor -o /etc/apt/keyrings/docker.gpg</span><br></pre></td></tr></table></figure><p>3).使用以下命令来设置存储库（Use the following command to set up the repository）</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">echo</span> \</span><br><span class="line">  <span class="string">&quot;deb [arch=<span class="subst">$(dpkg --print-architecture)</span> signed-by=/etc/apt/keyrings/docker.gpg] https://download.docker.com/linux/ubuntu \</span></span><br><span class="line"><span class="string">  <span class="subst">$(lsb_release -cs)</span> stable&quot;</span> | sudo tee /etc/apt/sources.list.d/docker.list &gt; /dev/null</span><br></pre></td></tr></table></figure><h3 id="2-安装Docker引擎（Install-Docker-Engine）"><a href="#2-安装Docker引擎（Install-Docker-Engine）" class="headerlink" title="2.安装Docker引擎（Install Docker Engine）"></a>2.安装Docker引擎（Install Docker Engine）</h3><p>1).更新apt程序包索引（Update the apt package index）：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get update</span><br></pre></td></tr></table></figure><p>2).安装最新版本的Docker Engine，containerd和Docker Compose（Install Docker Engine, containerd, and Docker Compose）</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get install docker-ce docker-ce-cli containerd.io docker-compose-plugin</span><br></pre></td></tr></table></figure><p>如果要安装指定版本的Docker Engine：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 列出仓库中可用的版本</span></span><br><span class="line">apt-cache madison docker-ce</span><br><span class="line"><span class="comment"># 指定版本比如：5:18.09.1~3-0~ubuntu-xenial</span></span><br><span class="line"><span class="comment"># VERSION_STRING=5:18.09.1~3-0~ubuntu-xenial</span></span><br><span class="line">sudo apt-get install docker-ce=&lt;VERSION_STRING&gt; docker-ce-cli=&lt;VERSION_STRING&gt; containerd.io</span><br></pre></td></tr></table></figure><p>3).通过运行hello-world 映像来验证是否正确安装了Docker Engine（Verify that the Docker Engine installation is successful by running the hello-world image）</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo docker run hello-world</span><br></pre></td></tr></table></figure><p>最后用docker命令查看下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">docker version <span class="comment"># 查看docker版本</span></span><br><span class="line">docker images <span class="comment"># 列出镜像列表</span></span><br><span class="line">docker ps -a <span class="comment"># 列出所有容器（包括停止的容器）</span></span><br></pre></td></tr></table></figure><p>Docker常用命令看这篇笔记：<a href="/2022/05/09/Docker%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/" title="Docker常用命令">Docker常用命令</a></p><h3 id="3-启动Docker"><a href="#3-启动Docker" class="headerlink" title="3.启动Docker"></a>3.启动Docker</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 安装完成后，查看Docker服务是否运行</span></span><br><span class="line">systemctl status docker</span><br><span class="line"></span><br><span class="line"><span class="comment"># 启动Docker服务</span></span><br><span class="line">sudo systemctl start docker</span><br><span class="line"></span><br><span class="line"><span class="comment"># Docker服务设置开机自启动</span></span><br><span class="line">sudo systemctl <span class="built_in">enable</span> docker</span><br></pre></td></tr></table></figure><h3 id="4-升级Docker引擎"><a href="#4-升级Docker引擎" class="headerlink" title="4.升级Docker引擎"></a>4.升级Docker引擎</h3><p>要升级Docker Engine，请先运行<code>sudo apt-get update</code>。</p><h3 id="5-卸载Docker引擎（Uninstall-Docker-Engine）"><a href="#5-卸载Docker引擎（Uninstall-Docker-Engine）" class="headerlink" title="5.卸载Docker引擎（Uninstall Docker Engine）"></a>5.卸载Docker引擎（Uninstall Docker Engine）</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 1).卸载Docker Engine，CLI和Containerd和Docker Compose packages</span></span><br><span class="line">sudo apt-get purge docker-ce docker-ce-cli containerd.io docker-compose-plugin</span><br><span class="line"></span><br><span class="line"><span class="comment"># 2).主机上镜像、窗口、卷或自定义的配置文件不会自动删除。要删除所有:</span></span><br><span class="line">sudo rm -rf /var/lib/docker</span><br><span class="line">sudo rm -rf /var/lib/containerd</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Docker </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
            <tag> Docker </tag>
            
            <tag> Ubuntu </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Ubuntu修改主机名（hostnamectl命令）</title>
      <link href="/2022/11/19/Ubuntu%E4%BF%AE%E6%94%B9%E4%B8%BB%E6%9C%BA%E5%90%8D/"/>
      <url>/2022/11/19/Ubuntu%E4%BF%AE%E6%94%B9%E4%B8%BB%E6%9C%BA%E5%90%8D/</url>
      
        <content type="html"><![CDATA[<p>安装Ubuntu（刚安装了Ubuntu 20.04LTS）的时候，最后面有设置登录的账号信息，包括用户名、密码，还有Your server’s name这一项，当时就随意跟用户名写成了一样的 。</p><p>然后登录进去后，发现前面显示的就是：<strong>用户名@主机名</strong>，然后发现都是一样的，就感觉怪怪的，所以想改一下。</p><a id="more"></a><h3 id="1-hostnamectl命令"><a href="#1-hostnamectl命令" class="headerlink" title="1.hostnamectl命令"></a>1.hostnamectl命令</h3><p><strong>语法</strong>：hostnamectl [参数]<br><strong>常用参数</strong>：</p><ul><li>status：显示当前主机名设置</li><li>set-hostname：设置主机名</li></ul><h3 id="2-修改主机名"><a href="#2-修改主机名" class="headerlink" title="2.修改主机名"></a>2.修改主机名</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 查看当前主机名设置，或者 hostnamectl status</span></span><br><span class="line">hostnamectl</span><br><span class="line"></span><br><span class="line"><span class="comment"># 修改当前主机名为：abc.com</span></span><br><span class="line">hostnamectl set-hostname abc.com</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看修改后的结果</span></span><br><span class="line">hostnamectl status</span><br></pre></td></tr></table></figure><p>修改完后，再登录后，可以看到用户名@主机名这里就顺便多了 。</p><p>更多关于主机名的简介：<a class="link"   href="https://cloud.tencent.com/developer/article/1649332" >如何在 Ubuntu 20.04 上修改主机名<i class="fas fa-external-link-alt"></i></a></p>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
            <tag> Ubuntu </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Ubuntu添加新硬盘</title>
      <link href="/2022/11/18/Ubuntu%E6%B7%BB%E5%8A%A0%E6%96%B0%E7%A1%AC%E7%9B%98/"/>
      <url>/2022/11/18/Ubuntu%E6%B7%BB%E5%8A%A0%E6%96%B0%E7%A1%AC%E7%9B%98/</url>
      
        <content type="html"><![CDATA[<p>因为我这台主机本身就装了2块硬盘，一块256G的固态+1T机械硬盘。之前安装Ubuntu的时候，使用了256G的固态硬盘。</p><p>原来装的是windows，2块硬盘都在用的。所以，现在需要把1T的硬盘挂载下。<br>本文中使用了root用户，没有用root用户的话，需要sudo记得加上。</p><p><strong>1.查看硬盘信息</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">fdisk -l</span><br><span class="line"></span><br><span class="line"><span class="comment"># 新硬盘相关结果如下：</span></span><br><span class="line">---------------------------------------</span><br><span class="line">...</span><br><span class="line">Disk /dev/sda: 931.53 GiB, 1000204886016 bytes, 1953525168 sectors</span><br><span class="line">Disk model: ST1000DM010-2EP1</span><br><span class="line">Units: sectors of 1 * 512 = 512 bytes</span><br><span class="line">Sector size (logical/physical): 512 bytes / 4096 bytes</span><br><span class="line">I/O size (minimum/optimal): 4096 bytes / 4096 bytes</span><br><span class="line">---------------------------------------</span><br></pre></td></tr></table></figure><p>记住：/dev/sda</p><a id="more"></a><p><strong>2.删除分区</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 进入使用fdisk, /dev/sda为fdisk -l查询到的新硬盘的信息</span></span><br><span class="line">fdisk /dev/sda</span><br><span class="line"></span><br><span class="line"><span class="comment"># 获取帮助</span></span><br><span class="line">m</span><br><span class="line"><span class="comment"># 输入d后回车，删除分区；继续输入d回车，直到提示没有可删除的分区了 </span></span><br><span class="line">d</span><br><span class="line"><span class="comment"># 最后输入w命令，写入并退出</span></span><br><span class="line">w</span><br></pre></td></tr></table></figure><p><strong>3.挂载目录</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 格式化成xfs文件系统，/dev/sda为fdisk -l查询到的新硬盘的信息</span></span><br><span class="line">mkfs.xfs -f /dev/sda</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看/dev/sda文件系统情况，可以看到还未挂载</span></span><br><span class="line">lsblk -f</span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建挂载目录</span></span><br><span class="line">mkdir /mnt/sda</span><br><span class="line"><span class="comment"># 挂载目录</span></span><br><span class="line">mount /dev/sda /mnt/sda</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看已挂载的分区和文件系统类型（Type）</span></span><br><span class="line">df -T</span><br><span class="line"><span class="comment"># 相关结果如下：</span></span><br><span class="line">---------------------------------------</span><br><span class="line">Filesystem                        Type     1K-blocks    Used Available Use% Mounted on</span><br><span class="line">...</span><br><span class="line">/dev/mapper/ubuntu--vg-ubuntu--lv ext4     242397656 8736244 222701312   4% /</span><br><span class="line">/dev/sdb2                         ext4       1992552  109248   1762064   6% /boot</span><br><span class="line">...</span><br><span class="line">/dev/sda                          xfs      976285652 6839860 969445792   1% /mnt/sda</span><br><span class="line">---------------------------------------</span><br><span class="line"><span class="comment"># 查看文件系统磁盘使用情况</span></span><br><span class="line">df -h</span><br></pre></td></tr></table></figure><p><strong>4.重启时自动挂载</strong></p><p>配置/etc/fstab文件。用vi打开配置文件，编辑</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vi /etc/fstab</span><br></pre></td></tr></table></figure><p>在配置文件最后一行后面加上一行以下内容：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;dev&#x2F;sda &#x2F;mnt&#x2F;sda xfs defaults 0 0</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
            <tag> Ubuntu </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Ubuntu安装完显示容量小于硬盘容量</title>
      <link href="/2022/11/18/Ubuntu%E5%AE%89%E8%A3%85%E5%AE%8C%E6%98%BE%E7%A4%BA%E5%AE%B9%E9%87%8F%E5%B0%8F%E4%BA%8E%E7%A1%AC%E7%9B%98%E5%AE%B9%E9%87%8F/"/>
      <url>/2022/11/18/Ubuntu%E5%AE%89%E8%A3%85%E5%AE%8C%E6%98%BE%E7%A4%BA%E5%AE%B9%E9%87%8F%E5%B0%8F%E4%BA%8E%E7%A1%AC%E7%9B%98%E5%AE%B9%E9%87%8F/</url>
      
        <content type="html"><![CDATA[<p>Ubuntu Server 20.04安装完后（安装笔记：<a href="/2022/11/18/U%E7%9B%98%E5%AE%89%E8%A3%85Ubuntu-Server/" title="U盘安装Ubuntu Server">U盘安装Ubuntu Server</a>），发现安装的这块硬盘有256G，但明显只看到100G。因为安装的时候都直接默认了。</p><p><strong>解决方法：</strong></p><p><strong>1.用 <code>lvdisplay</code> 命令查看LVM逻辑卷信息</strong></p><p>可以看到结果中（LV Path记一下，后面会用到）：</p><blockquote><p>LV Path                /dev/ubuntu-vg/ubuntu-lv<br>LV Size           100.00 GiB</p></blockquote><a id="more"></a><p><strong>2.用 <code>fdisk -l</code>命令查看所有分区表</strong></p><p>结果如下，可以看到硬盘实际大小是238.49G（256G硬盘）是SAMSUNG三星的。明显是大于100G的。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">---------------------------------------</span><br><span class="line">...</span><br><span class="line">Disk /dev/sdb: 238.49 GiB, 256060514304 bytes, 500118192 sectors</span><br><span class="line">Disk model: SAMSUNG MZNLN256</span><br><span class="line">Units: sectors of 1 * 512 = 512 bytes</span><br><span class="line">Sector size (logical/physical): 512 bytes / 512 bytes</span><br><span class="line">I/O size (minimum/optimal): 512 bytes / 512 bytes</span><br><span class="line">Disklabel <span class="built_in">type</span>: gpt</span><br><span class="line">Disk identifier: 7F793134-2627-4B7F-AF49-C65449FE962C</span><br><span class="line"></span><br><span class="line">Device       Start       End   Sectors   Size Type</span><br><span class="line">/dev/sdb1     2048   2203647   2201600   1.1G EFI System</span><br><span class="line">/dev/sdb2  2203648   6397951   4194304     2G Linux filesystem</span><br><span class="line">/dev/sdb3  6397952 500115455 493717504 235.4G Linux filesystem</span><br><span class="line">---------------------------------------</span><br></pre></td></tr></table></figure><p><strong>3.逻辑分区扩容</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># lvextend：扩展逻辑卷物理边界</span></span><br><span class="line"><span class="comment"># 后面的逻辑分区名称用lvdisplay命令获取到的LV Path</span></span><br><span class="line">lvextend -l +100%FREE /dev/ubuntu-vg/ubuntu-lv</span><br><span class="line"></span><br><span class="line"><span class="comment"># resize2fs：扩展逻辑卷逻辑边界</span></span><br><span class="line">resize2fs /dev/ubuntu-vg/ubuntu-lv</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看结果,显示磁盘信息</span></span><br><span class="line">df -h</span><br></pre></td></tr></table></figure><p>结果如下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">Filesystem                         Size  Used Avail Use% Mounted on</span><br><span class="line">udev                               3.8G     0  3.8G   0% /dev</span><br><span class="line">tmpfs                              779M  1.5M  777M   1% /run</span><br><span class="line">/dev/mapper/ubuntu--vg-ubuntu--lv  232G  8.4G  213G   4% /</span><br><span class="line">tmpfs                              3.8G     0  3.8G   0% /dev/shm</span><br><span class="line">tmpfs                              5.0M     0  5.0M   0% /run/lock</span><br><span class="line">tmpfs                              3.8G     0  3.8G   0% /sys/fs/cgroup</span><br><span class="line">/dev/sdb2                          2.0G  107M  1.7G   6% /boot</span><br><span class="line">/dev/sdb1                          1.1G  5.3M  1.1G   1% /boot/efi</span><br><span class="line">/dev/loop0                          62M   62M     0 100% /snap/core20/1611</span><br><span class="line">/dev/loop2                          47M   47M     0 100% /snap/snapd/16292</span><br><span class="line">/dev/loop1                          64M   64M     0 100% /snap/core20/1695</span><br><span class="line">/dev/loop3                          50M   50M     0 100% /snap/snapd/17576</span><br><span class="line">/dev/loop4                          68M   68M     0 100% /snap/lxd/22753</span><br><span class="line">...</span><br></pre></td></tr></table></figure><p>看到 /dev/mapper/ubuntu–vg-ubuntu–lv  232G这里已经有了。</p><p>如果还要添加新硬盘的，看下一篇笔记：<a href="/2022/11/18/Ubuntu%E6%B7%BB%E5%8A%A0%E6%96%B0%E7%A1%AC%E7%9B%98/" title="Ubuntu添加新硬盘">Ubuntu添加新硬盘</a></p>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
            <tag> Ubuntu </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>U盘安装Ubuntu Server</title>
      <link href="/2022/11/18/U%E7%9B%98%E5%AE%89%E8%A3%85Ubuntu-Server/"/>
      <url>/2022/11/18/U%E7%9B%98%E5%AE%89%E8%A3%85Ubuntu-Server/</url>
      
        <content type="html"><![CDATA[<p>想在办公室搞一台Ubuntu Server，然后装上docker后，就可以搭一些小服务了。正好有同事换下来的电脑，配置还可以，8G内存+256G固态的，一个挺小的机箱。</p><p>查了一下，安装也挺方便的，下载系统包，然后用U盘制作个启动盘，再安装就行了。</p><a id="more"></a><h2 id="一、下载Ubuntu-Server的ISO镜像包"><a href="#一、下载Ubuntu-Server的ISO镜像包" class="headerlink" title="一、下载Ubuntu Server的ISO镜像包"></a>一、下载Ubuntu Server的ISO镜像包</h2><p>官网下载：<a class="link"   href="https://ubuntu.com/download/server" >https://ubuntu.com/download/server<i class="fas fa-external-link-alt"></i></a><br>官网目前最新版本：22.04.1</p><p>之前用的是18.04和20.04的，所以还是想下载用20.04版本的。于是，可以去清华大学的开源软件镜像站下载：<a class="link"   href="https://mirrors.tuna.tsinghua.edu.cn/ubuntu-releases/20.04/" >https://mirrors.tuna.tsinghua.edu.cn/ubuntu-releases/20.04/<i class="fas fa-external-link-alt"></i></a></p><p>找到server版本下载：ubuntu-20.04.5-live-server-amd64.iso<br>desktop是桌面版本的，自己用也可以用桌面版的，反正我就当当服务器，用不着桌面版的，直接就server版。</p><h2 id="二、制作U盘启动盘"><a href="#二、制作U盘启动盘" class="headerlink" title="二、制作U盘启动盘"></a>二、制作U盘启动盘</h2><h3 id="1-下载制作启动盘的工具软件：Rufus"><a href="#1-下载制作启动盘的工具软件：Rufus" class="headerlink" title="1.下载制作启动盘的工具软件：Rufus"></a>1.下载制作启动盘的工具软件：Rufus</h3><p>这个小软件特别小，且好用，无需安装，直接运行就可以用。Win7以上操作系统都可以用。</p><p>官网下载地址：<a class="link"   href="http://rufus.ie/zh/" >http://rufus.ie/zh/<i class="fas fa-external-link-alt"></i></a><br>目前最新的是：3.20版本（1.3MB）</p><h3 id="2-制作启动盘"><a href="#2-制作启动盘" class="headerlink" title="2.制作启动盘"></a>2.制作启动盘</h3><p>插上U盘，运行Rufus后，</p><blockquote><p>Device（设备）：选择U盘<br>Boot selection（引导类型选择）：点击SELECT（选择）按钮，添加下载好 ubuntu-20.04.5-live-server-amd64.iso</p></blockquote><p>其它都默认就行，直接点击START（开始）。<br>期间出来一个提示，要下载2个文件啥的直接下载就行。</p><p>然后等待完成就好了。</p><h2 id="三、安装Ubuntu-Server"><a href="#三、安装Ubuntu-Server" class="headerlink" title="三、安装Ubuntu Server"></a>三、安装Ubuntu Server</h2><h3 id="1-安装ubuntu-20-04-5-LTS"><a href="#1-安装ubuntu-20-04-5-LTS" class="headerlink" title="1.安装ubuntu 20.04.5 LTS"></a>1.安装ubuntu 20.04.5 LTS</h3><p>插上U盘，跟安装Windows一样，选择从U盘启动就行。</p><p>安装过程都直接默认就行。其中，</p><ul><li>网络是没设置的，选的是Continue without network，安装完再设置。</li><li>硬盘设置，看到disk的地方，如果有2块硬盘的，选一块硬盘。</li></ul><p>除了选了一块硬盘，别的都默认了。其它的搞不懂可以安装完再整。</p><p>最后面有个登录账号信息需要填写一下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Your name: 自定义，随意</span><br><span class="line">Your server&#39;s name：自定义，随意。</span><br><span class="line">Pick a username: 用户名，这个登录的时候需要的。比如：ubuntuabc</span><br><span class="line">Choose a password: 密码。比如：ubuntuabc</span><br><span class="line">Confirm you password: 确认密码</span><br></pre></td></tr></table></figure><p>等待安装完成后，选一下【Reboot Now】（重启），选完就拔掉U盘启动。</p><h3 id="2-设置网络（静态IP）"><a href="#2-设置网络（静态IP）" class="headerlink" title="2.设置网络（静态IP）"></a>2.设置网络（静态IP）</h3><p>安装完成重启后，可以先查看发行版本信息：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">cat /etc/issue</span><br><span class="line"></span><br><span class="line"><span class="comment"># 显示结果：</span></span><br><span class="line">---------------------------------------</span><br><span class="line">Ubuntu 20.04.5 LTS \n \l</span><br><span class="line">---------------------------------------</span><br></pre></td></tr></table></figure><p>插上网线后，用vi打开配置文件<code>/etc/netplan/00-installer-config.yaml</code>（不同版本可能文件名有点不一样）</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 需要root权限，可以在前面加上sudo</span></span><br><span class="line"><span class="comment"># 我就直接用命令：sudo su切换成root用户了</span></span><br><span class="line">vi /etc/netplan/00-installer-config.yaml</span><br></pre></td></tr></table></figure><p>配置文件内容如下（vi命令不会的看这篇笔记：<a href="/2021/02/08/Linux%20vim%E5%91%BD%E4%BB%A4%E7%AE%80%E5%8D%95%E4%BD%BF%E7%94%A8/" title="Linux vim&#x2F;vi 命令简单使用">Linux vim&#x2F;vi 命令简单使用</a>）：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># This is the network config written by &#x27;subiquity&#x27;</span></span><br><span class="line"><span class="attr">network:</span></span><br><span class="line">  <span class="attr">ethernets:</span></span><br><span class="line">    <span class="attr">enp1s0:</span></span><br><span class="line">      <span class="attr">dhcp4:</span> <span class="literal">no</span></span><br><span class="line">      <span class="attr">addresses:</span> [<span class="number">192.168</span><span class="number">.1</span><span class="number">.175</span><span class="string">/24</span>]</span><br><span class="line">      <span class="attr">gateway4:</span> <span class="number">192.168</span><span class="number">.1</span><span class="number">.1</span></span><br><span class="line">      <span class="attr">nameservers:</span></span><br><span class="line">        <span class="attr">addresses:</span> [<span class="number">220.189</span><span class="number">.127</span><span class="number">.106</span>, <span class="number">114.114</span><span class="number">.114</span><span class="number">.114</span>]</span><br><span class="line">  <span class="attr">version:</span> <span class="number">2</span></span><br></pre></td></tr></table></figure><blockquote><p>dhcp4: no 关闭ipv4自动获取。<br>addresses: [192.168.1.175/24] 在指定IP地址时，ip地址之后的子网掩码是必须的，在使用ipv6时也一样必须带有子网掩码，以上ipv4地址的掩码是24。<br>gateway4：字段是网关字段，即路由器的地址。<br>nameservers字段：设置域名服务器IP地址。</p></blockquote><p>好了之后，保存、退出。</p><p>启动服务：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 启动服务，如果没有切换到root用户，就前面加sudo</span></span><br><span class="line">netplan apply</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看网络服务的状态，看到绿点，状态是routable就ok了</span></span><br><span class="line">networkctl status</span><br><span class="line"></span><br><span class="line"><span class="comment"># 网络测试</span></span><br><span class="line">ping 192.168.1.1</span><br><span class="line">ping 114.114.114.114</span><br><span class="line">ping www.baidu.com</span><br></pre></td></tr></table></figure><p>网络正常了，那就可以在别的电脑（同局域网内）SSH连接啦，就不需要显示器了，开着主机就行了。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"># SSH连接</span><br><span class="line">主机ip: 192.168.1.175</span><br><span class="line">用户名：ubuntuabc</span><br><span class="line">密码：ubuntuabc</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
            <tag> Ubuntu </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Python使用MQTT举例</title>
      <link href="/2022/11/13/Python%E4%BD%BF%E7%94%A8MQTT%E4%B8%BE%E4%BE%8B/"/>
      <url>/2022/11/13/Python%E4%BD%BF%E7%94%A8MQTT%E4%B8%BE%E4%BE%8B/</url>
      
        <content type="html"><![CDATA[<p>关于MQTT的简介和服务器的搭建，之前已经写了笔记了：<a href="/2022/11/12/Docker%E6%90%AD%E5%BB%BAMQTT%E6%9C%8D%E5%8A%A1%E5%99%A8/" title="Docker搭建MQTT服务器">Docker搭建MQTT服务器</a></p><p>用来学习、研究，自己不搭MQTT服务器也行，EMQX有提供免费的在线 MQTT 服务器（还提供证书的下载）：<br>官网：<a class="link"   href="https://www.emqx.com/zh/mqtt/public-mqtt5-broker" >https://www.emqx.com/zh/mqtt/public-mqtt5-broker<i class="fas fa-external-link-alt"></i></a></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">MQTT 服务器信息</span><br><span class="line">Broker: broker-cn.emqx.io</span><br><span class="line">TCP 端口: 1883</span><br><span class="line">WebSocket 端口: 8083</span><br><span class="line">SSL&#x2F;TLS 端口: 8883</span><br><span class="line">WebSocket Secure 端口: 8084</span><br></pre></td></tr></table></figure><a id="more"></a><p>Python使用MQTT的例子，主要就写2个python文件，一个用来publish（发布消息），一个用来subcribe（订阅消息），看看是不是都能接收到消息。（消息订阅后都能接收到，就可以存入自己建的本地数据库啦）</p><h2 id="一、安装paho-mqtt库"><a href="#一、安装paho-mqtt库" class="headerlink" title="一、安装paho-mqtt库"></a>一、安装paho-mqtt库</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install paho-mqtt</span><br></pre></td></tr></table></figure><p>安装了这个库就可以处理MQTT了，官方文档上也例子：<a class="link"   href="https://pypi.org/project/paho-mqtt/#" >https://pypi.org/project/paho-mqtt/#<i class="fas fa-external-link-alt"></i></a></p><h2 id="二、publish发布消息（mqtt-publish-py）"><a href="#二、publish发布消息（mqtt-publish-py）" class="headerlink" title="二、publish发布消息（mqtt_publish.py）"></a>二、publish发布消息（mqtt_publish.py）</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python</span></span><br><span class="line"><span class="comment"># -*- encoding: utf-8 -*-</span></span><br><span class="line"><span class="keyword">import</span> paho.mqtt.client <span class="keyword">as</span> mqtt_client</span><br><span class="line"><span class="keyword">import</span> time, json, random</span><br><span class="line"></span><br><span class="line"><span class="comment"># MQTT连接</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">connect_mqtt</span>():</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">on_connect</span>(<span class="params">client, userdata, flags, rc</span>):</span></span><br><span class="line">        <span class="keyword">if</span> rc == <span class="number">0</span>:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;Connected to MQTT Broker!&quot;</span>)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;Failed to connect, return code %d\n&quot;</span>, rc)</span><br><span class="line">    <span class="comment"># Set Connecting Client ID</span></span><br><span class="line">    client = mqtt_client.Client(client_id)</span><br><span class="line">    client.on_connect = on_connect</span><br><span class="line">    client.connect(broker, port)</span><br><span class="line">    <span class="keyword">return</span> client</span><br><span class="line"></span><br><span class="line"><span class="comment"># 发布消息</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">publish</span>(<span class="params">client, topic, msg</span>):</span></span><br><span class="line">    <span class="comment"># msg = f&quot;messages: &#123;msg_count&#125;&quot;</span></span><br><span class="line">    result = client.publish(topic, msg)</span><br><span class="line">    <span class="comment"># result: [0, 1]</span></span><br><span class="line">    status = result[<span class="number">0</span>]</span><br><span class="line">    <span class="keyword">if</span> status == <span class="number">0</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&quot;Send `<span class="subst">&#123;msg&#125;</span>` to topic `<span class="subst">&#123;topic&#125;</span>`&quot;</span>)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&quot;Failed to send message to topic <span class="subst">&#123;topic&#125;</span>&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">run_publish</span>():</span></span><br><span class="line">    client = connect_mqtt()</span><br><span class="line">    time.sleep(<span class="number">1</span>)</span><br><span class="line">    client.loop_start()</span><br><span class="line">    <span class="comment"># 发布消息</span></span><br><span class="line">    <span class="comment"># stus = &#123;&quot;Tempeature&quot;:30.1,&quot;Humidity&quot;:40.2,&quot;Hours&quot;:12, &quot;Minutes&quot;:15&#125;</span></span><br><span class="line">    <span class="comment"># res2 = json.dumps(stus)  # 先把字典转成json</span></span><br><span class="line">    <span class="comment"># client.publish(&#x27;python/mqtt&#x27;, payload=res2, qos=0)</span></span><br><span class="line">    <span class="comment"># client.publish(&#x27;emqtt&#x27;, payload=&#x27;Hello World&#x27;, qos=0)</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">100</span>):</span><br><span class="line">        <span class="comment"># 循环发布消息</span></span><br><span class="line">        publish(client, <span class="string">&quot;mqtt/guangdu&quot;</span>, i)</span><br><span class="line">        time.sleep(<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 建立连接</span></span><br><span class="line"><span class="comment"># MQTT Broker连接参数</span></span><br><span class="line">broker = <span class="string">&#x27;broker-cn.emqx.io&#x27;</span></span><br><span class="line">port = <span class="number">1883</span></span><br><span class="line">client_id = <span class="string">f&#x27;python-mqtt-<span class="subst">&#123;random.randint(<span class="number">0</span>, <span class="number">1000</span>)&#125;</span>&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 消息发布</span></span><br><span class="line">run_publish()</span><br></pre></td></tr></table></figure><h2 id="三、subcribe订阅消息（mqtt-subcribe-py）"><a href="#三、subcribe订阅消息（mqtt-subcribe-py）" class="headerlink" title="三、subcribe订阅消息（mqtt_subcribe.py）"></a>三、subcribe订阅消息（mqtt_subcribe.py）</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python</span></span><br><span class="line"><span class="comment"># -*- encoding: utf-8 -*-</span></span><br><span class="line"><span class="keyword">import</span> paho.mqtt.client <span class="keyword">as</span> mqtt</span><br><span class="line"><span class="keyword">import</span> random</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">on_connect</span>(<span class="params">client, userdata, flags, rc</span>):</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;Connected with result code: &quot;</span> + <span class="built_in">str</span>(rc))</span><br><span class="line"></span><br><span class="line"><span class="comment"># 处理订阅到的消息</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">on_message</span>(<span class="params">client, userdata, msg</span>):</span></span><br><span class="line">    <span class="built_in">print</span>(msg.topic + <span class="string">&quot; &quot;</span> + <span class="built_in">str</span>(msg.payload))</span><br><span class="line"></span><br><span class="line">client = mqtt.Client()</span><br><span class="line">client.on_connect = on_connect</span><br><span class="line">client.on_message = on_message</span><br><span class="line"></span><br><span class="line"><span class="comment"># MQTT Broker连接参数</span></span><br><span class="line">broker = <span class="string">&#x27;broker-cn.emqx.io&#x27;</span></span><br><span class="line">port = <span class="number">1883</span></span><br><span class="line">client_id = <span class="string">f&#x27;python-mqtt-<span class="subst">&#123;random.randint(<span class="number">0</span>, <span class="number">1000</span>)&#125;</span>&#x27;</span></span><br><span class="line"></span><br><span class="line">client.connect(broker, port, <span class="number">600</span>) <span class="comment"># 600为keepalive的时间间隔</span></span><br><span class="line">client.subscribe(<span class="string">&quot;mqtt/guangdu&quot;</span>, qos=<span class="number">0</span>) <span class="comment"># subscribe 订阅</span></span><br><span class="line"></span><br><span class="line">client.loop_forever() <span class="comment"># 保持连接</span></span><br></pre></td></tr></table></figure><h2 id="四、测试"><a href="#四、测试" class="headerlink" title="四、测试"></a>四、测试</h2><ul><li>1.先把 mqtt_subcribe.py 运行起来（在VS Code）中</li><li>2.再把 mqtt_publish.py 在命令行或Windows PowerShell中运行起来<code>python .\mqtt_publish.py</code></li></ul><p>就能看到效果啦。订阅消息的这边一直可以接收到发布出来的消息啦。</p><p>所以，在订阅消息的 on_message方法中，可以把消息的主题（msg.topic）和消息的内容（msg.payload）直接存进数据库啦，sqlite和mysql都行。</p>]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 物联网 </tag>
            
            <tag> Python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>pip安装包时出现&#39;python setup.py egg_info did not run successfully.&#39;</title>
      <link href="/2022/11/13/pip%E5%AE%89%E8%A3%85%E5%8C%85%E6%97%B6%E5%87%BA%E7%8E%B0python-setup-py-egg-info-did-not-run-successfully/"/>
      <url>/2022/11/13/pip%E5%AE%89%E8%A3%85%E5%8C%85%E6%97%B6%E5%87%BA%E7%8E%B0python-setup-py-egg-info-did-not-run-successfully/</url>
      
        <content type="html"><![CDATA[<p>Python安装flask_mqtt包的时候报错：</p><blockquote><p>python setup.py egg_info did not run successfully.</p></blockquote><p><strong>解决方法</strong>：<br>更新 setuptools 和 pip。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">pip install --upgrade setuptools</span><br><span class="line">python -m pip install --upgrade pip</span><br></pre></td></tr></table></figure><a id="more"></a><p>更新完后再安装，就OK了。</p>]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Docker搭建MQTT服务器</title>
      <link href="/2022/11/12/Docker%E6%90%AD%E5%BB%BAMQTT%E6%9C%8D%E5%8A%A1%E5%99%A8/"/>
      <url>/2022/11/12/Docker%E6%90%AD%E5%BB%BAMQTT%E6%9C%8D%E5%8A%A1%E5%99%A8/</url>
      
        <content type="html"><![CDATA[<h2 id="MQTT简介"><a href="#MQTT简介" class="headerlink" title="MQTT简介"></a>MQTT简介</h2><p>MQTT（Message Queuing Telemetry Transport，消息队列遥测传输协议），是一种基于发布/订阅（publish/subscribe）模式的”轻量级”通讯协议，该协议构建于TCP/IP协议上，由IBM在1999年发布。MQTT最大优点在于，可以以极少的代码和有限的带宽，为连接远程设备提供实时可靠的消息服务。作为一种低开销、低带宽占用的即时通讯协议，使其在物联网、小型设备、移动应用等方面有较广泛的应用。</p><p>MQTT是一个基于客户端-服务器的消息发布/订阅传输协议。MQTT协议是轻量、简单、开放和易于实现的，这些特点使它适用范围非常广泛。在很多情况下，包括受限的环境中，如：机器与机器（M2M）通信和物联网（IoT）。其在，通过卫星链路通信传感器、偶尔拨号的医疗设备、智能家居、及一些小型化设备中已广泛使用。</p><a id="more"></a><h2 id="MQTT实现方式"><a href="#MQTT实现方式" class="headerlink" title="MQTT实现方式"></a>MQTT实现方式</h2><img                       lazyload                     src="/images/loading.svg"                     data-src="/img/Docker_mqtt_1.png"                      style="zoom: 50%;"                ><p>看以上图，MQTT协议中有两种主要身份：</p><ul><li>MQTT Broker(消息代理)：服务器</li><li>Publish(发布者)、Subscribe(订阅者)：客户端</li></ul><p>一个设备可以既是发布消息端，也可以同时订阅消息。</p><p><strong>MQTT传输的消息</strong>有2个部分：</p><ul><li>主题（Topic）：就是消息的主题/类型/分类。订阅者订阅一个Topic后，就能收到该Topic的消息内容。</li><li>负载（payload）：就是消息的内容（可是是文字、数值这些）。</li></ul><p><strong>MQTT使用举例</strong>：<br>像物联网这块就用的比较多，假设有一个物联网设备（掌控板、行空板），接个对应的传感器，就可以获取温度、湿度、光强度这些数据，那怎么把获取到的数据实时传到服务器上记录下来呢，就用这个MQTT就行。</p><p>把传感器获取到的数据，用Publish(发布)到MQTT服务器上，同时也可以用Subscribe订阅MQTT服务器端传过来的消息。</p><p>把数据收集起来后，就可以做具体的分析、展示（数据可视化）了。</p><p>像行空板就自带了SloT这个针对学校场景的开源免费的MQTT服务器软件, 可一键创建本地物联网服务器。相当于一个行空板设备，自己作为一台MQTT服务器，同时也作为一个客户端。</p><h2 id="Docker搭建MQTT服务器"><a href="#Docker搭建MQTT服务器" class="headerlink" title="Docker搭建MQTT服务器"></a>Docker搭建MQTT服务器</h2><p>用的是EMQX的开源版。EMQX 是一款大规模可弹性伸缩的云原生分布式物联网 MQTT 消息服务器。它还有企业版和Cloud版，这些需要花钱的是企业级，自己测试、学习使用，用用开源版就行。<br>Docker也可以搭建EMQX企业版，就是连接的客户端有限制，只有10个。</p><p>EMQX官方文档：<a class="link"   href="https://www.emqx.io/docs/zh/v4.3/" >https://www.emqx.io/docs/zh/v4.3/<i class="fas fa-external-link-alt"></i></a> （左下角可以选择版本号）</p><h3 id="1-拉取EMQX开源版镜像"><a href="#1-拉取EMQX开源版镜像" class="headerlink" title="1.拉取EMQX开源版镜像"></a>1.拉取EMQX开源版镜像</h3><p>官网：<a class="link"   href="https://hub.docker.com/r/emqx/emqx/tags" >https://hub.docker.com/r/emqx/emqx/tags<i class="fas fa-external-link-alt"></i></a></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker pull emqx/emqx</span><br></pre></td></tr></table></figure><p>不写版本写，就是最新版(latest)。</p><h3 id="2-运行容器"><a href="#2-运行容器" class="headerlink" title="2.运行容器"></a>2.运行容器</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run -d --name emqx -p 18084:1883 -p 18085:8081 -p 8083:8083 -p 8883:8883 -p 8084:8084 -p 18083:18083 emqx/emqx</span><br></pre></td></tr></table></figure><blockquote><p>–name emqx：容器名为emqx，可自定义<br>-p 18083:18083：端口映射，web端后台管理页端口，前面一个18083是本机端口，可自定义<br>-p 18084:1883：端口映射，MQTT TCP端口，前面一个18084是自定义的本机的端口，可自定义<br>-p 8883:8883：端口映射，MQTT TCP TLS/SSL 端口，前面一个8883可自定义<br>-p 8083:8083：端口映射，HTTP and WebSocket 端口，前面一个8083可自定义<br>-p 8084:8084：端口映射，HTTPS and WSS 端口，前面一个8084可自定义</p></blockquote><p>如果有端口被限制不能使用啥的，直接换就行。如果是在服务器上使用，记得把防火墙设置一下，给允许下使用的端口就行。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 容器运行后，查看容器</span></span><br><span class="line">docker ps -a</span><br><span class="line"></span><br><span class="line"><span class="comment"># 进入容器，用/bin/sh</span></span><br><span class="line">docker <span class="built_in">exec</span> -it emqx /bin/sh</span><br></pre></td></tr></table></figure><h3 id="3-进入web后台管理页面"><a href="#3-进入web后台管理页面" class="headerlink" title="3.进入web后台管理页面"></a>3.进入web后台管理页面</h3><p>浏览器打开机器的ip:18083访问。比如本机ip为：192.168.1.101<br>那就打开：192.168.1.101:18083 访问，或者用127.0.0.1、localhost都行。服务器的话就用服务器的ip。</p><p>默认的账号：admin 密码：public</p><p>语言在【Settings】设置里，设一下中文就行。</p><img                       lazyload                     src="/images/loading.svg"                     data-src="/img/Docker_mqtt_2.png"                      style="zoom: 50%;"                ><h3 id="4-Websocket测试"><a href="#4-Websocket测试" class="headerlink" title="4.Websocket测试"></a>4.Websocket测试</h3><p>在【Tools】（工具）选项里有【Websocket】测试。<br>填写下ip和端口，这里的端口就是8083端口映射出来的端口，然后就直接【连接】就行。</p><p>可以订阅消息（填写Topic主题），和发送消息（填写Topic主题和消息内容）进行测试。</p><p>PS.如果是企业版，基本上操作差不多的。<br>官网：<a class="link"   href="https://hub.docker.com/r/emqx/emqx-ee" >https://hub.docker.com/r/emqx/emqx-ee<i class="fas fa-external-link-alt"></i></a><br>拉取镜像：<code>docker pull emqx/emqx-ee</code></p>]]></content>
      
      
      <categories>
          
          <category> Docker </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Docker </tag>
            
            <tag> 物联网 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Python 识别验证码图片</title>
      <link href="/2022/11/11/Python%E8%AF%86%E5%88%AB%E9%AA%8C%E8%AF%81%E7%A0%81%E5%9B%BE%E7%89%87/"/>
      <url>/2022/11/11/Python%E8%AF%86%E5%88%AB%E9%AA%8C%E8%AF%81%E7%A0%81%E5%9B%BE%E7%89%87/</url>
      
        <content type="html"><![CDATA[<p>之前对图片进行文字识别，用过百度的文字识别API，笔记：<a href="/2021/03/13/Python%E5%AF%B9%E5%9B%BE%E7%89%87%E8%BF%9B%E8%A1%8C%E6%96%87%E5%AD%97%E8%AF%86%E5%88%AB/" title="Python 对图片进行文字识别">Python 对图片进行文字识别</a></p><p>但是发现，用这个来识别图片验证码，错误率就高多了。因为验证码图片有时候经常有一些处理，不是简单的没有干扰的文字。</p><p>然后发现用ddddocr这个库精确多了。推荐用这个库试一下。</p><a id="more"></a><p>应该是1年前用过的了，发现这个库现在还更新了验证码点选和滑块的内容。</p><p>源码：<a class="link"   href="https://github.com/sml2h3/ddddocr" >https://github.com/sml2h3/ddddocr<i class="fas fa-external-link-alt"></i></a></p><p>上面都有举例，使用也很简单。</p><p><strong>安装：</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install ddddocr</span><br></pre></td></tr></table></figure><p><strong>示例：</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> ddddocr</span><br><span class="line"></span><br><span class="line">ocr = ddddocr.DdddOcr()</span><br><span class="line"></span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">r&#x27;.\img\ocr_test.png&#x27;</span>, <span class="string">&#x27;rb&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">    image = f.read()</span><br><span class="line"></span><br><span class="line">res = ocr.classification(image)</span><br><span class="line"><span class="built_in">print</span>(res)</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Python使用ddddocr报错ImportError</title>
      <link href="/2022/11/11/Python%E4%BD%BF%E7%94%A8ddddocr%E6%8A%A5%E9%94%99ImportError/"/>
      <url>/2022/11/11/Python%E4%BD%BF%E7%94%A8ddddocr%E6%8A%A5%E9%94%99ImportError/</url>
      
        <content type="html"><![CDATA[<p>安装好ddddocr后，使用的时候一直报错：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">...</span><br><span class="line">    from .onnxruntime_pybind11_state import *  <span class="comment"># noqa</span></span><br><span class="line">ImportError: DLL load failed: 找不到指定的模块。</span><br></pre></td></tr></table></figure><a id="more"></a><p>网上看了下 ，以为跟onnxruntime版本什么有关系，然后看到最后是安装VC++2019解决的。</p><p>下载地址：<br>32位：<a class="link"   href="https://aka.ms/vs/16/release/VC_redist.x86.exe" >Microsoft Visual C++ Redistributable 2019x86 官方下载地址<i class="fas fa-external-link-alt"></i></a></p><p>64位：<a class="link"   href="https://aka.ms/vs/16/release/VC_redist.x64.exe" >Microsoft Visual C++ Redistributable 2019x64 官方下载地址<i class="fas fa-external-link-alt"></i></a></p><p>下载安装后，就可以正常使用了。</p>]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Docker搭建codecombat本地服务</title>
      <link href="/2022/10/25/Docker%E6%90%AD%E5%BB%BAcodecombat%E6%9C%AC%E5%9C%B0%E6%9C%8D%E5%8A%A1/"/>
      <url>/2022/10/25/Docker%E6%90%AD%E5%BB%BAcodecombat%E6%9C%AC%E5%9C%B0%E6%9C%8D%E5%8A%A1/</url>
      
        <content type="html"><![CDATA[<img                       lazyload                     src="/images/loading.svg"                     data-src="/img/Docker_codecombat_1.png"                      style="zoom: 50%;"                ><p>这是个游戏编程网站，可以一边游戏一边学编程（Python），感觉挺有意思，就去官网玩了下。</p><p>然后玩了4-5关后，都不能玩了，订阅需要99/月。遂作罢。</p><p>偶然看到网上有教程，可以用Docker直接搭这个本地服务的，然后就试了下，还真成功了！就在Win10的电脑上直接搭建成功了！用Docker挺简单的。</p><a id="more"></a><h2 id="一、Docker安装"><a href="#一、Docker安装" class="headerlink" title="一、Docker安装"></a>一、Docker安装</h2><p>网上教程、安装方法都有，Docker常用的一些命令看这篇：<a href="/2022/05/09/Docker%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/" title="Docker常用命令">Docker常用命令</a></p><p><strong>Docker使用的一般步骤</strong>：</p><ul><li>拉取一个镜像（<code>docker pull</code>）</li><li>创建一个容器（<code>docker run</code>）</li><li>在容器中运行命令（<code>docker exec</code>）</li></ul><h2 id="二、创建codecombat容器"><a href="#二、创建codecombat容器" class="headerlink" title="二、创建codecombat容器"></a>二、创建codecombat容器</h2><h3 id="1-拉取codecombat镜像"><a href="#1-拉取codecombat镜像" class="headerlink" title="1.拉取codecombat镜像"></a>1.拉取codecombat镜像</h3><p>打开命令提示符或PowerShell（管理员），运行以下命令：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"># 拉取codecombat镜像</span><br><span class="line">docker pull operepo&#x2F;ope-codecombat</span><br><span class="line"></span><br><span class="line"># pull下载完后，可以查看镜像</span><br><span class="line">docker images</span><br></pre></td></tr></table></figure><p>如果下载慢，卡住了，有问题；可以重新运行命令pull一下。</p><h3 id="2-下载需要的数据包"><a href="#2-下载需要的数据包" class="headerlink" title="2.下载需要的数据包"></a>2.下载需要的数据包</h3><p>没有这个数据包，会无法运行。<br>下载地址（别人分享的）：<br><a class="link"   href="https://cloud.189.cn/t/IJzmuqz2u673" >https://cloud.189.cn/t/IJzmuqz2u673<i class="fas fa-external-link-alt"></i></a> (访问码:c1wi) </p><p>codecombat目录下有个：dump.tar.gz，就下载这个。</p><h3 id="3-创建mycodecombat容器"><a href="#3-创建mycodecombat容器" class="headerlink" title="3.创建mycodecombat容器"></a>3.创建mycodecombat容器</h3><p>创建访问端口为3020的容器：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run -itd --name mycodecombat -p 0.0.0.0:3020:3000 operepo/ope-codecombat /bin/bash</span><br></pre></td></tr></table></figure><p><strong>参数解释</strong>：</p><blockquote><p>-it：这个就是启动容器都会带，不用管<br>-d：表示后台运行<br>–name mycodecombat：容器名称为mycodecombat，可以自定义<br>-p 0.0.0.0:3020:3000：表示把容器中的3000端口映射到本机的3020端口，这个3020也是自定义</p></blockquote><h2 id="三、导入dump-tar-gz数据"><a href="#三、导入dump-tar-gz数据" class="headerlink" title="三、导入dump.tar.gz数据"></a>三、导入dump.tar.gz数据</h2><h3 id="1-容器内开启数据库服务（不要关闭窗口）"><a href="#1-容器内开启数据库服务（不要关闭窗口）" class="headerlink" title="1.容器内开启数据库服务（不要关闭窗口）"></a>1.容器内开启数据库服务（不要关闭窗口）</h3><p>打开一个PowerShell，</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 1).进入容器</span></span><br><span class="line">docker <span class="built_in">exec</span> -it mycodecombat /bin/bash</span><br><span class="line"></span><br><span class="line"><span class="comment"># 2).容器内开启数据库服务（不要关闭窗口）</span></span><br><span class="line"><span class="built_in">cd</span> /home/coco/codecombat &amp;&amp; ./bin/coco-mongodb</span><br></pre></td></tr></table></figure><h3 id="2-导入dump-tar-gz数据"><a href="#2-导入dump-tar-gz数据" class="headerlink" title="2.导入dump.tar.gz数据"></a>2.导入dump.tar.gz数据</h3><p>打开<strong>另一个</strong>PowerShell，进入放dump.tar.gz数据压缩包的目录，</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 1).把数据包dump.tar.gz复制到容器内</span></span><br><span class="line">docker cp dump.tar.gz mycodecombat:/home/coco/codecombat/data/</span><br><span class="line"><span class="comment"># 2).进入容器</span></span><br><span class="line">docker <span class="built_in">exec</span> -it mycodecombat /bin/bash</span><br><span class="line"><span class="comment"># 3).进入放数据的data目录</span></span><br><span class="line"><span class="built_in">cd</span> /home/coco/codecombat/data/</span><br><span class="line"><span class="comment"># 3).解压</span></span><br><span class="line">tar -zxvf dump.tar.gz</span><br></pre></td></tr></table></figure><h3 id="3-容器内开启web服务（不要关闭窗口）"><a href="#3-容器内开启web服务（不要关闭窗口）" class="headerlink" title="3.容器内开启web服务（不要关闭窗口）"></a>3.容器内开启web服务（不要关闭窗口）</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> /home/coco &amp;&amp; sh start.sh</span><br></pre></td></tr></table></figure><p>两个窗口（一个数据库服务、一个web服务都不能关闭）<br>PS.报错的话，先重启下数据库服务，再重启web服务。</p><h2 id="四、进入游戏"><a href="#四、进入游戏" class="headerlink" title="四、进入游戏"></a>四、进入游戏</h2><p>访问：<a class="link"   href="http://127.0.0.1:3020/" >http://127.0.0.1:3020<i class="fas fa-external-link-alt"></i></a> 或自己电脑的 http://[ip]:3020 都可以。</p><p>直接点击<strong>开始游戏</strong> 开始。</p><p>PS.如果有的开了ipv6，可能用ip和127.0.0.1都无法访问，试一下：localhost:3020<br>ping localhost 看一下，是不是[::1]，那就是ipv6。<br>解决方法，在hosts文件添加一句<code>127.0.0.1 localhost</code>就行。这样正常情况，3种都是可以访问的。</p><h2 id="五、Ubuntu20-04中用Docker搭建Codecombat"><a href="#五、Ubuntu20-04中用Docker搭建Codecombat" class="headerlink" title="五、Ubuntu20.04中用Docker搭建Codecombat"></a>五、Ubuntu20.04中用Docker搭建Codecombat</h2><p>用Docker么，跟在Windows中别的差别不大。就是在开启数据库服务和Web服务的时候，不要直接开，在后台运行就行了。</p><h3 id="1-开启数据库服务"><a href="#1-开启数据库服务" class="headerlink" title="1.开启数据库服务"></a>1.开启数据库服务</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Windows</span></span><br><span class="line"><span class="built_in">cd</span> /home/coco/codecombat &amp;&amp; ./bin/coco-mongodb</span><br><span class="line"></span><br><span class="line"><span class="comment"># Ubuntu(用nohup后台运行，会生成一个PID进程号，用kill可结束进程就行)</span></span><br><span class="line"><span class="built_in">cd</span> /home/coco/codecombat</span><br><span class="line">nohup ./bin/coco-mongodb &gt; mycoco-mongodb.log 2&gt;&amp;1 &amp;</span><br></pre></td></tr></table></figure><h3 id="2-开启web服务"><a href="#2-开启web服务" class="headerlink" title="2.开启web服务"></a>2.开启web服务</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Windows</span></span><br><span class="line"><span class="built_in">cd</span> /home/coco &amp;&amp; sh start.sh</span><br><span class="line"></span><br><span class="line"><span class="comment"># Ubuntu，mystart.log这些是日志名，随意取</span></span><br><span class="line"><span class="built_in">cd</span> /home/coco</span><br><span class="line">nohup sh start.sh &gt; mystart.log 2&gt;&amp;1 &amp;</span><br></pre></td></tr></table></figure><h2 id="六、上帝模式"><a href="#六、上帝模式" class="headerlink" title="六、上帝模式"></a>六、上帝模式</h2><p>上帝模式就是游戏里所有的都解锁了，都可以玩了。不用等通关去解锁。<br>PS.里面有几关可能数据有问题，玩不了。所以开了上帝模式，其它的就不影响了。</p><h3 id="1-注册独立账号"><a href="#1-注册独立账号" class="headerlink" title="1.注册独立账号"></a>1.注册独立账号</h3><p>打开 <a class="link"   href="http://127.0.0.1:3020/" >http://127.0.0.1:3020<i class="fas fa-external-link-alt"></i></a> ，点击【注册】，要选择【独立账号】。<br>用个自己的邮箱和账号（英文就行），比如我的账号名为：abccba</p><p>注意：出生日期往前面选一点，选择1990年之前，否则判定不是家长，就无法注册。</p><h3 id="2-开启“管理”和“上帝模式”"><a href="#2-开启“管理”和“上帝模式”" class="headerlink" title="2.开启“管理”和“上帝模式”"></a>2.开启“管理”和“上帝模式”</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 1).进入容器</span></span><br><span class="line">docker <span class="built_in">exec</span> -it mycodecombat /bin/bash</span><br><span class="line"><span class="comment"># 2).打开数据库</span></span><br><span class="line">mongo</span><br><span class="line"><span class="comment"># 3).使用cocoo数据库</span></span><br><span class="line">use coco</span><br><span class="line"><span class="comment"># 4).将abccba账号升级为“上帝模式”，这里abccba为你自己注册时候用的名字</span></span><br><span class="line">db.users.update(&#123;<span class="string">&#x27;name&#x27;</span>:<span class="string">&#x27;abccba&#x27;</span>&#125;,&#123;<span class="variable">$set</span>:&#123;<span class="string">&#x27;earned.gems&#x27;</span>:9999999,permissions:[<span class="string">&quot;godmode&quot;</span>,<span class="string">&quot;admin&quot;</span>]&#125;&#125;,<span class="literal">true</span>,<span class="literal">false</span>);</span><br></pre></td></tr></table></figure><p>再登录这个账号，就能看到全部是解锁状态啦。爽歪歪！<br><img                       lazyload                     src="/images/loading.svg"                     data-src="/img/Docker_codecombat_2.png"                      style="zoom: 50%;"                ></p><p>参考：<a class="link"   href="https://www.bilibili.com/read/cv18786920?from=articleDetail" >docker搭建codecombat本地服务教程<i class="fas fa-external-link-alt"></i></a></p><h2 id="七、修改用户密码"><a href="#七、修改用户密码" class="headerlink" title="七、修改用户密码"></a>七、修改用户密码</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 1).进入容器</span></span><br><span class="line">docker <span class="built_in">exec</span> -it mycodecombat /bin/bash</span><br><span class="line"><span class="comment"># 2).打开数据库</span></span><br><span class="line">mongo</span><br><span class="line"><span class="comment"># 3).使用cocoo数据库</span></span><br><span class="line">use coco</span><br><span class="line"><span class="comment"># 4).查看用户abccba密码</span></span><br><span class="line">db.users.find(&#123;name: <span class="string">&#x27;abccba&#x27;</span>&#125;, &#123;name: 1, passwordHash: 1&#125;)</span><br><span class="line"><span class="comment"># 5).查看用户所有信息</span></span><br><span class="line">db.users.find(&#123;name: <span class="string">&#x27;abccba&#x27;</span>&#125;)</span><br><span class="line"><span class="comment"># 6).修改用户abccba密码</span></span><br><span class="line">db.users.updateOne(&#123;name: <span class="string">&#x27;abccba&#x27;</span>&#125;, &#123;<span class="variable">$set</span>: &#123;passwordHash: <span class="string">&#x27;977aa9a1ce6a580116484f227cca6ded1d82f37987c22121748ff1625640a4623c52e0f420420d15bb89ae680e3f27cb5d7d92d1a2c738fae5d753d66c94c9e8&#x27;</span>&#125;&#125;)</span><br></pre></td></tr></table></figure><p>修改密码的时候，因为是修改为 passwordHash 值，所以不知道的话可以创建个新的账号，看一下这个账号的密码，然后用这个就可以了。</p>]]></content>
      
      
      <categories>
          
          <category> Docker </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Docker </tag>
            
            <tag> Windows </tag>
            
            <tag> Python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Python Selenium本地debugger模式</title>
      <link href="/2022/10/19/Python-Selenium%E6%9C%AC%E5%9C%B0debugger%E6%A8%A1%E5%BC%8F/"/>
      <url>/2022/10/19/Python-Selenium%E6%9C%AC%E5%9C%B0debugger%E6%A8%A1%E5%BC%8F/</url>
      
        <content type="html"><![CDATA[<p>为了跳过selenium的webdriver检测，有很多种方法，这里介绍使用本地debugger调试模式登录。</p><a id="more"></a><h3 id="使用步骤"><a href="#使用步骤" class="headerlink" title="使用步骤"></a>使用步骤</h3><p><strong>1.第一步，用Windows PowerShell或命令提示符运行chrome.exe</strong></p><p>找到Chrome浏览器的安装路径，比如我的在：<code>C:\Program Files (x86)\Google\Chrome\Application</code>，里面就有chrome.exe程序。</p><p>运行以下2条命令：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> <span class="string">&quot;C:\Program Files (x86)\Google\Chrome\Application&quot;</span></span><br><span class="line"></span><br><span class="line">.\chrome.exe --remote-debugging-port=9222 --user-data-dir=D:\cdsf</span><br></pre></td></tr></table></figure><blockquote><p>remote-debugging-port：是代码中指定的端口debuggerAddress；<br>user-data-dir：随便指定一个目录就行（真实没有这个目录也没关系，名字随便取）</p></blockquote><p>如图所示：<br><img                       lazyload                     src="/images/loading.svg"                     data-src="/img/Python_douban_backup_1.png"                                     ></p><p>运行完后会打开Chrome浏览器。</p><p><strong>2.第二步，Python文件中关键代码</strong></p><p>比如在main.py关键代码如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> selenium <span class="keyword">import</span> webdriver</span><br><span class="line"></span><br><span class="line">option = webdriver.ChromeOptions()</span><br><span class="line"><span class="comment"># 使用本地debugger模式，可以提前登录</span></span><br><span class="line">option.add_experimental_option(<span class="string">&#x27;debuggerAddress&#x27;</span>,<span class="string">&#x27;127.0.0.1:9222&#x27;</span>)</span><br><span class="line"></span><br><span class="line">wd = webdriver.Chrome(options=option)</span><br><span class="line">wd.implicitly_wait(<span class="number">10</span>)</span><br><span class="line"></span><br><span class="line">site = <span class="string">&#x27;www.baidu.com&#x27;</span></span><br><span class="line">wd.get(site)</span><br></pre></td></tr></table></figure><p>在main.py中运行程序。就会在打开的Chrome浏览器中正常运行了。</p><p>PS.如果自己提前登录过，还能记住密码。再登录的时候可以不需要登录了。<br>所以，如果需要登录多个账户的，操作完后要记得退出登录。</p>]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>pip升级命令</title>
      <link href="/2022/10/18/pip%E5%8D%87%E7%BA%A7%E5%91%BD%E4%BB%A4/"/>
      <url>/2022/10/18/pip%E5%8D%87%E7%BA%A7%E5%91%BD%E4%BB%A4/</url>
      
        <content type="html"><![CDATA[<h3 id="1-查看当前安装的pip版本"><a href="#1-查看当前安装的pip版本" class="headerlink" title="1.查看当前安装的pip版本"></a>1.查看当前安装的pip版本</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 查看到pip完整信息</span></span><br><span class="line">pip show pip</span><br><span class="line"><span class="comment"># 下面这个经常用来查版本的也可以查询到</span></span><br><span class="line">pip --version</span><br></pre></td></tr></table></figure><a id="more"></a><h3 id="2-升级pip"><a href="#2-升级pip" class="headerlink" title="2.升级pip"></a>2.升级pip</h3><p>如果用pip安装的时候会有比较慢的问题，可以先更改一下pip默认的源，看之前这篇笔记：<a href="/2022/10/12/Python-pip%E6%BA%90%E8%AE%BE%E7%BD%AE%EF%BC%88%E4%BD%BF%E7%94%A8%E6%B8%85%E5%8D%8E%E6%BA%90%EF%BC%89/" title="Python pip源设置（使用清华源）">Python pip源设置（使用清华源）</a></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 使用pip命令时使用清华源</span></span><br><span class="line">pip config <span class="built_in">set</span> global.index-url https://pypi.tuna.tsinghua.edu.cn/simple</span><br><span class="line"><span class="comment"># 升级pip</span></span><br><span class="line">python -m pip install --upgrade pip</span><br></pre></td></tr></table></figure><h3 id="3-pip卸载-amp-安装"><a href="#3-pip卸载-amp-安装" class="headerlink" title="3.pip卸载&amp;安装"></a>3.pip卸载&amp;安装</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># pip卸载</span></span><br><span class="line">python -m pip uninstall pip</span><br><span class="line"></span><br><span class="line"><span class="comment"># pip安装</span></span><br><span class="line">python -m ensurepip --default-pip</span><br><span class="line"><span class="comment"># pip安装 有setuptools的话</span></span><br><span class="line">easy_install pip</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>群晖NAS frp内网穿透教程</title>
      <link href="/2022/10/17/%E7%BE%A4%E6%99%96NAS-frp%E5%86%85%E7%BD%91%E7%A9%BF%E9%80%8F%E6%95%99%E7%A8%8B/"/>
      <url>/2022/10/17/%E7%BE%A4%E6%99%96NAS-frp%E5%86%85%E7%BD%91%E7%A9%BF%E9%80%8F%E6%95%99%E7%A8%8B/</url>
      
        <content type="html"><![CDATA[<p>群晖的系统管理页面，一般默认访问就是：192.168.1.122:5000 类似这样的局域网地址，端口号5000，ip是自己的路由器可以绑的一个ip地址。</p><p>那要在外面访问，不在局域网内的话，就需要内网穿透。</p><p>群晖本身也是自带了内网穿透的，当在【控制面板】开启QuickConnect后，这个就提供了内网穿透。设置一下QuickConnect ID后，就可以通过：<a class="link"   href="http://quickconnect.cn/quickconnect_id" >http://QuickConnect.cn/quickconnect_id<i class="fas fa-external-link-alt"></i></a> 来访问了。（有时候连接比较慢一点，只要打开了，能登录，一般简单操作好像没啥问题的）</p><a id="more"></a><p>如果没有别的需求，就用这个QuickConnect也是够用了，原来就用的这个。</p><p>因为有了别的需求，正好也有腾讯云的服务器和域名在，也正好有需要、在服务器上安装了Frp服务器端，所以顺便给群晖也用了frp来内网穿透。因为群晖也有Docker，所以很方便的。</p><p>之前笔记写了怎么用Docker搭建frp，主要用远程桌面：<a href="/2022/06/18/Docker%E6%90%AD%E5%BB%BAfrp%E5%86%85%E7%BD%91%E7%A9%BF%E9%80%8F%E6%9C%8D%E5%8A%A1%E5%99%A8/" title="Docker搭建frp内网穿透服务器">Docker搭建frp内网穿透服务器</a> 参考这篇文章，把群晖当成一台电脑，就一样了。</p><p>要做的事，其实非常简单，<br>因为已经在服务器上安装了frp server端（推荐Docker安装，这样可以开多个）；<br>只需要在群晖上安装Docker，再下载frp client镜像，启动下容器就行了。</p><p><strong>准备工作：</strong></p><ul><li>一台云服务器（Ubuntu系统，有公网ip）：主要带Docker，用来安装frp server端</li><li>一台群晖NAS：安装frp client端（Docker）</li></ul><h2 id="一、搭建frp-server-服务器端"><a href="#一、搭建frp-server-服务器端" class="headerlink" title="一、搭建frp server(服务器端)"></a>一、搭建frp server(服务器端)</h2><p>这个前面笔记写了，就不细说了。看这里：<a href="/2022/06/18/Docker%E6%90%AD%E5%BB%BAfrp%E5%86%85%E7%BD%91%E7%A9%BF%E9%80%8F%E6%9C%8D%E5%8A%A1%E5%99%A8/" title="Docker搭建frp内网穿透服务器">Docker搭建frp内网穿透服务器</a></p><p>简单说就是启动一个frps的容器：</p><ul><li>1.配置一个frps.ini配置文件</li><li>2.下载frps镜像</li><li>3.启动容器</li></ul><h2 id="二、群晖NAS搭建frp-client-客户端"><a href="#二、群晖NAS搭建frp-client-客户端" class="headerlink" title="二、群晖NAS搭建frp client(客户端)"></a>二、群晖NAS搭建frp client(客户端)</h2><p>跟电脑上没啥差别。<br>步骤：</p><ul><li>1.安装Docker套件（官方就有）</li><li>2.下载frpc镜像/映像，通过url添加：<a class="link"   href="https://registry.hub.docker.com/r/snowdreamtech/frpc" >https://registry.hub.docker.com/r/snowdreamtech/frpc<i class="fas fa-external-link-alt"></i></a></li><li>3.镜像下载完成后，直接单击【启动】按钮，启动容器</li></ul><h3 id="frpc-ini配置文件"><a href="#frpc-ini配置文件" class="headerlink" title="frpc.ini配置文件"></a>frpc.ini配置文件</h3><p>启动容器前，需要做一件事，创建一个frpc.ini配置文件，跟之前的配置也一样的。这里举个例子：</p><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="section">[common]</span></span><br><span class="line"><span class="comment"># server_addr为FRPS服务器IP地址</span></span><br><span class="line"><span class="attr">server_addr</span> = <span class="number">43.142</span>.<span class="number">94.65</span></span><br><span class="line"><span class="comment"># server_port为服务端监听端口，bind_port，与frps.ini中保存一致</span></span><br><span class="line"><span class="attr">server_port</span> = <span class="number">7000</span></span><br><span class="line"><span class="comment"># 身份验证，与frps.ini中保存一致</span></span><br><span class="line"><span class="attr">token</span> = <span class="number">9</span>LgPn24TaC2NYZXY</span><br><span class="line"></span><br><span class="line"><span class="section">[web_host]</span></span><br><span class="line"><span class="attr">type</span> = tcp</span><br><span class="line"><span class="comment"># local_ip是群晖NAS局域网登录的ip，对应local_port一般是5000</span></span><br><span class="line"><span class="attr">local_ip</span> = <span class="number">192.168</span>.<span class="number">1.122</span></span><br><span class="line"><span class="attr">local_port</span> = <span class="number">5000</span></span><br><span class="line"><span class="comment"># remote_port自定义，一般5位的</span></span><br><span class="line"><span class="attr">remote_port</span> = <span class="number">18588</span></span><br></pre></td></tr></table></figure><p>然后打开群晖NAS桌面上的【File Station】，在Docker目录下创建个frp目录，把frpc.ini直接拖放到frp目录里。</p><p>主要说一下启动容器的设置。其实就是界面操作，对应命令一样的。</p><h3 id="启动容器"><a href="#启动容器" class="headerlink" title="启动容器"></a>启动容器</h3><p>1.容器名称：自定义（比如frpc3，这是我开的第3个frpc）<br>2.勾选“使用高权限执行容器”<br>3.点开【高级设置】</p><ul><li>【存储空间】中添加文件frpc.ini，对应装载路径也是固定的一样的：/etc/frp/frpc.ini</li><li>【网络】中勾选使用与Docker Host相同的网络<br>最后应用一下，等容器启动就行了。</li></ul><p>等容器启动后，就可以用frpc.ini配置文件中的 server_addr:remote_port 访问群晖的管理页面了。<br>即：43.142.94.65:18588</p>]]></content>
      
      
      <categories>
          
          <category> NAS </category>
          
      </categories>
      
      
        <tags>
            
            <tag> NAS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Joplin 更改默认存储路径</title>
      <link href="/2022/10/16/Joplin%E6%94%B9%E5%8F%98%E9%BB%98%E8%AE%A4%E5%AD%98%E5%82%A8%E8%B7%AF%E5%BE%84/"/>
      <url>/2022/10/16/Joplin%E6%94%B9%E5%8F%98%E9%BB%98%E8%AE%A4%E5%AD%98%E5%82%A8%E8%B7%AF%E5%BE%84/</url>
      
        <content type="html"><![CDATA[<p>Joplin默认的存储路径在【工具】-&gt;【通用选项】中能看到，就是没法直接更改。<br>Windows上版本默认的路径是：<code>C:\Users\[username]\.config\joplin-desktop</code></p><a id="more"></a><p><strong>更改Joplin存储路径方法（Windows）</strong>：</p><p>在Joplin的快捷方式上右键–&gt;【属性】，在【目标】中添加<code>--profile</code>参数。<br>比如我想保存到<code>D:\Joplin-desktop</code>目录，输入以下内容后保存：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&quot;C:\Program Files\Joplin\Joplin.exe&quot;</span> --profile <span class="string">&quot;D:\Joplin-desktop&quot;</span></span><br></pre></td></tr></table></figure><p>Tips：</p><ul><li>1.目录路径要用双引号</li><li>2.在profile前面是2个<code>-</code></li></ul><p>如果已经在默认路径里写了笔记，直接把默认路径中的内容全部复制到新的路径下 ，再打开Joplin，原来的笔记都还在的。</p>]]></content>
      
      
      <categories>
          
          <category> Windows </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Windows </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Python pip安装包时报错ERROR Could not install packages due to an OSError</title>
      <link href="/2022/10/12/Python-pip%E5%AE%89%E8%A3%85%E5%8C%85%E6%97%B6%E6%8A%A5%E9%94%99OSError/"/>
      <url>/2022/10/12/Python-pip%E5%AE%89%E8%A3%85%E5%8C%85%E6%97%B6%E6%8A%A5%E9%94%99OSError/</url>
      
        <content type="html"><![CDATA[<p>Python用的是虚拟环境virtualenv，然后又是放在同步盘。这样我两台电脑都是装的同一个Python版本，就共用了同一个虚拟环境（放在了同步盘，直接同步的）。</p><p>一台电脑上正常，在另一台电脑上用pip安装的时候报了以下错误：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ERROR: Could not install packages due to an OSError: [Errno 2] No such file or directory:</span><br></pre></td></tr></table></figure><a id="more"></a><p>下面提示还有涉及到的包，用<code>pip uninstall</code>卸载了重装还是不行。</p><p>然后发现在虚拟环境的<code>Lib\site-packages</code>目录下，卸载后的包还有残留的。</p><p><strong>解决方法：</strong><br>可能是同一个包有多版本的目录存在，也可能没卸载干净的。</p><ul><li>1.先用<code>pip uninstall 包名</code>卸载</li><li>2.把<code>Lib\site-packages</code>目录下卸载包后还存在的目录直接删除</li><li>3.再重新用<code>pip install 包名</code>安装包</li></ul><p>然后就可以正常使用了。</p>]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Python pandas读取Excel时空单元格读取为nan</title>
      <link href="/2022/10/12/Python-pandas%E8%AF%BB%E5%8F%96Excel%E6%97%B6%E7%A9%BA%E5%8D%95%E5%85%83%E6%A0%BC%E8%AF%BB%E5%8F%96%E4%B8%BAnan/"/>
      <url>/2022/10/12/Python-pandas%E8%AF%BB%E5%8F%96Excel%E6%97%B6%E7%A9%BA%E5%8D%95%E5%85%83%E6%A0%BC%E8%AF%BB%E5%8F%96%E4%B8%BAnan/</url>
      
        <content type="html"><![CDATA[<p>当用pandas读取excel的时候，用到的是read_excel函数。</p><p>比如以下代码，read_excel函数中（除了第1个参数，后面是可选的）：</p><ul><li>第1个参数是excel文件</li><li>第2个参数是sheet名字</li><li>第3个参数为指定的列名<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">usecols = [<span class="string">&#x27;序号&#x27;</span>,<span class="string">&#x27;姓名&#x27;</span>,<span class="string">&#x27;座位号&#x27;</span>]</span><br><span class="line">df = pd.read_excel(excel_file, sheet_name, usecols=usecols)</span><br></pre></td></tr></table></figure><a id="more"></a></li></ul><p>读取内容后，发现如果单元格是空的话，读取到的字符串就会变成nan。</p><p><strong>解决方法：</strong></p><p>就在使用read_excel函数时，多添加一个参数keep_default_na就行。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">df &#x3D; pd.read_excel(data_file, sheet_name, usecols&#x3D;usecols, keep_default_na&#x3D;&#39;&#39;)</span><br></pre></td></tr></table></figure><p>给keep_default_na设一个当空单元格时的值就行。<br>比如我上面就设为了<code>&#39;&#39;</code>字符串，这个按自己需要，设<code>keep_default_na=False</code>都行。</p>]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
            <tag> Excel </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Python pip源设置（使用清华源）</title>
      <link href="/2022/10/12/Python-pip%E6%BA%90%E8%AE%BE%E7%BD%AE%EF%BC%88%E4%BD%BF%E7%94%A8%E6%B8%85%E5%8D%8E%E6%BA%90%EF%BC%89/"/>
      <url>/2022/10/12/Python-pip%E6%BA%90%E8%AE%BE%E7%BD%AE%EF%BC%88%E4%BD%BF%E7%94%A8%E6%B8%85%E5%8D%8E%E6%BA%90%EF%BC%89/</url>
      
        <content type="html"><![CDATA[<p>直接用pip安装包的时候，用的是默认的python的官方的，是国外的，所以速度有时候挺慢的，用国内的源会方便一点，速度就正常、快多了。</p><p><strong>国内常用的pip源：</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">豆瓣 http:&#x2F;&#x2F;pypi.douban.com&#x2F;simple&#x2F;</span><br><span class="line">清华大学 https:&#x2F;&#x2F;pypi.tuna.tsinghua.edu.cn&#x2F;simple&#x2F;</span><br><span class="line">阿里云 http:&#x2F;&#x2F;mirrors.aliyun.com&#x2F;pypi&#x2F;simple&#x2F;</span><br><span class="line">中国科技大学 https:&#x2F;&#x2F;pypi.mirrors.ustc.edu.cn&#x2F;simple&#x2F;</span><br><span class="line">中国科学技术大学 http:&#x2F;&#x2F;pypi.mirrors.ustc.edu.cn&#x2F;simple&#x2F;</span><br></pre></td></tr></table></figure><p>以下用清华源安装pandas包举例。</p><a id="more"></a><h3 id="1-临时使用清华源安装pandas包"><a href="#1-临时使用清华源安装pandas包" class="headerlink" title="1.临时使用清华源安装pandas包"></a>1.临时使用清华源安装pandas包</h3><p>使用pip命令的时候，添加<code>-i url</code>参数就可以了。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install -i https://pypi.tuna.tsinghua.edu.cn/simple pandas</span><br></pre></td></tr></table></figure><h3 id="2-永久设置使用清华源"><a href="#2-永久设置使用清华源" class="headerlink" title="2.永久设置使用清华源"></a>2.永久设置使用清华源</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 可以先升级下pip版本</span></span><br><span class="line">python -m pip install --upgrade pip</span><br><span class="line"><span class="comment"># 使用pip命令时设置使用清华源</span></span><br><span class="line">pip config <span class="built_in">set</span> global.index-url https://pypi.tuna.tsinghua.edu.cn/simple</span><br></pre></td></tr></table></figure><p>设置后再使用pip命令安装包时，就能看到下载地址是清华源了。</p>]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Excel中随机抽取中奖者</title>
      <link href="/2022/09/25/Excel%E4%B8%AD%E9%9A%8F%E6%9C%BA%E6%8A%BD%E5%8F%96%E4%B8%AD%E5%A5%96%E8%80%85/"/>
      <url>/2022/09/25/Excel%E4%B8%AD%E9%9A%8F%E6%9C%BA%E6%8A%BD%E5%8F%96%E4%B8%AD%E5%A5%96%E8%80%85/</url>
      
        <content type="html"><![CDATA[<p>应用场景：比如随机抽个奖啊，随机抽个人回答问题啊，随机抽个人演讲啊，随机抽人排值班啊……</p><p>如下图所示，要在这一列姓名中<strong>随机</strong>抽出一个人来。<br><img                       lazyload                     src="/images/loading.svg"                     data-src="/img/Excel_rand_name_1.png"                      style="zoom: 75%;"                ></p><p><strong>思路：</strong></p><ul><li>1.在一列中写上姓名，用COUNTA函数统计有内容的总人数</li><li>2.用RANDBETWEEN函数从总人数范围内随机抽取一个人的序号</li><li>3.用INDEX函数返回序号对应的人的姓名</li></ul><a id="more"></a><h3 id="1-用COUNTA函数统计总人数"><a href="#1-用COUNTA函数统计总人数" class="headerlink" title="1.用COUNTA函数统计总人数"></a>1.用COUNTA函数统计总人数</h3><p><strong>COUNTA函数</strong>：计算范围中不为空的单元格的个数。<br><strong>语法</strong>：COUNTA(value1, [value2], …)</p><ul><li>value1：必需。 表示要计数的值的第一个参数。</li><li>value2,…：可选。表示要计数的值的其他参数，最多可包含 255 个参数。</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">计算单元格A2到A6中的非白单元格的数量：</span><br><span class="line">&#x3D;COUNTA(A2:A6)</span><br><span class="line"></span><br><span class="line">计算单元格A列中的非白单元格的数量：</span><br><span class="line">&#x3D;COUNTA(A:A)</span><br></pre></td></tr></table></figure><h3 id="2-用RANDBETWEEN函数从总人数范围内随机抽取一个人的序号"><a href="#2-用RANDBETWEEN函数从总人数范围内随机抽取一个人的序号" class="headerlink" title="2.用RANDBETWEEN函数从总人数范围内随机抽取一个人的序号"></a>2.用RANDBETWEEN函数从总人数范围内随机抽取一个人的序号</h3><p><strong>RANDBETWEEN函数</strong>：返回位于两个指定数之间的一个随机整数。<br><strong>语法</strong>：RANDBETWEEN(bottom, top)</p><ul><li>bottom：必需。 RANDBETWEEN 将返回的最小整数。</li><li>top：必需。 RANDBETWEEN 将返回的最大整数。</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">返回1到100之间的一个随机整数：</span><br><span class="line">&#x3D;RANDBETWEEN(1,100)</span><br><span class="line"></span><br><span class="line">返回A列中从2开始到A列中的非白单元格的数量之间的一个随机整数：</span><br><span class="line">&#x3D;RANDBETWEEN(2,COUNTA(A:A))</span><br></pre></td></tr></table></figure><h3 id="3-用INDEX函数返回序号（行号）对应的人的姓名"><a href="#3-用INDEX函数返回序号（行号）对应的人的姓名" class="headerlink" title="3.用INDEX函数返回序号（行号）对应的人的姓名"></a>3.用INDEX函数返回序号（行号）对应的人的姓名</h3><p>使用 INDEX 函数有两种方法，我们这里用的是数组形式：<br><strong>INDEX函数</strong>：返回表元素或数组元素的值，该元素是通过行号和列号索引选定的。<br><strong>语法</strong>：INDEX(array, row_num, [column_num])</p><ul><li>array：必需。 单元格区域或数组常量。（如果数组只包含一行或一列，则相对应的参数 row_num 或 column_num 为可选参数。）</li><li>row_num：必需。 除非存在 column_num。 选择array中的某行，函数从该行返回数值。 如果省略 row_num，则需使用 column_num。</li><li>column_num：可选。选择数组中的某列，函数从该列返回数值。 如果省略 column_num，则需使用 row_num。</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">返回位于区域A2:B3中第二行和第一列交叉处的数值（即A3的数值）：</span><br><span class="line">&#x3D;INDEX(A2:B3,2,1)</span><br><span class="line"></span><br><span class="line">返回A列中第5行的值：</span><br><span class="line">&#x3D;INDEX(A:A,5)</span><br><span class="line"></span><br><span class="line">返回A列中随机一个有内容的单元格的的值：</span><br><span class="line">&#x3D;INDEX(A:A,RANDBETWEEN(2,COUNTA(A:A)))</span><br></pre></td></tr></table></figure><p>最终使用的公式是：<code>=INDEX(A:A,RANDBETWEEN(2,COUNTA(A:A)))</code>，结果如下图所示：<br><img                       lazyload                     src="/images/loading.svg"                     data-src="/img/Excel_rand_name_2.png"                      style="zoom: 100%;"                ></p><p>PS.按F9键（笔记本可能是Fn+F9），即可随机抽取一个出来；<br>按住F9键（Fn+F9），可以看到随机效果，松开时即会随机抽出一个人来。</p><p>PPS.Excel中常用函数应用介绍：<a href="#">Post not found: 【不断更新系列】Excel常用函数</a></p>]]></content>
      
      
      <categories>
          
          <category> Office </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Excel </tag>
            
            <tag> Office </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>用ffmpeg合并多个ts视频文件</title>
      <link href="/2022/09/21/%E7%94%A8ffmpeg%E5%90%88%E5%B9%B6%E5%A4%9A%E4%B8%AAts%E8%A7%86%E9%A2%91%E6%96%87%E4%BB%B6/"/>
      <url>/2022/09/21/%E7%94%A8ffmpeg%E5%90%88%E5%B9%B6%E5%A4%9A%E4%B8%AAts%E8%A7%86%E9%A2%91%E6%96%87%E4%BB%B6/</url>
      
        <content type="html"><![CDATA[<p>FFmpeg 是一个开源软件，可以执行音频和视频多种格式的录影、转换、串流功能，包含了libavcodec——这是一个用于多个项目中音频和视频的解码器库，以及libavformat——一个音频与视频格式转换库。</p><p>反正FFmpeg很强大的，功能也很多。之前也写过一篇：<a href="/2022/05/03/%E7%94%A8ffmpeg%E4%B8%8B%E8%BD%BDm3u8%E6%A0%BC%E5%BC%8F%E8%A7%86%E9%A2%91/" title="用FFmpeg下载m3u8格式视频">用FFmpeg下载m3u8格式视频</a>。</p><a id="more"></a><h2 id="一、下载FFmpeg"><a href="#一、下载FFmpeg" class="headerlink" title="一、下载FFmpeg"></a>一、下载FFmpeg</h2><h3 id="1-下载FFmpeg"><a href="#1-下载FFmpeg" class="headerlink" title="1.下载FFmpeg"></a>1.下载FFmpeg</h3><p>官网就可以下载 FFmpeg：（<a class="link"   href="http://ffmpeg.org/download.html" >http://ffmpeg.org/download.html<i class="fas fa-external-link-alt"></i></a> ）</p><p>Windows系统的话，选择【Windows EXE Files】-&gt;【Windows builds from gyan.dev】。</p><p>页面上的都可以下载，比如我这直接下载【release builds】中的 ffmpeg-release-essentials.7z，目前最新的版本。如下图所示：<br><img                       lazyload                     src="/images/loading.svg"                     data-src="/img/ffmpeg_download_m3u8_1.png"                      style="zoom: 50%;"                ></p><h3 id="2-添加到环境变量"><a href="#2-添加到环境变量" class="headerlink" title="2.添加到环境变量"></a>2.添加到环境变量</h3><p>下载后是个压缩包，直接解压出来。比如我这解压出来是个 ffmpeg-5.0.1-essentials_build 目录，然后直接把这个目录下的<strong>bin目录</strong>添加到系统环境变量就行。（怎么添加环境变量，百度一下就有）</p><p>因为bin目录下有 ffmpeg.exe 可执行程序，我们在命令行里用 ffmpeg命令时，用的就是这个。</p><h2 id="二、合并多个ts视频文件"><a href="#二、合并多个ts视频文件" class="headerlink" title="二、合并多个ts视频文件"></a>二、合并多个ts视频文件</h2><h3 id="1-新建txt文件"><a href="#1-新建txt文件" class="headerlink" title="1.新建txt文件"></a>1.新建txt文件</h3><p>把所有的.ts文件放到一个文件夹中，比如我放到 F:\2 文件夹中。如下图所示：<br><img                       lazyload                     src="/images/loading.svg"                     data-src="/img/ffmpeg_merge_ts_files_1.png"                      style="zoom: 100%;"                ></p><p>然后在文件夹中新建一个 file.txt文件（名字随意取），文件内容列出所有ts文件。如下：</p><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">file &#x27;F:\2\1.ts&#x27;</span><br><span class="line">file &#x27;F:\2\2.ts&#x27;</span><br><span class="line">file &#x27;F:\2\3.ts&#x27;</span><br><span class="line">file &#x27;F:\2\4.ts&#x27;</span><br><span class="line">file &#x27;F:\2\5.ts&#x27;</span><br><span class="line">file &#x27;F:\2\6.ts&#x27;</span><br><span class="line">file &#x27;F:\2\7.ts&#x27;</span><br></pre></td></tr></table></figure><h3 id="2-用ffmpeg命令合并ts文件"><a href="#2-用ffmpeg命令合并ts文件" class="headerlink" title="2.用ffmpeg命令合并ts文件"></a>2.用ffmpeg命令合并ts文件</h3><p>因为ffmpeg.exe已经添加了环境变量了，所以直接打开个命令提示符/Windows PowerShell，就可以用ffmpeg了。</p><p>使用命名如下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 用命令进入 F:\2 文件夹</span></span><br><span class="line">（如果比较旧的系统不能直接从C盘跨到F盘的，可以先运行 f: 命令进入F盘，再用<span class="built_in">cd</span>命令进入文件夹）</span><br><span class="line"><span class="built_in">cd</span> f:\2</span><br><span class="line"></span><br><span class="line"><span class="comment">#-safe 0：防止Operation not permitted</span></span><br><span class="line">ffmpeg.exe -f concat -safe 0 -i file.txt -c copy output.mp4</span><br></pre></td></tr></table></figure><p>等完成后，这个目录下就有了下载好的名为 output.mp4的视频了。<br><img                       lazyload                     src="/images/loading.svg"                     data-src="/img/ffmpeg_merge_ts_files_2.png"                      style="zoom: 50%;"                ></p><h3 id="3-用ffmpeg命令直接合并ts文件"><a href="#3-用ffmpeg命令直接合并ts文件" class="headerlink" title="3.用ffmpeg命令直接合并ts文件"></a>3.用ffmpeg命令直接合并ts文件</h3><p>如果ts文件较少，就两三个，可以用以下命令直接合并：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ffmpeg -i <span class="string">&quot;concat:1.ts|2.ts|&quot;</span> -c copy output2.mp4</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Software </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Software </tag>
            
            <tag> ffmpeg </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Python Flask笔记（一）</title>
      <link href="/2022/09/20/Python-Flask%E7%AC%94%E8%AE%B0%EF%BC%88%E4%B8%80%EF%BC%89/"/>
      <url>/2022/09/20/Python-Flask%E7%AC%94%E8%AE%B0%EF%BC%88%E4%B8%80%EF%BC%89/</url>
      
        <content type="html"><![CDATA[<h2 id="一、Flask简介"><a href="#一、Flask简介" class="headerlink" title="一、Flask简介"></a>一、Flask简介</h2><p>Flask诞生于2010年，是用Python语言基于Werkzeug工具箱编写的轻量级Web开发框架。</p><p>Flask本身相当于一个内核，其他几乎所有的功能都要用到扩展（邮件扩展Flask-Mail，用户认证Flask-Login) ，都需要用第三方方的扩展来实现。</p><p>其WSGI 工具箱采用 Werkzeug (路由模块)，模板引擎则使用Jinja2。这两个也是Flask框架的核心。</p><p>Python最出名的框架要数Django，此外还有Flask、Tornado等框架。虽然Flask不是最出名的框架，但是Flask应该算是最灵活的框架之一，这也是Flask受到广大开发者喜爱的原因。</p><a id="more"></a><p><strong>Flask常用扩展包</strong>:</p><ul><li>Flask-SQLalchemy：操作数据库;</li><li>Flask-migrate：管理迁移数据库;</li><li>Flask-Mail：邮件;</li><li>Flask-WTF：表单;</li><li>Flask-Bable：提供国际化和本地化支持，翻译;</li><li>Flask-script：插入脚本;</li><li>Flask-Login：认证用户状态;</li><li>Flask-OpenID：认证;</li><li>Flask-RESTful：开发RESTAPI的工具;</li><li>Flask-Bootstrap：集成前端Twitter Bootstrap框架;</li><li>Flask-Moment：本地化日期和时间;</li><li>Flask-Admin：简单而可扩展的管理接口的框架</li></ul><p>扩展列表：<a class="link"   href="http://flask.pocoo.org/extensions/" >http://flask.pocoo.org/extensions/<i class="fas fa-external-link-alt"></i></a><br>1.中文文档(<a class="link"   href="http://docs.jinkan.org/docs/flask/" >http://docs.jinkan.org/docs/flask/<i class="fas fa-external-link-alt"></i></a>)<br>2.英文文档(<a class="link"   href="http://flask.pocoo.org/docs/0.12/" >http://flask.pocoo.org/docs/0.12/<i class="fas fa-external-link-alt"></i></a></p><p><strong>Flask基础扩展包</strong>：</p><p>一般写个最简单的web站点，我就装个操作表单的<strong>Flask-WTF</strong>和操作myql数据库的<strong>Flask-SQLalchemy</strong>就差不多够用了。</p><h2 id="二、安装Flask"><a href="#二、安装Flask" class="headerlink" title="二、安装Flask"></a>二、安装Flask</h2><p>一般我用虚拟环境安装Flask，可以避免包的混乱和版本的冲突，也不会影响系统中安装的全局Python解释器比较方便。</p><p>使用虚拟环境的笔记：<a href="/2022/09/20/VSCode%E8%BF%90%E8%A1%8CPython%E8%99%9A%E6%8B%9F%E7%8E%AF%E5%A2%83virtualenv/" title="VSCode运行Python虚拟环境virtualenv">VSCode运行Python虚拟环境virtualenv</a></p><h3 id="1-安装Flask"><a href="#1-安装Flask" class="headerlink" title="1.安装Flask"></a>1.安装Flask</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">pip install flask</span><br><span class="line">pip install flask==2.2.2 <span class="comment"># 指定Flask版本安装</span></span><br></pre></td></tr></table></figure><p>测试安装是否成功，以代码中加入以下代码，或者直接在ipython中输入后测试：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">from flask import Flask</span><br></pre></td></tr></table></figure><h3 id="2-第一个Flask程序"><a href="#2-第一个Flask程序" class="headerlink" title="2.第一个Flask程序"></a>2.第一个Flask程序</h3><h4 id="Flask程序运行过程"><a href="#Flask程序运行过程" class="headerlink" title="Flask程序运行过程"></a>Flask程序运行过程</h4><ul><li>当客户端想要获取资源时，一般会通过浏览器发起HTTP请求。</li><li>此时，Web服务器会把来自客户端的所有请求都交给Flask程序实例。</li><li>程序实例使用Werkzeug来做路由分发(URL请求和视图函数之间的对应关系)。</li><li>根据每个URL请求,找到具体的视图函数并进行调用。</li><li>在Flask程序中，路由的实现一般是通过程序实例的装饰器实现。</li><li>Flask调用视图函数后,可以返回两种内容:<ul><li>字符串内容：将视图函数的返回值作为响应的内容，返回给客户端(浏览器)</li><li>HTML模版内容：获取到数据后，把数据传入HTML模板文件中，模板引擎负责渲染HTTP响应政据,然后返回响应数据给客户端(浏览器)</li></ul></li></ul><h4 id="代码示例"><a href="#代码示例" class="headerlink" title="代码示例"></a>代码示例</h4><p>创建个项目目录，在目录下创建一个app.py文件，内容如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 1.导入Flask扩展</span></span><br><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Flask</span><br><span class="line"></span><br><span class="line"><span class="comment"># 2.创建Flask应用程序实例</span></span><br><span class="line"><span class="comment"># 需要传入__name__，作用是为了确定资源所在的路径</span></span><br><span class="line">app = Flask(__name__)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 3.定义路由及视图函数</span></span><br><span class="line"><span class="comment"># Flask中定义路由是通过装饰器实现的</span></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/&#x27;</span></span>)</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">index</span>():</span></span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;hello flask&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 4.启动程序</span></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    <span class="comment"># 执行了app.run 就会将Flask程序运行在一个简易的服务器(Flask提供的，用于测试的)</span></span><br><span class="line">    app.run()</span><br></pre></td></tr></table></figure><p>运行后会有网址：当前本机的ip地址（局域网ip）:端口号（默认5000）</p><h2 id="三、安装其它基础扩展包"><a href="#三、安装其它基础扩展包" class="headerlink" title="三、安装其它基础扩展包"></a>三、安装其它基础扩展包</h2><h3 id="1-web表单：安装Flask-WTF扩展"><a href="#1-web表单：安装Flask-WTF扩展" class="headerlink" title="1.web表单：安装Flask-WTF扩展"></a>1.web表单：安装Flask-WTF扩展</h3><p>web表单是web应用程序的基本功能。</p><p>它是HTML页面中负责数据采集的部件。<br>表单有三个部分组成∶表单标签、表单域、表单按钮。<br>表单允许用户输入数据，负责HTML页面数据采集，通过表单将用户输入的数据提交给服务器。</p><p>在Flask中，为了处理web表单，我们一般使用Flask-WTF扩展，它封装了WTForms，并且它有验证表单数据的功能。<br>安装：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install Flask-WTF</span><br></pre></td></tr></table></figure><h3 id="2-mysql数据库：安装flask-sqlalchemy"><a href="#2-mysql数据库：安装flask-sqlalchemy" class="headerlink" title="2.mysql数据库：安装flask-sqlalchemy"></a>2.mysql数据库：安装flask-sqlalchemy</h3><p>SQLALchemy 实际上是对数据库的抽象，让开发者不用直接和SQL语句打交道，而是通过Python对象来操作数据库，在舍弃一些性能开销的同时，换来的是开发效率的较大提升</p><p>SQLAlchemy 是一个关系型数据库框架，它提供了高层的ORM和底层的原生数据库的操作。flask-sqlalchemy是一个简化了SQLAlchemy操作的flask扩展。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">pip install flask-sqlalchemy</span><br><span class="line"></span><br><span class="line">pip install flask-mysqldb <span class="comment"># 如果连接的是mysql数据库，需要安装mysqldb</span></span><br><span class="line"></span><br><span class="line">pip install pymysql <span class="comment"># 还没装pymysql的，也需要安装上</span></span><br></pre></td></tr></table></figure><p>flask-mysqldb 如果安装失败，提示需要mysql client的话。<br>用以下方法安装：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Linux（Ubuntu）用命令安装（安装完client再安装就可以了）：</span><br><span class="line">sudo apt-get install mysql-server //服务端</span><br><span class="line">sudo apt-get install mysql-client //客户端</span><br><span class="line">sudo apt-get install libmysqlclient-dev //程序编译时链接的库</span><br></pre></td></tr></table></figure><p>Windows的话，去 <a class="link"   href="https://www.lfd.uci.edu/~gohlke/pythonlibs/#mysql-python" >https://www.lfd.uci.edu/~gohlke/pythonlibs/#mysql-python<i class="fas fa-external-link-alt"></i></a> 网址下载Mysqlclient对应的whl文件。<br>然后用<code>pip install mysqlclient-1.3.13-cp34-cp34m-win_amd64.whl</code> 命令安装。</p><p>PS.关于这两拓展的具体使用，后面会写更详细的笔记。</p><h3 id="3-requirements-txt文件"><a href="#3-requirements-txt文件" class="headerlink" title="3.requirements.txt文件"></a>3.requirements.txt文件</h3><p>安装完后，在虚拟环境中，所以可以用<code>pip freeze &gt; requirements.txt</code>命令生成requirements.txt文件，看一下已经安装的包有哪些，比如我这有这些：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">click&#x3D;&#x3D;8.1.3</span><br><span class="line">colorama&#x3D;&#x3D;0.4.5</span><br><span class="line">Flask&#x3D;&#x3D;2.2.2</span><br><span class="line">Flask-MySQLdb&#x3D;&#x3D;1.0.1</span><br><span class="line">Flask-SQLAlchemy&#x3D;&#x3D;2.5.1</span><br><span class="line">Flask-WTF&#x3D;&#x3D;1.0.1</span><br><span class="line">greenlet&#x3D;&#x3D;1.1.3</span><br><span class="line">importlib-metadata&#x3D;&#x3D;4.12.0</span><br><span class="line">itsdangerous&#x3D;&#x3D;2.1.2</span><br><span class="line">Jinja2&#x3D;&#x3D;3.1.2</span><br><span class="line">MarkupSafe&#x3D;&#x3D;2.1.1</span><br><span class="line">mysqlclient&#x3D;&#x3D;2.1.1</span><br><span class="line">PyMySQL&#x3D;&#x3D;1.0.2</span><br><span class="line">SQLAlchemy&#x3D;&#x3D;1.4.41</span><br><span class="line">Werkzeug&#x3D;&#x3D;2.2.2</span><br><span class="line">WTForms&#x3D;&#x3D;3.0.1</span><br><span class="line">zipp&#x3D;&#x3D;3.8.1</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
            <tag> Flask </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>VSCode运行Python虚拟环境virtualenv</title>
      <link href="/2022/09/20/VSCode%E8%BF%90%E8%A1%8CPython%E8%99%9A%E6%8B%9F%E7%8E%AF%E5%A2%83virtualenv/"/>
      <url>/2022/09/20/VSCode%E8%BF%90%E8%A1%8CPython%E8%99%9A%E6%8B%9F%E7%8E%AF%E5%A2%83virtualenv/</url>
      
        <content type="html"><![CDATA[<p>使用虚拟环境，可以避免包的混乱和版本的冲突，虚拟环境是Python解释器的副本，在虚拟环境中你可以安装扩展包，为每个程序单独创建的虚拟环境，可以保证程序只能访问虚拟环境中的包。而不会影响系统中安装的全局Python解释器，从而保证全局解释器的整洁。</p><a id="more"></a><h2 id="一、安装虚拟环境"><a href="#一、安装虚拟环境" class="headerlink" title="一、安装虚拟环境"></a>一、安装虚拟环境</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">pip install virtualenv</span><br><span class="line">pip install virtualenvwrapper</span><br><span class="line">pip install virtualenvwrapper-win (不安装这个包，会碰见找不到 mkvirtualenv 命令）</span><br></pre></td></tr></table></figure><p>查看系统是否安装了virtualenv：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">virtualenv --version</span><br></pre></td></tr></table></figure><p>Linux下Python3命令用：pip3<br>Ubuntu查看virtualenvwrapper安装路径：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip3 show virtualenvwrapper</span><br></pre></td></tr></table></figure><p>比如结果是：/home/ubuntu/.local/lib/python3.6/site-packages</p><h2 id="二、创建虚拟环境"><a href="#二、创建虚拟环境" class="headerlink" title="二、创建虚拟环境"></a>二、创建虚拟环境</h2><p>安装完成后需要配置环境变量。</p><p><strong>1.创建一个目录用来存放虚拟环境</strong></p><p>例如：G:\SynologyDrive\Python\Envs</p><p><strong>2.创建系统环境变量(Windows)</strong></p><p>变量名：WORKON_HOME<br>变量值：G:\SynologyDrive\Python\Envs</p><p><strong>3.修改mkvirtualenv.bat 文件(Windows)</strong></p><p>文件中默认的虚拟环境目录是在<code>C:\Users\username</code>下。<br>在 Python安装目录下的<code>Scripts\mkvirtualenv.bat</code>，把第24行</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">set</span> <span class="string">&quot;venvwrapper.default_workon_home=%USERPROFILE%\Envs&quot;</span></span><br></pre></td></tr></table></figure><p>修改为：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">set</span> <span class="string">&quot;venvwrapper.default_workon_home=%WORKON_HOME%&quot;</span></span><br></pre></td></tr></table></figure><p><strong>4.ubuntu配置环境变量</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">1).创建目录用来存放虚拟环境</span><br><span class="line">mkdir ~/.virtualenvs</span><br><span class="line"></span><br><span class="line">2).打开~/ .bashrc文件,并添加如下:</span><br><span class="line">vi ~/ .bashrc</span><br><span class="line"><span class="built_in">export</span> WORKON_HOME=<span class="variable">$HOME</span>/.virtualenvs</span><br><span class="line"><span class="built_in">export</span> VIRTUALENVWRAPPER_PYTHON=/usr/bin/python3</span><br><span class="line"><span class="built_in">export</span> VIRTUALENVWRAPPER_VIRTUALENV=~/.<span class="built_in">local</span>/bin/virtualenv</span><br><span class="line"><span class="built_in">source</span> ~/.<span class="built_in">local</span>/bin/virtualenvwrapper.sh</span><br><span class="line"></span><br><span class="line">3).运行</span><br><span class="line"><span class="built_in">source</span> ~/.bashrc</span><br></pre></td></tr></table></figure><p><strong>5.创建虚拟环境(须在联网状态下)</strong></p><p>保存后重新打开cmd窗口，创建虚拟环境。<br>比如创建一个名为flask_py的虚拟环境命令为：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mkvirtualenv flask_py</span><br></pre></td></tr></table></figure><p>创建完成后，flask_py/lib/python*.*/site-packages目录就是对应的虚拟环境中的包目录。</p><h2 id="三、使用虚拟环境"><a href="#三、使用虚拟环境" class="headerlink" title="三、使用虚拟环境"></a>三、使用虚拟环境</h2><p><strong>1.普通cmd环境</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">1).进入虚拟环境</span><br><span class="line">workon flask_py</span><br><span class="line"></span><br><span class="line">2).退出虚拟环境</span><br><span class="line">deactivate flask_py</span><br></pre></td></tr></table></figure><p><mark>Windows PowerShell环境</mark></p><p>如果想用 Windows PowerShell而不是cmd的，激活虚拟环境的命令是activate而不是workon。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 进入目录</span></span><br><span class="line"><span class="built_in">cd</span> G:\SynologyDrive\Python\Envs\flask_py</span><br><span class="line"><span class="comment"># 激活虚拟环境</span></span><br><span class="line">.\Scripts\activate</span><br></pre></td></tr></table></figure><p><strong>2.VS Code中使用</strong></p><p>1).在 VS Code 选择 “查看 &gt; 命令面板” 或按下 “Ctrl+Shift+P” 来打开命令面板：</p><p>2).再选择 Python: Select Interpreter 来选择运行解释器：</p><p>选择创建的虚拟环境目录下的，即：G:\SynologyDrive\Python\Envs\flask_py\Scriptes\python.exe</p><p>当我们选择虚拟环境后，VS Code会自动安排好一切，包括终端里面的环境。<br><img                       lazyload                     src="/images/loading.svg"                     data-src="/img/VS_Code_Python_virtualenv.png"                      style="zoom: 75%;"                ></p><p>如果运行的时候有报错：无法加载文件 <code>***\Activate.ps1</code>，因为在此系统上禁止运行脚本。</p><p>因为运行了activate.bat后会在同级目录下生成activate.ps1，PowerShell 默认不允许执行*.ps1脚本文件。</p><p><strong>解决方法：</strong></p><p>使用管理员打开powershell，运行以下命令：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Set-ExecutionPolicy RemoteSigned</span><br></pre></td></tr></table></figure><p>选择“Y是”后回车就可以了。</p><blockquote><p>Policy的有效参数:<br>– Restricted: 不载入任何配置文件，不运行任何脚本。 “Restricted” 是默认的。<br>– AllSigned: 只有被Trusted publisher签名的脚本或者配置文件才能使用，包括你自己再本地写的脚本。<br>– RemoteSigned: 对于从Internet上下载的脚本或者配置文件，只有被Trusted，publisher签名的才能使用。<br>– Unrestricted: 可以载入所有配置文件，可以运行所有脚本文件. 如果你运行一个从internet下载并且没有签名的脚本，在运行之前，你会被提示需要一定的权限。<br>– Bypass: 所有东西都可以使用，并且没有提示和警告。<br>– Undefined: 删除当前scope被赋予的ExecutionPolicy，但是Group Policy scope的Execution Policy不会被删除。</p></blockquote><h2 id="四、requirements文件"><a href="#四、requirements文件" class="headerlink" title="四、requirements文件"></a>四、requirements文件</h2><p>Python项目中必须包含一个requirements.txt 文件，用来记录所有依赖包及其精确的版本号，以便在新环境中进行部署操作。</p><h3 id="1-生成requirements文件"><a href="#1-生成requirements文件" class="headerlink" title="1.生成requirements文件"></a>1.生成requirements文件</h3><p>在虚拟环境使用以下命令将当前虚拟环境中的依赖包以版本号生成至文件中：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip freeze &gt; requirements.txt</span><br></pre></td></tr></table></figure><h3 id="2-使用requirements文件"><a href="#2-使用requirements文件" class="headerlink" title="2.使用requirements文件"></a>2.使用requirements文件</h3><p>当需要创建这个虚拟环境的完全副本，可以创建一个新的虚拟环境，并在其上运行以下命令：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install -r requirements.txt</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
            <tag> VSCode </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>VSCode远程连接服务器 免密登录（ssh key）</title>
      <link href="/2022/07/14/VSCode%E8%BF%9C%E7%A8%8B%E8%BF%9E%E6%8E%A5%E6%9C%8D%E5%8A%A1%E5%99%A8-%E5%85%8D%E5%AF%86%E7%99%BB%E5%BD%95/"/>
      <url>/2022/07/14/VSCode%E8%BF%9C%E7%A8%8B%E8%BF%9E%E6%8E%A5%E6%9C%8D%E5%8A%A1%E5%99%A8-%E5%85%8D%E5%AF%86%E7%99%BB%E5%BD%95/</url>
      
        <content type="html"><![CDATA[<p>VS Code远程连接服务器，就可以直接编辑服务器（Linux）上的文件了，进行开发等，就比较方便了。用VS Code也很简单，直接安装一个 Remote - SSH 的扩展插件就可以了。</p><p>第一次添加登录的时候用 <code>ssh username@hostip -A</code>登录，比如用户名ubuntu，服务器ip是111.222.333.444，那就是<code>ssh ubuntu@111.222.333.444</code>。</p><p>然后输入密码就能登录了。</p><a id="more"></a><p>但是，每次登录都需要输入密码。我们就可以用SSH密钥。<br>之前在使用Hexo博客的时候，已经用过了：<a href="/2022/05/01/Hexo-SSH%E5%AF%86%E9%92%A5%E9%85%8D%E7%BD%AE/" title="Hexo SSH密钥配置">Hexo SSH密钥配置</a></p><p>分两步：</p><ul><li>1.在本机创建SSH密钥；</li><li>2.把公钥文件上传/复制到服务器上。</li></ul><h2 id="第一步、在本机创建一对新的SSH密钥-keys"><a href="#第一步、在本机创建一对新的SSH密钥-keys" class="headerlink" title="第一步、在本机创建一对新的SSH密钥(keys)"></a>第一步、在本机创建一对新的SSH密钥(keys)</h2><h3 id="1-查看本机是否存在SSH-keys"><a href="#1-查看本机是否存在SSH-keys" class="headerlink" title="1.查看本机是否存在SSH keys"></a>1.查看本机是否存在SSH keys</h3><p>在<code>~/.ssh</code>目录中。打开【Git Bash】，并运行：：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> ~/.ssh</span><br></pre></td></tr></table></figure><p>如果本机已经存在ssh公钥和私钥，可以略过这一步，直接进入第二步操作（默认的公钥文件是id_rsa.pub）。当然，建议可以创建一对新的SSH密钥专用一些用来通用。</p><h3 id="2-创建新的SSH密钥"><a href="#2-创建新的SSH密钥" class="headerlink" title="2.创建新的SSH密钥"></a>2.创建新的SSH密钥</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh-keygen -t rsa -C <span class="string">&quot;your_email@example.com&quot;</span></span><br></pre></td></tr></table></figure><p>注意上面的邮箱是自己的邮箱地址，按这个邮箱地址会创建一对密钥。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Generating public/private rsa key pair.</span><br><span class="line">Enter file <span class="keyword">in</span> <span class="built_in">which</span> to save the key (/c/Users/yourusername/.ssh/id_rsa): [Press enter]</span><br></pre></td></tr></table></figure><p><strong>直接回车</strong>，会将密钥按默认文件进行存储。<br>此时提示输入特定的文件名，比如：ubuntu_rsa<br><strong>（注：建议还是输入特定的名字，不然就是默认的id_rsa文件，如果你有多个SSH需要管理的，就比较麻烦了。当然，你也可以所有的全部用一套，看自己需要吧。）</strong></p><p>接着，根据提示，你<strong>需要输入密码和确认密码</strong></p><p>不想输的话，就都直接回车确认密码。(所谓的最安全的密码，就是没有密码 哈哈）。<br>相关提示如下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Enter passphrase (empty <span class="keyword">for</span> no passphrase): [Type a passphrase]</span><br><span class="line">Enter same passphrase again: [Type passphrase again]</span><br></pre></td></tr></table></figure><p>输入密码完成之后，屏幕会显示信息，表示完成了。</p><p>然后就可以在目录：C:\Users\yourusername.ssh 中看到有ubuntu_rsa 和 ubuntu_rsa.pub 文件了。<br>如果没有自定义名字，则会在当前目录下生成 id_rsa.pub(公钥)和 id_rsa(私钥)文件。</p><h3 id="3-SSH密钥配置"><a href="#3-SSH密钥配置" class="headerlink" title="3.SSH密钥配置"></a>3.SSH密钥配置</h3><p>用记事本程序打开 <code>~/.ssh</code> 目录（C:\Users\yourusername.ssh）中的config文件。<br>添加以下内容：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Host 111.222.333.444</span><br><span class="line">  HostName 111.222.333.444</span><br><span class="line">  IdentityFile ~&#x2F;.ssh&#x2F;ubuntu_rsa</span><br><span class="line">  PreferredAuthentications publickey</span><br><span class="line">  User ubuntu</span><br></pre></td></tr></table></figure><blockquote><p>Host：站点别名，方便命令行使用<br>HostName：站点名（服务器ip或域名）<br>PreferredAuthentications：优先使用公钥连接<br>IdentityFile：私钥路径</p></blockquote><p>以上ip地址换成你自己服务器的ip地址。</p><h2 id="第二步、在服务器上添加公钥"><a href="#第二步、在服务器上添加公钥" class="headerlink" title="第二步、在服务器上添加公钥"></a>第二步、在服务器上添加公钥</h2><h3 id="1-创建-ssh-目录"><a href="#1-创建-ssh-目录" class="headerlink" title="1.创建 ~/.ssh 目录"></a>1.创建 ~/.ssh 目录</h3><p>在服务器中创建.ssh目录，把本机的 ubuntu_rsa.pub 中的文件内容全部添加到 authorized_keys 文件中。（即 <code>~/.ssh/authorized_keys</code> 文件）</p><p>先查看是否已存在<code>~/.ssh</code>目录，不存在则新建.ssh目录：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> ~</span><br><span class="line"><span class="comment"># 查看是否存在.ssh目录</span></span><br><span class="line">ls -la</span><br><span class="line"><span class="comment"># 若不存在，则新建.ssh目录</span></span><br><span class="line">mkdir .ssh</span><br></pre></td></tr></table></figure><h3 id="2-在-ssh目录下创建authorized-keys文件"><a href="#2-在-ssh目录下创建authorized-keys文件" class="headerlink" title="2.在.ssh目录下创建authorized_keys文件"></a>2.在.ssh目录下创建authorized_keys文件</h3><p>为了方便，我也不创建了，直接直接把 ubuntu_rsa.pub 用ftp工具上传，然后移动到 .ssh目录后，重命名为 authorized_keys就行了。并用 chmod修改目录的权限。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">mv ubuntu_rsa.pub .ssh/authorized_keys</span><br><span class="line"></span><br><span class="line">chmod 600 ~/.ssh/authorized_keys</span><br><span class="line">chmod 700 ~/.ssh</span><br></pre></td></tr></table></figure><p>这样就可以了。再用VS Code远程连接服务器就不用每次输入密码啦。</p>]]></content>
      
      
      <categories>
          
          <category> VSCode </category>
          
      </categories>
      
      
        <tags>
            
            <tag> VSCode </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Python生成安全随机密码（secrets）</title>
      <link href="/2022/07/12/Python%E7%94%9F%E6%88%90%E5%AE%89%E5%85%A8%E9%9A%8F%E6%9C%BA%E5%AF%86%E7%A0%81/"/>
      <url>/2022/07/12/Python%E7%94%9F%E6%88%90%E5%AE%89%E5%85%A8%E9%9A%8F%E6%9C%BA%E5%AF%86%E7%A0%81/</url>
      
        <content type="html"><![CDATA[<p>secrets 模块可用于生成高加密强度的随机数，适应管理密码、账户验证、安全凭据和相关机密数据管理的需要。</p><p>特别地，应当优先使用 secrets 来替代 random 模块中的默认伪随机数生成器，random 被设计用于建模和仿真，而不适用于安全和加密。</p><a id="more"></a><h3 id="1-简单随机密码"><a href="#1-简单随机密码" class="headerlink" title="1.简单随机密码"></a>1.简单随机密码</h3><p>主要了解下 secrets 的几个函数。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> secrets</span><br><span class="line"><span class="keyword">import</span> string</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">easy_passwd</span>():</span></span><br><span class="line">    num = secrets.randbelow(<span class="number">10</span>) <span class="comment"># [0,n) 区间的安全随机整数</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;num:&quot;</span>, num)</span><br><span class="line"></span><br><span class="line">    s = secrets.choice([<span class="string">&quot;a&quot;</span>,<span class="string">&quot;b&quot;</span>,<span class="string">&quot;z&quot;</span>]) <span class="comment"># 在一个序列中随机挑选一个元素</span></span><br><span class="line">    <span class="built_in">print</span>(s)</span><br><span class="line"></span><br><span class="line">    b_s = secrets.token_bytes(nbytes=<span class="number">6</span>) <span class="comment"># 随机生成指定长度的一串字节串</span></span><br><span class="line">    <span class="built_in">print</span>(b_s) <span class="comment"># b&#x27;\x03\x8c\xc9\x1f\x88z&#x27;</span></span><br><span class="line"></span><br><span class="line">    hex_s = secrets.token_hex(nbytes=<span class="number">6</span>) <span class="comment"># 随机生成指定长度的一串16进制字符串</span></span><br><span class="line">    <span class="built_in">print</span>(hex_s) <span class="comment"># 739ca28ec0b4</span></span><br><span class="line"></span><br><span class="line">    urlsafe_s = secrets.token_urlsafe(<span class="number">12</span>) <span class="comment"># 随机成成指定长度的一串url安全的字符串</span></span><br><span class="line">    <span class="built_in">print</span>(urlsafe_s) <span class="comment"># 6pQFjrPf_dWwjcIK</span></span><br><span class="line">    url = <span class="string">&#x27;https://mydomain.com/reset=&#x27;</span> + urlsafe_s</span><br><span class="line"></span><br><span class="line">easy_passwd()</span><br></pre></td></tr></table></figure><h3 id="2-高加密强度安全随机密码"><a href="#2-高加密强度安全随机密码" class="headerlink" title="2.高加密强度安全随机密码"></a>2.高加密强度安全随机密码</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> secrets</span><br><span class="line"><span class="keyword">import</span> string</span><br><span class="line"></span><br><span class="line"><span class="comment"># 生成指定长度的字母数字密码</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">letter_digit_passwd</span>(<span class="params">length</span>):</span></span><br><span class="line">    <span class="comment"># s=&#x27;abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789&#x27;</span></span><br><span class="line">    s = string.ascii_letters + string.digits</span><br><span class="line">    passwd = <span class="string">&#x27;&#x27;</span>.join(secrets.choice(s) <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(length))</span><br><span class="line">    <span class="keyword">return</span> passwd</span><br><span class="line"></span><br><span class="line"><span class="comment"># 生成指定长度的字母数字密码：至少1个小写字母，upper_num个大写字母和digit_num个数字</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">letter_digit_passwd2</span>(<span class="params">length, upper_num, digit_num</span>):</span></span><br><span class="line">    s = string.ascii_letters + string.digits</span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        password = <span class="string">&#x27;&#x27;</span>.join(secrets.choice(s) <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(length))</span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">any</span>(c.islower() <span class="keyword">for</span> c <span class="keyword">in</span> password)</span><br><span class="line">                <span class="keyword">and</span> <span class="built_in">sum</span>(c.isupper() <span class="keyword">for</span> c <span class="keyword">in</span> password) &gt;= upper_num</span><br><span class="line">                <span class="keyword">and</span> <span class="built_in">sum</span>(c.isdigit() <span class="keyword">for</span> c <span class="keyword">in</span> password) &gt;= digit_num):</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">    <span class="keyword">return</span> password</span><br><span class="line"></span><br><span class="line"><span class="comment"># 生成指定长度的字母数字密码</span></span><br><span class="line"><span class="built_in">print</span>(letter_digit_passwd(<span class="number">32</span>)) <span class="comment"># Ox8zw4FgCL8rehnAIcenK4jufrT0K3Bi</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 生成指定长度的字母数字密码：至少1个小写字母，2个大写字母和3个数字</span></span><br><span class="line"><span class="built_in">print</span>(letter_digit_passwd2(<span class="number">16</span>, <span class="number">2</span>, <span class="number">3</span>)) <span class="comment"># mavo52y2gMcjTLNR</span></span><br></pre></td></tr></table></figure><p>官方文档：<a class="link"   href="https://roohui.com/help/tutorial/python_3_9/library/secrets.html#random-numbers" >secrets — 生成安全随机数字用于管理密码<i class="fas fa-external-link-alt"></i></a></p><h3 id="3-Linux生成随机密码"><a href="#3-Linux生成随机密码" class="headerlink" title="3.Linux生成随机密码"></a>3.Linux生成随机密码</h3><p>在Linux系统中，生成随机密码就更简单了，就一句命令。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">openssl rand -base64 32</span><br></pre></td></tr></table></figure><p>这个命令会生成一个32字节的随机字符串,并用base64编码输出。</p>]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Python处理微信小程序云数据库json文件</title>
      <link href="/2022/07/12/Python%E5%A4%84%E7%90%86%E5%BE%AE%E4%BF%A1%E5%B0%8F%E7%A8%8B%E5%BA%8F%E4%BA%91%E6%95%B0%E6%8D%AE%E5%BA%93json%E6%96%87%E4%BB%B6/"/>
      <url>/2022/07/12/Python%E5%A4%84%E7%90%86%E5%BE%AE%E4%BF%A1%E5%B0%8F%E7%A8%8B%E5%BA%8F%E4%BA%91%E6%95%B0%E6%8D%AE%E5%BA%93json%E6%96%87%E4%BB%B6/</url>
      
        <content type="html"><![CDATA[<p>微信小程序的云数据库的数据是可以直接导出的，支持导出成JSON文件或者CSV文件。</p><p>json文件处理起来很方便，这里就直接导出成json文件了。</p><p>导出结果举例（data.json）：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&#123;<span class="attr">&quot;_id&quot;</span>:<span class="string">&quot;058dfefe629caed7075a6b8725c45ac1&quot;</span>,<span class="attr">&quot;_openid&quot;</span>:<span class="string">&quot;oaaaaaaaaL-7777777777&quot;</span>,<span class="attr">&quot;isbn&quot;</span>:<span class="string">&quot;9787530677216&quot;</span>&#125;</span><br><span class="line">&#123;<span class="attr">&quot;_id&quot;</span>:<span class="string">&quot;b69f67c0629caee605fe79f43980a838&quot;</span>,<span class="attr">&quot;_openid&quot;</span>:<span class="string">&quot;oaaaaaaaaL-7777777777&quot;</span>,<span class="attr">&quot;isbn&quot;</span>:<span class="string">&quot;9787108064554&quot;</span>&#125;</span><br><span class="line">&#123;<span class="attr">&quot;_id&quot;</span>:<span class="string">&quot;8f75309d629caf0c072a3f7a1f20df26&quot;</span>,<span class="attr">&quot;_openid&quot;</span>:<span class="string">&quot;oaaaaaaaaL-7777777777&quot;</span>,<span class="attr">&quot;isbn&quot;</span>:<span class="string">&quot;4781114262343&quot;</span>&#125;</span><br><span class="line">&#123;<span class="attr">&quot;_id&quot;</span>:<span class="string">&quot;16db756f629caf3905ef16d24f5638f3&quot;</span>,<span class="attr">&quot;isbn&quot;</span>:<span class="string">&quot;9787508669762&quot;</span>,<span class="attr">&quot;_openid&quot;</span>:<span class="string">&quot;oaaaaaaaaL-7777777777&quot;</span>&#125;</span><br></pre></td></tr></table></figure><a id="more"></a><p>虽然导出来是.json文件，但这其实也不是标准的json格式的文件。如果是标准格式，应该是这样的：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[&#123;<span class="attr">&quot;_id&quot;</span>:<span class="string">&quot;058dfefe629caed7075a6b8725c45ac1&quot;</span>,<span class="attr">&quot;_openid&quot;</span>:<span class="string">&quot;oaaaaaaaaL-7777777777&quot;</span>,<span class="attr">&quot;isbn&quot;</span>:<span class="string">&quot;9787530677216&quot;</span>&#125;,</span><br><span class="line">&#123;<span class="attr">&quot;_id&quot;</span>:<span class="string">&quot;b69f67c0629caee605fe79f43980a838&quot;</span>,<span class="attr">&quot;_openid&quot;</span>:<span class="string">&quot;oaaaaaaaaL-7777777777&quot;</span>,<span class="attr">&quot;isbn&quot;</span>:<span class="string">&quot;9787108064554&quot;</span>&#125;,</span><br><span class="line">&#123;<span class="attr">&quot;_id&quot;</span>:<span class="string">&quot;8f75309d629caf0c072a3f7a1f20df26&quot;</span>,<span class="attr">&quot;_openid&quot;</span>:<span class="string">&quot;oaaaaaaaaL-7777777777&quot;</span>,<span class="attr">&quot;isbn&quot;</span>:<span class="string">&quot;4781114262343&quot;</span>&#125;,</span><br><span class="line">&#123;<span class="attr">&quot;_id&quot;</span>:<span class="string">&quot;16db756f629caf3905ef16d24f5638f3&quot;</span>,<span class="attr">&quot;isbn&quot;</span>:<span class="string">&quot;9787508669762&quot;</span>,<span class="attr">&quot;_openid&quot;</span>:<span class="string">&quot;oaaaaaaaaL-7777777777&quot;</span>&#125;]</span><br></pre></td></tr></table></figure><p>如果是标准的json格式的文件，可以用<code>json.load(fp)</code>函数直接读取文件内容并转换为python的类型。</p><p>因为并不是标准的json格式的文件，所以就当成普通的文本文件就行。分两步：</p><ul><li>1.直接按普通文本文件读取内容；</li><li>2.再对读取的数据进行格式处理。</li></ul><h3 id="1-读取json文件内容（非json标准格式）"><a href="#1-读取json文件内容（非json标准格式）" class="headerlink" title="1.读取json文件内容（非json标准格式）"></a>1.读取json文件内容（非json标准格式）</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 读取 json文件内容（非json标准格式）</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">read_non_standard_json</span>(<span class="params">json_file</span>):</span></span><br><span class="line">    data = []</span><br><span class="line">    <span class="keyword">with</span> <span class="built_in">open</span>(json_file, <span class="string">&#x27;r&#x27;</span>, encoding=<span class="string">&#x27;utf-8&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">        <span class="keyword">for</span> line <span class="keyword">in</span> f:</span><br><span class="line">            data.append(line.strip(<span class="string">&#x27;\n&#x27;</span>)) <span class="comment"># 读取一行</span></span><br><span class="line">    </span><br><span class="line">    f.close()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> data</span><br></pre></td></tr></table></figure><p>返回的data是个List，每一行是一个字符串：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[&#39;&#123;&quot;_id&quot;:&quot;058dfefe629caed7075a6b8725c45ac1&quot;,&quot;_openid&quot;:&quot;oaaaaaaaaL-7777777777&quot;,&quot;isbn&quot;:&quot;9787530677216&quot;&#125;&#39;, &#39;&#123;&quot;_id&quot;:&quot;b69f67c0629caee605fe79f43980a838&quot;,&quot;_openid&quot;:&quot;oaaaaaaaaL-7777777777&quot;,&quot;isbn&quot;:&quot;9787108064554&quot;&#125;&#39;, &#39;&#123;&quot;_id&quot;:&quot;8f75309d629caf0c072a3f7a1f20df26&quot;,&quot;_openid&quot;:&quot;oaaaaaaaaL-7777777777&quot;,&quot;isbn&quot;:&quot;4781114262343&quot;&#125;&#39;, &#39;&#123;&quot;_id&quot;:&quot;16db756f629caf3905ef16d24f5638f3&quot;,&quot;isbn&quot;:&quot;9787508669762&quot;,&quot;_openid&quot;:&quot;oaaaaaaaaL-7777777777&quot;&#125;&#39;]</span><br></pre></td></tr></table></figure><h3 id="2-数据格式化处理"><a href="#2-数据格式化处理" class="headerlink" title="2.数据格式化处理"></a>2.数据格式化处理</h3><ul><li>把data中每一项（json的字符串）反序列化为Python数据对象（dict字典）。</li><li>然后把需要的项组成一个List。</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">data_format</span>(<span class="params">data</span>):</span></span><br><span class="line">    data_list = []</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> s <span class="keyword">in</span> data:</span><br><span class="line">        one = json.loads(s, strict=<span class="literal">False</span>) <span class="comment"># 把json格式的字符串转为python的dict对象</span></span><br><span class="line">        <span class="comment"># print(type(one)) # &lt;class &#x27;dict&#x27;&gt;</span></span><br><span class="line">        isbn = one[<span class="string">&#x27;isbn&#x27;</span>]</span><br><span class="line">        openid = one[<span class="string">&#x27;_openid&#x27;</span>]</span><br><span class="line">        data_list.append([openid, isbn])</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> data_list</span><br></pre></td></tr></table></figure><h3 id="3-完整代码"><a href="#3-完整代码" class="headerlink" title="3.完整代码"></a>3.完整代码</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> json</span><br><span class="line"></span><br><span class="line"><span class="comment"># 读取 json文件内容（非json标准格式）</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">read_non_standard_json</span>(<span class="params">json_file</span>):</span></span><br><span class="line">    data = []</span><br><span class="line">    <span class="keyword">with</span> <span class="built_in">open</span>(json_file, <span class="string">&#x27;r&#x27;</span>, encoding=<span class="string">&#x27;utf-8&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">        <span class="keyword">for</span> line <span class="keyword">in</span> f:</span><br><span class="line">            data.append(line.strip(<span class="string">&#x27;\n&#x27;</span>)) <span class="comment"># 读取一行</span></span><br><span class="line">    </span><br><span class="line">    f.close()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> data</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">data_format</span>(<span class="params">data</span>):</span></span><br><span class="line">    data_list = []</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> s <span class="keyword">in</span> data:</span><br><span class="line">        one = json.loads(s, strict=<span class="literal">False</span>) <span class="comment"># 把json格式的字符串转为python的dict对象</span></span><br><span class="line">        <span class="comment"># print(type(one)) # &lt;class &#x27;dict&#x27;&gt;</span></span><br><span class="line">        isbn = one[<span class="string">&#x27;isbn&#x27;</span>]</span><br><span class="line">        openid = one[<span class="string">&#x27;_openid&#x27;</span>]</span><br><span class="line">        data_list.append([openid, isbn])</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> data_list</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;-&#x27;</span>*<span class="number">10</span> + <span class="string">&#x27;读取json文件内容（非json标准格式）&#x27;</span> + <span class="string">&#x27;-&#x27;</span>*<span class="number">10</span>)</span><br><span class="line">json_file = <span class="string">r&#x27;.\data.json&#x27;</span></span><br><span class="line">data = read_non_standard_json(json_file)</span><br><span class="line"><span class="built_in">print</span>(data)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;-&#x27;</span>*<span class="number">10</span> + <span class="string">&#x27;格式化&#x27;</span> + <span class="string">&#x27;-&#x27;</span>*<span class="number">10</span>)</span><br><span class="line">data_list = data_format(data)</span><br><span class="line"><span class="built_in">print</span>(data_list)</span><br></pre></td></tr></table></figure><p>运行结果：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">----------读取json文件内容（非json标准格式）----------</span><br><span class="line">[&#39;&#123;&quot;_id&quot;:&quot;058dfefe629caed7075a6b8725c45ac1&quot;,&quot;_openid&quot;:&quot;oaaaaaaaaL-7777777777&quot;,&quot;isbn&quot;:&quot;9787530677216&quot;&#125;&#39;, &#39;&#123;&quot;_id&quot;:&quot;b69f67c0629caee605fe79f43980a838&quot;,&quot;_openid&quot;:&quot;oaaaaaaaaL-7777777777&quot;,&quot;isbn&quot;:&quot;9787108064554&quot;&#125;&#39;, &#39;&#123;&quot;_id&quot;:&quot;8f75309d629caf0c072a3f7a1f20df26&quot;,&quot;_openid&quot;:&quot;oaaaaaaaaL-7777777777&quot;,&quot;isbn&quot;:&quot;4781114262343&quot;&#125;&#39;, &#39;&#123;&quot;_id&quot;:&quot;16db756f629caf3905ef16d24f5638f3&quot;,&quot;isbn&quot;:&quot;9787508669762&quot;,&quot;_openid&quot;:&quot;oaaaaaaaaL-7777777777&quot;&#125;&#39;]</span><br><span class="line">----------格式化----------</span><br><span class="line">[[&#39;oaaaaaaaaL-7777777777&#39;, &#39;9787530677216&#39;], [&#39;oaaaaaaaaL-7777777777&#39;, &#39;9787108064554&#39;], [&#39;oaaaaaaaaL-7777777777&#39;, &#39;4781114262343&#39;], [&#39;oaaaaaaaaL-7777777777&#39;, &#39;9787508669762&#39;]]</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
            <tag> 微信小程序 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Python JSON使用举例</title>
      <link href="/2022/07/12/Python-JSON%E4%BD%BF%E7%94%A8%E4%B8%BE%E4%BE%8B/"/>
      <url>/2022/07/12/Python-JSON%E4%BD%BF%E7%94%A8%E4%B8%BE%E4%BE%8B/</url>
      
        <content type="html"><![CDATA[<p>JSON是一种轻量级的数据交换格式。易于人类的阅读和编写，同时也易于机器解析和生成，是目前应用最广泛的数据交换格式。</p><p>像一些开放API接口，很多返回数据也都有json格式。这样跨语言、跨平台使用就很方便了。</p><p>比如这样的json数据（注意json中都是双引号）：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">[    </span><br><span class="line">    &#123;</span><br><span class="line">        <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;水浒传&quot;</span>,</span><br><span class="line">        <span class="attr">&quot;author&quot;</span>: <span class="string">&quot;施耐庵&quot;</span>,</span><br><span class="line">        <span class="attr">&quot;time&quot;</span>: <span class="string">&quot;2016-09-01&quot;</span>,</span><br><span class="line">        <span class="attr">&quot;isbn&quot;</span>: <span class="string">&quot;1111222233444&quot;</span></span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;三国演义&quot;</span>,</span><br><span class="line">        <span class="attr">&quot;author&quot;</span>: <span class="string">&quot;罗贯中&quot;</span>,</span><br><span class="line">        <span class="attr">&quot;time&quot;</span>: <span class="string">&quot;2017-09-01&quot;</span>,</span><br><span class="line">        <span class="attr">&quot;isbn&quot;</span>: <span class="string">&quot;1111222233555&quot;</span></span><br><span class="line">    &#125;</span><br><span class="line">]</span><br></pre></td></tr></table></figure><a id="more"></a><h2 id="JSON函数"><a href="#JSON函数" class="headerlink" title="JSON函数"></a>JSON函数</h2><p>Python里用json也很方便，主要就四个函数。</p><p>最主要是前两个处理字符串的，后两个是处理文件的：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">json.dumps(obj)：将Python对象序列化成json字符串</span><br><span class="line">json.loads(s)：将已编码的json字符串反序列化为Python对象</span><br><span class="line"></span><br><span class="line">json.dump(obj,fp)：将python数据类型转换并保存到json格式的文件</span><br><span class="line">json.load(fp)：从json格式的文件中读取数据并转换为python的类型</span><br></pre></td></tr></table></figure><p>使用 JSON 函数需要导入 json 库：<code>import json</code>。</p><h3 id="1-json-dumps-obj-序列化成json字符串"><a href="#1-json-dumps-obj-序列化成json字符串" class="headerlink" title="1. json.dumps(obj) 序列化成json字符串"></a>1. json.dumps(obj) 序列化成json字符串</h3><p><strong>语法：</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">json.dumps(obj, skipkeys=<span class="literal">False</span>, ensure_ascii=<span class="literal">True</span>, check_circular=<span class="literal">True</span>, allow_nan=<span class="literal">True</span>, cls=<span class="literal">None</span>, indent=<span class="literal">None</span>, separators=<span class="literal">None</span>, encoding=<span class="string">&quot;utf-8&quot;</span>, default=<span class="literal">None</span>, sort_keys=<span class="literal">False</span>, **kw)</span><br></pre></td></tr></table></figure><p><strong>2个重要参数：</strong><br>1).ensure_ascii 参数</p><p>默认的话是 <code>ensure_ascii=True</code>，这个当有中文字符的时候就会有问题，默认True表示使用ascii编码。如果想输出正常中文，就要设置成 <code>ensure_ascii=False</code>。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> json</span><br><span class="line">s = <span class="string">&#x27;水浒传&#x27;</span></span><br><span class="line"><span class="built_in">print</span>(json.dumps(s)) <span class="comment"># &quot;\u6c34\u6d52\u4f20&quot;</span></span><br><span class="line"><span class="built_in">print</span>(json.dumps(s, ensure_ascii=<span class="literal">False</span>)) <span class="comment"># &quot;水浒传&quot;</span></span><br></pre></td></tr></table></figure><p>2).indent 参数</p><p>默认是 <code>indent=None</code>，表示没有格式。indent后面的数值表示缩进的空格数。看下例子就懂了。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> json</span><br><span class="line">book = &#123;<span class="string">&#x27;水浒传&#x27;</span>:<span class="string">&#x27;施耐庵&#x27;</span>, <span class="string">&#x27;三国演义&#x27;</span>:<span class="string">&#x27;罗贯中&#x27;</span>, <span class="string">&#x27;红楼梦&#x27;</span>:<span class="string">&#x27;曹雪芹&#x27;</span>&#125;</span><br><span class="line"><span class="built_in">print</span>(json.dumps(book, ensure_ascii=<span class="literal">False</span>))</span><br><span class="line"><span class="built_in">print</span>(json.dumps(book, ensure_ascii=<span class="literal">False</span>, separators=(<span class="string">&#x27;,&#x27;</span>,<span class="string">&#x27;:&#x27;</span>)))</span><br><span class="line"><span class="built_in">print</span>(json.dumps(book, ensure_ascii=<span class="literal">False</span>, indent=<span class="number">2</span>)) <span class="comment"># 缩进2个</span></span><br><span class="line"><span class="built_in">print</span>(json.dumps(book, ensure_ascii=<span class="literal">False</span>, indent=<span class="number">4</span>)) <span class="comment"># 缩进4个</span></span><br></pre></td></tr></table></figure><p>输出结果为：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">&#123;&quot;水浒传&quot;: &quot;施耐庵&quot;, &quot;三国演义&quot;: &quot;罗贯中&quot;, &quot;红楼梦&quot;: &quot;曹雪芹&quot;&#125;</span><br><span class="line">&#123;&quot;水浒传&quot;:&quot;施耐庵&quot;,&quot;三国演义&quot;:&quot;罗贯中&quot;,&quot;红楼梦&quot;:&quot;曹雪芹&quot;&#125;</span><br><span class="line">&#123;</span><br><span class="line">  &quot;水浒传&quot;: &quot;施耐庵&quot;,</span><br><span class="line">  &quot;三国演义&quot;: &quot;罗贯中&quot;,</span><br><span class="line">  &quot;红楼梦&quot;: &quot;曹雪芹&quot;</span><br><span class="line">&#125;</span><br><span class="line">&#123;</span><br><span class="line">    &quot;水浒传&quot;: &quot;施耐庵&quot;,</span><br><span class="line">    &quot;三国演义&quot;: &quot;罗贯中&quot;,</span><br><span class="line">    &quot;红楼梦&quot;: &quot;曹雪芹&quot;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>还有两个参数：</p><ul><li><code>sort_keys=False</code>：默认是没排序的，可以按照key来排序；</li><li><code>separators=None</code>：如果设置成<code>separators=(&#39;,&#39;,&#39;:&#39;)</code>表示元素之间用逗号隔开，key和value之间用冒号隔开（这里没有空格，需要空格就加上，默认是有的）</li></ul><p><strong>举例：</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> json</span><br><span class="line"></span><br><span class="line">book = &#123;<span class="string">&#x27;水浒传&#x27;</span>:<span class="string">&#x27;施耐庵&#x27;</span>, <span class="string">&#x27;三国演义&#x27;</span>:<span class="string">&#x27;罗贯中&#x27;</span>, <span class="string">&#x27;红楼梦&#x27;</span>:<span class="string">&#x27;曹雪芹&#x27;</span>&#125;</span><br><span class="line"><span class="comment"># dumps 方法将数据对象序列化为 json格式的字符串</span></span><br><span class="line">json_info = json.dumps(book, ensure_ascii=<span class="literal">False</span>, indent=<span class="number">4</span>)</span><br><span class="line"><span class="built_in">print</span>(json_info)</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">type</span>(book)) <span class="comment"># &lt;class &#x27;dict&#x27;&gt;</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">type</span>(json_info)) <span class="comment"># &lt;class &#x27;str&#x27;&gt;</span></span><br><span class="line"></span><br><span class="line">book_info = [</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="string">&#x27;name&#x27;</span>: <span class="string">&#x27;水浒传&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;author&#x27;</span>: <span class="string">&#x27;施耐庵&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;time&#x27;</span>: <span class="string">&#x27;2016-09-01&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;isbn&#x27;</span>: <span class="string">&#x27;1111222233444&#x27;</span></span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="string">&#x27;name&#x27;</span>: <span class="string">&#x27;三国演义&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;author&#x27;</span>: <span class="string">&#x27;罗贯中&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;time&#x27;</span>: <span class="string">&#x27;2017-09-01&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;isbn&#x27;</span>: <span class="string">&#x27;1111222233555&#x27;</span></span><br><span class="line">    &#125;</span><br><span class="line">]</span><br><span class="line">json_info2 = json.dumps(book_info, ensure_ascii=<span class="literal">False</span>, indent=<span class="number">4</span>)</span><br><span class="line"><span class="built_in">print</span>(json_info2)</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">type</span>(book_info)) <span class="comment"># &lt;class &#x27;list&#x27;&gt;</span></span><br></pre></td></tr></table></figure><p>输出结果如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    &quot;水浒传&quot;: &quot;施耐庵&quot;,</span><br><span class="line">    &quot;三国演义&quot;: &quot;罗贯中&quot;,</span><br><span class="line">    &quot;红楼梦&quot;: &quot;曹雪芹&quot;</span><br><span class="line">&#125;</span><br><span class="line">&lt;class &#39;dict&#39;&gt;</span><br><span class="line">&lt;class &#39;str&#39;&gt;</span><br><span class="line">[</span><br><span class="line">    &#123;</span><br><span class="line">        &quot;name&quot;: &quot;水浒传&quot;,</span><br><span class="line">        &quot;author&quot;: &quot;施耐庵&quot;,</span><br><span class="line">        &quot;time&quot;: &quot;2016-09-01&quot;,</span><br><span class="line">        &quot;isbn&quot;: &quot;1111222233444&quot;</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">        &quot;name&quot;: &quot;三国演义&quot;,</span><br><span class="line">        &quot;author&quot;: &quot;罗贯中&quot;,</span><br><span class="line">        &quot;time&quot;: &quot;2017-09-01&quot;,</span><br><span class="line">        &quot;isbn&quot;: &quot;1111222233555&quot;</span><br><span class="line">    &#125;</span><br><span class="line">]</span><br><span class="line">&lt;class &#39;list&#39;&gt;</span><br></pre></td></tr></table></figure><p>一般比较常用的应该就是python的dict字典或list列表编码成json格式字符串。</p><h3 id="2-json-loads-s-反序列化成Python数据对象"><a href="#2-json-loads-s-反序列化成Python数据对象" class="headerlink" title="2. json.loads(s) 反序列化成Python数据对象"></a>2. json.loads(s) 反序列化成Python数据对象</h3><p><strong>语法：</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">json.loads(s[, encoding[, cls[, object_hook[, parse_float[, parse_int[, parse_constant[, object_pairs_hook[, **kw]]]]]]]])</span><br></pre></td></tr></table></figure><p><strong>1个重要参数：</strong><br>strict 参数<br>默认是<code>strict=True</code>，是不能有控制字符的，如果有，会报一个错：<br><code>ValueError Invalid control character……</code></p><p>官方文档中也有这个参数的说明：</p><blockquote><p>如果 strict 为 false （默认为 True ），那么控制字符将被允许在字符串内。在此上下文中的控制字符编码在范围 0–31 内的字符，包括 ‘\t’ (制表符）， ‘\n’ ， ‘\r’ 和 ‘\0’ </p></blockquote><p>所以，一般我们就直接设为<code>strict=False</code>。</p><p><strong>举例：</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> json</span><br><span class="line">book = &#123;<span class="string">&#x27;水浒传&#x27;</span>:<span class="string">&#x27;施耐庵&#x27;</span>, <span class="string">&#x27;三国演义&#x27;</span>:<span class="string">&#x27;罗贯中&#x27;</span>, <span class="string">&#x27;红楼梦&#x27;</span>:<span class="string">&#x27;曹雪芹 &#x27;</span>&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;-&#x27;</span>*<span class="number">10</span> + <span class="string">&#x27;序列化为json格式字符串&#x27;</span> + <span class="string">&#x27;-&#x27;</span>*<span class="number">10</span>)</span><br><span class="line"><span class="comment"># 1.json.dumps(obj) 方法将数据对象序列化为 json格式的字符串</span></span><br><span class="line">json_info = json.dumps(book, ensure_ascii=<span class="literal">False</span>, indent=<span class="number">4</span>)</span><br><span class="line"><span class="built_in">print</span>(json_info)</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">type</span>(book)) <span class="comment"># &lt;class &#x27;dict&#x27;&gt;</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">type</span>(json_info)) <span class="comment"># &lt;class &#x27;str&#x27;&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;-&#x27;</span>*<span class="number">10</span> + <span class="string">&#x27;反序列化为Python数据对象&#x27;</span> + <span class="string">&#x27;-&#x27;</span>*<span class="number">10</span>)</span><br><span class="line"><span class="comment"># 2.json.loads(s) 方法把json格式的字符串变为 Python中的数据对象</span></span><br><span class="line">trans_info = json.loads(json_info, strict=<span class="literal">False</span>)</span><br><span class="line"><span class="built_in">print</span>(trans_info)</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">type</span>(trans_info)) <span class="comment"># &lt;class &#x27;dict&#x27;&gt;</span></span><br></pre></td></tr></table></figure><p>输出结果如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">----------序列化为json格式字符串----------</span><br><span class="line">&#123;</span><br><span class="line">    &quot;水浒传&quot;: &quot;施耐庵&quot;,</span><br><span class="line">    &quot;三国演义&quot;: &quot;罗贯中&quot;,</span><br><span class="line">    &quot;红楼梦&quot;: &quot;曹雪芹 &quot;</span><br><span class="line">&#125;</span><br><span class="line">&lt;class &#39;dict&#39;&gt;</span><br><span class="line">&lt;class &#39;str&#39;&gt;</span><br><span class="line">----------反序列化为Python数据对象----------</span><br><span class="line">&#123;&#39;水浒传&#39;: &#39;施耐庵&#39;, &#39;三国演义&#39;: &#39;罗贯中&#39;, &#39;红楼梦&#39;: &#39;曹雪芹 &#39;&#125;</span><br><span class="line">&lt;class &#39;dict&#39;&gt;</span><br></pre></td></tr></table></figure><h3 id="3-json-dump-obj-fp-保存到json格式的文件"><a href="#3-json-dump-obj-fp-保存到json格式的文件" class="headerlink" title="3. json.dump(obj,fp) 保存到json格式的文件"></a>3. json.dump(obj,fp) 保存到json格式的文件</h3><p><strong>语法：</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">json.dump(obj, fp, *, skipkeys=<span class="literal">False</span>, ensure_ascii=<span class="literal">True</span>, check_circular=<span class="literal">True</span>, allow_nan=<span class="literal">True</span>, cls=<span class="literal">None</span>, indent=<span class="literal">None</span>, separators=<span class="literal">None</span>, default=<span class="literal">None</span>, sort_keys=<span class="literal">False</span>, **kw)</span><br></pre></td></tr></table></figure><p><strong>2个重要参数：</strong><br>跟<code>json.dumps(obj)</code>一样的，主要就是ensure_ascii 和 indent。</p><p><strong>举例：</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> json</span><br><span class="line">book_info = [</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="string">&#x27;name&#x27;</span>: <span class="string">&#x27;水浒传&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;author&#x27;</span>: <span class="string">&#x27;施耐庵&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;time&#x27;</span>: <span class="string">&#x27;2016-09-01&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;isbn&#x27;</span>: <span class="string">&#x27;1111222233444&#x27;</span></span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="string">&#x27;name&#x27;</span>: <span class="string">&#x27;三国演义&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;author&#x27;</span>: <span class="string">&#x27;罗贯中&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;time&#x27;</span>: <span class="string">&#x27;2017-09-01&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;isbn&#x27;</span>: <span class="string">&#x27;1111222233555&#x27;</span></span><br><span class="line">    &#125;</span><br><span class="line">]</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;-&#x27;</span>*<span class="number">10</span> + <span class="string">&#x27;保存到json格式的文件&#x27;</span> + <span class="string">&#x27;-&#x27;</span>*<span class="number">10</span>)</span><br><span class="line"><span class="comment"># 3.json.dump(obj, fp) 方法将python数据类型转换并保存到json格式的文件内</span></span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">r&#x27;.\book.json&#x27;</span>, <span class="string">&#x27;w&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">    json.dump(book_info, f, ensure_ascii=<span class="literal">False</span>, indent=<span class="number">4</span>)</span><br></pre></td></tr></table></figure><h3 id="4-json-load-fp-读取json格式文件数据"><a href="#4-json-load-fp-读取json格式文件数据" class="headerlink" title="4.json.load(fp) 读取json格式文件数据"></a>4.json.load(fp) 读取json格式文件数据</h3><p><strong>语法：</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">json.load(fp, *, cls=<span class="literal">None</span>, object_hook=<span class="literal">None</span>, parse_float=<span class="literal">None</span>, parse_int=<span class="literal">None</span>, parse_constant=<span class="literal">None</span>, object_pairs_hook=<span class="literal">None</span>, **kw)</span><br></pre></td></tr></table></figure><p><strong>举例：</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> json</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;-&#x27;</span>*<span class="number">10</span> + <span class="string">&#x27;读取json文件内容&#x27;</span> + <span class="string">&#x27;-&#x27;</span>*<span class="number">10</span>)</span><br><span class="line"><span class="comment"># 4.json.load(fp) 方法读取 json文件内容并转换为python的类型</span></span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">r&#x27;.\book.json&#x27;</span>, <span class="string">&#x27;r&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">    data = json.load(f)</span><br><span class="line">f.close()</span><br><span class="line"><span class="built_in">print</span>(data)</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">type</span>(data)) <span class="comment"># &lt;class &#x27;list&#x27;&gt;</span></span><br></pre></td></tr></table></figure><p>官方文档：<a class="link"   href="https://docs.python.org/zh-cn/3.9/library/json.html" >json — JSON 编码和解码器<i class="fas fa-external-link-alt"></i></a></p>]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Excel中多条件查询</title>
      <link href="/2022/07/01/Excel%E4%B8%AD%E5%A4%9A%E6%9D%A1%E4%BB%B6%E6%9F%A5%E8%AF%A2/"/>
      <url>/2022/07/01/Excel%E4%B8%AD%E5%A4%9A%E6%9D%A1%E4%BB%B6%E6%9F%A5%E8%AF%A2/</url>
      
        <content type="html"><![CDATA[<p>一般，原来在Excel中查询用的最多的就是vlookup，后来有了xlookup，很多时候更方便就用xlookup了。</p><p>不过 ，这都是针对一个条件的查询。</p><p>举个例子，比如要查询表格中某个人的总分。</p><p>因为，不同班级会有相同姓名的情况，所以不能直接按姓名来查询。<br>查询的时候需要两个条件：一个是班级，另一个是姓名，同时满足这两个条件才能查询到这个人。<br>（当然，假设同一个班级里没有相同姓名。如果同一个班级里都有相同姓名，多添加一列学号/序号就行了）</p><a id="more"></a><p>如下图所示：<br><img                       lazyload                     src="/images/loading.svg"                     data-src="/img/Excel_more_condition_query_1.png"                      style="zoom: 75%;"                ></p><p><strong>思路：</strong></p><ul><li>用 match 函数找到同时满足两个条件的索引号；</li><li>用 index 函数通过索引号查询。</li></ul><h3 id="1-index-函数"><a href="#1-index-函数" class="headerlink" title="1.index 函数"></a>1.index 函数</h3><p><strong>功能</strong>：返回表元素或数组元素的值，该元素是通过行号和列号索引选定的。<br><strong>语法</strong>：INDEX(array, row_num, [column_num])</p><p>我们会用到的就是在一列里的，所以举例都是一列中的。</p><p><strong>举例（上面的表格）</strong>：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">INDEX(D2:D31,1) 表示D2:D31的单元格内容作为一个数组，取第1个值，即D2的值(388)</span><br><span class="line">INDEX(D2:D31,3) 表示D2:D31的单元格内容作为一个数组，取第3个值，即D4的值(329)</span><br></pre></td></tr></table></figure><p>那我们只需要这个学生对应的索引行号，就可以查询到了。用match函数。</p><h3 id="2-match-函数"><a href="#2-match-函数" class="headerlink" title="2.match 函数"></a>2.match 函数</h3><p><strong>功能</strong>：在指定范围单元格中搜索特定的项，然后返回该项在此区域中的相对位置。<br><strong>语法</strong>：MATCH(lookup_value, lookup_array, [match_type])</p><p><strong>举例（上面的表格）</strong>：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">MATCH(F2,$B$2:$B$31,0) 表示在B2:B31中，查询F2(201)的位置，结果是：11(第1个201)</span><br><span class="line">MATCH(G2,$C$2:$C$31,0) 表示在C2:C31中，查询G2(荀彧)的位置，结果是：1(第1个荀彧)</span><br><span class="line">MATCH(F2&amp;G2,$B$2:$B$31&amp;$C$2:$C$31,0) 同时满足F2(201)和G2(荀彧)，结果是：15</span><br></pre></td></tr></table></figure><h3 id="3-公式组合"><a href="#3-公式组合" class="headerlink" title="3.公式组合"></a>3.公式组合</h3><p>同时满足班级：F2(201)和姓名：G2(荀彧)的条件，查询其总分的公式：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#x3D;INDEX($D$2:$D$31,MATCH(F2&amp;G2,$B$2:$B$31&amp;$C$2:$C$31,0))</span><br></pre></td></tr></table></figure><p>返回的结果就是255。<br><img                       lazyload                     src="/images/loading.svg"                     data-src="/img/Excel_more_condition_query_2.png"                      style="zoom: 75%;"                ></p><p>如果3个条件的话，match函数查询索引号的时候，继续加一个条件就行。</p><p>PS.注意，我这里标题没算进去，所以起始行号都是第2行，即用match函数查询、index函数查询的时候起始行号要保持一致。要么都算标题行，要么都不算。因为match函数返回的是第几个。</p>]]></content>
      
      
      <categories>
          
          <category> Office </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Excel </tag>
            
            <tag> Office </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Python拆分Excel表</title>
      <link href="/2022/07/01/Python%E6%8B%86%E5%88%86Excel%E8%A1%A8/"/>
      <url>/2022/07/01/Python%E6%8B%86%E5%88%86Excel%E8%A1%A8/</url>
      
        <content type="html"><![CDATA[<p>因为有个系统导入数据的时候，有近2000条的数据，每次一导入就卡死了，得拆成几百条一张的表格才行。</p><p>用Python的pandas拆分一下excel表很简单。而且会保留标题行。</p><a id="more"></a><h2 id="安装pandas库"><a href="#安装pandas库" class="headerlink" title="安装pandas库"></a>安装pandas库</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 安装pandas库：</span></span><br><span class="line">pip install pandas</span><br><span class="line"></span><br><span class="line"><span class="comment"># 当然，操作excel的库也要安装一下，一般操作.xlsx格式的，安装openpyxl：</span></span><br><span class="line">pip install openpyxl</span><br><span class="line"></span><br><span class="line"><span class="comment"># 如果，最后保存文件是.xls格式的，需要安装xlwt：</span></span><br><span class="line">pip install xlwt</span><br></pre></td></tr></table></figure><p>最后保存成<code>.xls</code>格式的时候，会有如下提示：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">As the xlwt package is no longer maintained, the xlwt engine will be removed in a fuine will be removed in a future version of pandas.</span><br></pre></td></tr></table></figure><p>这个东西在pandas中会被淘汰，不用管，等以后不能用了再说。<br>毕竟还是有些破系统的导入，只支持xls格式的。</p><h2 id="拆分Excel表举例"><a href="#拆分Excel表举例" class="headerlink" title="拆分Excel表举例"></a>拆分Excel表举例</h2><p>比如：有个表格如下图所示，想按【年级】字段，拆分表，每个年级一个表。<br><img                       lazyload                     src="/images/loading.svg"                     data-src="/img/Python_split_excel_1.png"                      style="zoom: 75%;"                ></p><p>完整代码如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span>():</span></span><br><span class="line">    ex_file = <span class="string">r&#x27;.\ex\split_名单.xlsx&#x27;</span></span><br><span class="line">    data = pd.read_excel(ex_file)</span><br><span class="line">    <span class="comment"># rows = data.shape[0] # 获取行数，不算标题行。shape[1]获取列数</span></span><br><span class="line">    <span class="comment"># print(rows)</span></span><br><span class="line"></span><br><span class="line">    type_list = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>] <span class="comment"># 年级列的所有值</span></span><br><span class="line">    <span class="keyword">for</span> grade <span class="keyword">in</span> type_list:</span><br><span class="line">        df = data.loc[data[<span class="string">&#x27;年级&#x27;</span>] == grade]</span><br><span class="line">        path = <span class="string">r&#x27;.\ex\split&#x27;</span> + <span class="string">&#x27;\\&#x27;</span> + <span class="built_in">str</span>(grade) + <span class="string">&#x27;.xlsx&#x27;</span> <span class="comment"># 新生成的文件名，当然.\ex\split目录已建好</span></span><br><span class="line">        df.to_excel(path, index=<span class="literal">False</span>)</span><br><span class="line">    </span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;------------fine!&#x27;</span>)</span><br><span class="line"></span><br><span class="line">main()</span><br></pre></td></tr></table></figure><p>运行后，结果如图：<br><img                       lazyload                     src="/images/loading.svg"                     data-src="/img/Python_split_excel_2.png"                      style="zoom: 75%;"                ></p><p>当然，如果是部门类别，也是一样的。<br>如果没有一个类别字段的，也是可以按序号拆分的 ，比如500条一拆。</p>]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
            <tag> Excel </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>office无法打开，找不到VCRUNTIME140_1.dll</title>
      <link href="/2022/07/01/office%E6%97%A0%E6%B3%95%E6%89%93%E5%BC%80%EF%BC%8C%E6%89%BE%E4%B8%8D%E5%88%B0VCRUNTIME140-1-dll/"/>
      <url>/2022/07/01/office%E6%97%A0%E6%B3%95%E6%89%93%E5%BC%80%EF%BC%8C%E6%89%BE%E4%B8%8D%E5%88%B0VCRUNTIME140-1-dll/</url>
      
        <content type="html"><![CDATA[<p><strong>问题描述：</strong><br>Office2016，运行Word/Excel/PPT的时候，都提示“<strong>找不到VCRUNTIME140_1.dll</strong>”。</p><p>然后，把office卸载了，重新安装了，还是不行；运行程序，修复了下，也还是不行。</p><a id="more"></a><p>Microsoft Visual C++ 201X Redistributable 也是正常安装着的。</p><p><strong>解决方法：</strong></p><p>查看 <code>C:\Windows\System32</code>目录下， vcruntime140_1.dll 文件是否存在。</p><p>（果然没有，只有 vcruntime140.dll 这个。）</p><p>去C盘直接搜索 vcruntime140_1.dll 这个文件，只要能搜索到，直接复制到<code>C:\Windows\System32</code> 目录下，再打开office的软件就可以用了。</p><p>如果C盘也搜索不到，就到别的电脑上或者网上下载一个复制到<code>C:\Windows\System32</code> 目录下就行。</p><p>官方回答：<a class="link"   href="https://answers.microsoft.com/zh-hans/msoffice/forum/all/office%E6%97%A0%E6%B3%95%E6%AD%A3%E5%B8%B8/50770488-bd09-4451-a04b-8f33f345d454" >office无法正常打开，也无法从程序与功能修复<i class="fas fa-external-link-alt"></i></a></p>]]></content>
      
      
      <categories>
          
          <category> Office </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Office </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【行政办公系列】统计重复出现的人的次数</title>
      <link href="/2022/06/26/%E3%80%90%E8%A1%8C%E6%94%BF%E5%8A%9E%E5%85%AC%E7%B3%BB%E5%88%97%E3%80%91%E7%BB%9F%E8%AE%A1%E9%87%8D%E5%A4%8D%E5%87%BA%E7%8E%B0%E7%9A%84%E4%BA%BA%E7%9A%84%E6%AC%A1%E6%95%B0/"/>
      <url>/2022/06/26/%E3%80%90%E8%A1%8C%E6%94%BF%E5%8A%9E%E5%85%AC%E7%B3%BB%E5%88%97%E3%80%91%E7%BB%9F%E8%AE%A1%E9%87%8D%E5%A4%8D%E5%87%BA%E7%8E%B0%E7%9A%84%E4%BA%BA%E7%9A%84%E6%AC%A1%E6%95%B0/</url>
      
        <content type="html"><![CDATA[<p>在使用Excel表格的时候，有时候会需要统计某个人/所有人出现的次数。</p><p>以下分别介绍用Excel和Python的方法。</p><a id="more"></a><p>举例：如下这张表格，想统计每个人出现的次数。<br><img                       lazyload                     src="/images/loading.svg"                     data-src="/img/Python_Excel_count_names_1.png"                      style="zoom: 75%;"                ></p><p>注意：这里比单纯的姓名复杂一丢丢，要考虑到不同班级出现同名的情况（这并不是同一个人），只有相同班级同姓名的才是同一个人。</p><p>所以，首先，可以先用班级+姓名来表示一个人。在以上表格中增加一列，用公式<code>A1&amp;B1</code>求出C列为班级+姓名（粘贴成文本值）。如下图：<br><img                       lazyload                     src="/images/loading.svg"                     data-src="/img/Python_Excel_count_names_2.png"                      style="zoom: 75%;"                ></p><h2 id="Excel中统计重复出现的人的次数"><a href="#Excel中统计重复出现的人的次数" class="headerlink" title="Excel中统计重复出现的人的次数"></a>Excel中统计重复出现的人的次数</h2><p>Excel中主要分2步：</p><ul><li>第一步，通过删除重复值，得出没有重复名字的列；</li><li>第二步，再统计没重复名字这一列，每个名字出现的次数就行了。</li></ul><h3 id="1-复制C列，删除重复值"><a href="#1-复制C列，删除重复值" class="headerlink" title="1.复制C列，删除重复值"></a>1.复制C列，删除重复值</h3><ul><li>首先，复制C列到D列；</li><li>然后，选中D列数据，打开【数据】-&gt;【数据工具】组中的【删除重复值】；</li><li>最后，就得到了没有重复姓名的D列。<img                       lazyload                     src="/images/loading.svg"                     data-src="/img/Python_Excel_count_names_3.png"                      style="zoom: 75%;"                ></li></ul><h3 id="2-用countif公式求出现的次数"><a href="#2-用countif公式求出现的次数" class="headerlink" title="2.用countif公式求出现的次数"></a>2.用countif公式求出现的次数</h3><p>用公式<code>=COUNTIF($C$1:$C$20,D1)</code>求D1单元格内容在C列（C1:C20）中出现的次数。<br><img                       lazyload                     src="/images/loading.svg"                     data-src="/img/Python_Excel_count_names_4.png"                      style="zoom: 75%;"                ></p><h3 id="3-把D列中的班级和姓名分开"><a href="#3-把D列中的班级和姓名分开" class="headerlink" title="3.把D列中的班级和姓名分开"></a>3.把D列中的班级和姓名分开</h3><p>把合在一起的班级姓名分开一下用截取字符串的两个函数：</p><ul><li>在F列求班级：<code>=LEFT(D1,3)</code> 表示从左开始，取3个字符；</li><li>在G列求姓名：<code>=MID(D1,4,4)</code> 表示从中间第4个字符开始，取4个字符（如果有名字长的，多取几个字符就行）。</li></ul><p>这样就把重复出现的人的次数统计出来了。结果如图：<br><img                       lazyload                     src="/images/loading.svg"                     data-src="/img/Python_Excel_count_names_5.png"                      style="zoom: 75%;"                ></p><p>之前还录过<strong>在Excel求重复人的金额的总和</strong>的视频。<br>其实也差不多，就是求次数的COUNTIF函数换成SUMIF函数求金额的和就行了。</p><div style="position: relative; width: 100%; height: 0; padding-bottom: 75%;"><iframe src="//player.bilibili.com/player.html?aid=422008287&bvid=BV1W3411b7x5&cid=454472297&page=1" scrolling="no" border="0" frameborder="no" framespacing="0" allowfullscreen="true" style="position: absolute; width: 100%; height: 100%; left: 0; top: 0;"> </iframe></div><h2 id="Python统计Excel中重复出现的人的次数"><a href="#Python统计Excel中重复出现的人的次数" class="headerlink" title="Python统计Excel中重复出现的人的次数"></a>Python统计Excel中重复出现的人的次数</h2><p>Python中主要也是分2步：</p><ul><li>第一步，读取Excel表格中C列（班级+姓名）的数据，返回姓名列表List；</li><li>第二步，用pandas库直接统计出次数。</li></ul><p>看这篇笔记就行：<a href="/2023/01/07/Python-pandas%E7%BB%9F%E8%AE%A1Excel%E8%A1%A8%E4%B8%AD%E4%BA%BA%E5%90%8D%E6%AC%A1%E6%95%B0/" title="Python pandas统计Excel表中人名次数">Python pandas统计Excel表中人名次数</a></p><p>不过，先添加个标题行。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">ex_count</span>(<span class="params">ex_file, output_file</span>):</span></span><br><span class="line">    <span class="comment"># 1.从Excel读取</span></span><br><span class="line">    usecols = [<span class="string">&#x27;班级姓名&#x27;</span>]</span><br><span class="line">    sheet_name = <span class="string">&#x27;Sheet1&#x27;</span> <span class="comment"># sheet名</span></span><br><span class="line">    df = pd.read_excel(ex_file, sheet_name=sheet_name, usecols=usecols)</span><br><span class="line">    data_list = np.array(df).tolist() <span class="comment"># 把数据转为List</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 2.处理数据</span></span><br><span class="line">    result_list = [] <span class="comment"># 一列数据</span></span><br><span class="line">    <span class="keyword">for</span> data <span class="keyword">in</span> data_list:</span><br><span class="line">        result_list.append(data[<span class="number">0</span>])</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 3.写入Excel</span></span><br><span class="line">    <span class="keyword">if</span> os.path.exists(output_file):</span><br><span class="line">        os.remove(output_file)</span><br><span class="line">    result = pd.value_counts(result_list) <span class="comment"># 统计列表中每项的次数</span></span><br><span class="line">    <span class="comment"># print(type(result)) # &lt;class &#x27;pandas.core.series.Series&#x27;&gt;</span></span><br><span class="line">    result.to_excel(output_file)</span><br><span class="line"></span><br><span class="line">ex_count(<span class="string">&#x27;count_names.xlsx&#x27;</span>, <span class="string">&#x27;统计结果.xlsx&#x27;</span>)</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
            <tag> Excel </tag>
            
            <tag> Office </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>VSCode 无法加载文件\Scripts\Activate.ps1，因为在此系统上禁止运行脚本</title>
      <link href="/2022/06/26/VSCode%E6%97%A0%E6%B3%95%E5%8A%A0%E8%BD%BD%E6%96%87%E4%BB%B6-Scripts-Activate-ps1%EF%BC%8C%E5%9B%A0%E4%B8%BA%E5%9C%A8%E6%AD%A4%E7%B3%BB%E7%BB%9F%E4%B8%8A%E7%A6%81%E6%AD%A2%E8%BF%90%E8%A1%8C%E8%84%9A%E6%9C%AC/"/>
      <url>/2022/06/26/VSCode%E6%97%A0%E6%B3%95%E5%8A%A0%E8%BD%BD%E6%96%87%E4%BB%B6-Scripts-Activate-ps1%EF%BC%8C%E5%9B%A0%E4%B8%BA%E5%9C%A8%E6%AD%A4%E7%B3%BB%E7%BB%9F%E4%B8%8A%E7%A6%81%E6%AD%A2%E8%BF%90%E8%A1%8C%E8%84%9A%E6%9C%AC/</url>
      
        <content type="html"><![CDATA[<p>我在Python的Flask项目里使用了env虚拟环境，然后，把env环境的目录和代码都同步到了另一台电脑上（Windows11/Windows10）。</p><p>当我在VS Code运行的时候，就报了类似下面的错误：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&amp; : 无法加载文件 xx\Scripts\Activate.ps1，因为在此系统上禁止运行脚本。有关详细信息，请参阅 https:&#x2F;go.microsoft.com&#x2F;fwlink&#x2F;?LinkID&#x3D;135170 中的about_Execution_Policies。</span><br><span class="line">所在位置 行:1 字符: 3</span><br><span class="line">+ &amp; xx&#x2F;Scripts&#x2F;Activate.ps1</span><br><span class="line">+   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~</span><br><span class="line">    + CategoryInfo          : SecurityError: (:) []，PSSecurityException</span><br><span class="line">    + FullyQualifiedErrorId : UnauthorizedAccess</span><br></pre></td></tr></table></figure><a id="more"></a><p><strong>原因：</strong></p><p>看上面的提示是 中的 about_Execution_Policies 相关的。</p><p>就是ExecutionPolicy设置的是Restricted（防止运行没有数字签名的脚本），需要设置成RemoteSigned模式。</p><p><strong>解决方法：</strong></p><p>打开Windows的Windows PowerShell（管理员模式），或者命令提示符管理员模式。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 1.查看ExecutionPolicy，返回结果：Restricted</span></span><br><span class="line">get-ExecutionPolicy</span><br><span class="line"></span><br><span class="line"><span class="comment"># 2.设置ExecutionPolicy为RemoteSigned模式</span></span><br><span class="line">set-ExecutionPolicy RemoteSigned</span><br><span class="line"></span><br><span class="line"><span class="comment"># 3.查看ExecutionPolicy，返回结果：RemoteSigned</span></span><br><span class="line">get-ExecutionPolicy</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> VSCode </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
            <tag> VSCode </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>VSCode 远程连接服务器 Could not establish connection</title>
      <link href="/2022/06/26/VSCode%E8%BF%9C%E7%A8%8B%E8%BF%9E%E6%8E%A5%E6%9C%8D%E5%8A%A1%E5%99%A8Could-not-establish-connection/"/>
      <url>/2022/06/26/VSCode%E8%BF%9C%E7%A8%8B%E8%BF%9E%E6%8E%A5%E6%9C%8D%E5%8A%A1%E5%99%A8Could-not-establish-connection/</url>
      
        <content type="html"><![CDATA[<p>用VS Code远程连接服务器（Linux），以前是能正常连接的，然后重装了服务器系统后就连接不上了。</p><p>提示“Could not establish connection to 106.101.101.101”，如下图：<br><img                       lazyload                     src="/images/loading.svg"                     data-src="/img/VS_Code_could_not_establish_connection_1.png"                      style="zoom: 75%;"                ></p><p>打开“More Actions…”中的ssh的配置文件（config），相当信息如下：</p><a id="more"></a><p>假设我的服务器ip地址是：106.101.101.101</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Host 106.101.101.101</span><br><span class="line">  HostName 106.101.101.101</span><br><span class="line">  User ubuntu</span><br><span class="line">  ForwardAgent yes</span><br></pre></td></tr></table></figure><p>配置文件没问题。</p><p><strong>解决方法：</strong></p><p>以上ssh的配置文件（config）是在：<code>C:\Users\username\.ssh\</code> 目录下，在此目录下还有一个 known_hosts 的文件。</p><p><strong>打开 known_hosts 文件，把服务器ip（106.101.101.101）相关这一行删除，保存文件。</strong></p><p>再重新连接，就可以了。</p>]]></content>
      
      
      <categories>
          
          <category> VSCode </category>
          
      </categories>
      
      
        <tags>
            
            <tag> VSCode </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>xshell等终端登录Ubuntu &#39;ls&#39;命令目录没有颜色</title>
      <link href="/2022/06/19/xshell%E7%AD%89%E7%BB%88%E7%AB%AF%E7%99%BB%E5%BD%95Ubuntu-ls-%E5%91%BD%E4%BB%A4%E7%9B%AE%E5%BD%95%E6%B2%A1%E6%9C%89%E9%A2%9C%E8%89%B2/"/>
      <url>/2022/06/19/xshell%E7%AD%89%E7%BB%88%E7%AB%AF%E7%99%BB%E5%BD%95Ubuntu-ls-%E5%91%BD%E4%BB%A4%E7%9B%AE%E5%BD%95%E6%B2%A1%E6%9C%89%E9%A2%9C%E8%89%B2/</url>
      
        <content type="html"><![CDATA[<p>用Xshell、putty、Termius这些终端登录Ubuntu时，用<code>ls</code>命令查看，目录、链接都没有别的颜色，都跟文件一样，是一个颜色。</p><p>解决方法可能有很多种，这里讲个简单的，只针对这个<code>ls</code>命令的。</p><a id="more"></a><p><strong>解决方法：</strong></p><p><code>ls</code>命令虽然没有颜色，但运行<code>ls --color</code>命令是可以看到目录、链接是有颜色的。</p><p>所以给<code>ls --color</code>命令设置个别名就行。</p><h3 id="1、alias命令：设置指令的别名"><a href="#1、alias命令：设置指令的别名" class="headerlink" title="1、alias命令：设置指令的别名"></a>1、alias命令：设置指令的别名</h3><p>语法：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">alias</span> [别名]=[指令]</span><br></pre></td></tr></table></figure><p>所以运行以下命令后，再运行<code>ls</code>命令就可以看到有颜色了。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">alias</span> ls=<span class="string">&#x27;ls --color&#x27;</span></span><br></pre></td></tr></table></figure><p>当然，alias的效力仅及于该次登入的操作。</p><p>所以，如果要每次登入即自动设好别名，可在.profile文件中设定指令的别名。</p><h3 id="2、修改-profile文件"><a href="#2、修改-profile文件" class="headerlink" title="2、修改.profile文件"></a>2、修改.profile文件</h3><p>Ubuntu用户登录时，bash首先自动执行系统管理员建立的全局登录脚本：<code>/ect/profile</code>。<br>然后bash在用户目录下按顺序查找以下文件：<code>~/.bash_profile</code>、 <code>~/.profile</code>，但只执行最先找到的一个。</p><p>所以我们把alias命令添加到这个 .profile 文件中即可。</p><p>.profile 是个隐藏文件，查看的时候用<code>ls -a</code>命令就可以看到了。</p><p><strong>1).没有.profile文件</strong></p><p>原来如果没有这个文件的，复制一个过来。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cp /etc/skel/.profile ~/.profile</span><br></pre></td></tr></table></figure><p><strong>2).修改.profile文件</strong></p><p>用<code>vi ~/.profile</code>打开文件，在最下方添加一行：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">alias ls&#x3D;&#39;ls --color&#39;</span><br></pre></td></tr></table></figure><p>保存文件后，重新打开登录，再用<code>ls</code>命令的时候就可以了。</p><img                       lazyload                     src="/images/loading.svg"                     data-src="/img/Ubuntu_ls_no_color.png"                      style="zoom: 100%;"                >]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
            <tag> Ubuntu </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Edge浏览器无法同步 解决方法</title>
      <link href="/2022/06/19/Edge%E6%B5%8F%E8%A7%88%E5%99%A8%E6%97%A0%E6%B3%95%E5%90%8C%E6%AD%A5/"/>
      <url>/2022/06/19/Edge%E6%B5%8F%E8%A7%88%E5%99%A8%E6%97%A0%E6%B3%95%E5%90%8C%E6%AD%A5/</url>
      
        <content type="html"><![CDATA[<p>办公室电脑上用的Edge浏览器，然后家里电脑上打开Edge浏览器的时候，发现总是没办法自动同步收藏夹、历史记录这些。（用的是同一个微软用户的邮箱账号登录的）</p><p>用别的浏览器，明显是可以都同步的。</p><p>当然，在浏览器【设置】-【同步】设置中，这些同步的选项都是启用的。</p><a id="more"></a><p><strong>解决方法：</strong></p><p><strong>1.在Edge浏览地址栏中输入以下地址，回车。</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">edge:&#x2F;&#x2F;sync-internals&#x2F;</span><br></pre></td></tr></table></figure><p>如下图：<br><img                       lazyload                     src="/images/loading.svg"                     data-src="/img/Edge_sync_1.png"                      style="zoom: 75%;"                ></p><p>Server URL中如果无数值，此时设备不能同步。</p><p>按照网上的说法，可以修改Windows的hosts文件，添加以下内容：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">52.167.253.237 activity.windows.com</span><br><span class="line">52.167.253.237 edge-enterprise.activity.windows.com</span><br><span class="line">52.167.253.237 edge.activity.windows.com</span><br></pre></td></tr></table></figure><p>再打开<code>edge://sync-internals/</code>，如果可看到Server URL中有数值，说明可以正常同步。</p><p>但，我的问题是明明有Server URL，但是就是没同步过来。</p><p><strong>2.关闭同步，重新开启同步。</strong></p><p>像我这样的问题的话，可以直接在两边电脑上都先在上面的页面中关闭同步【Stop Sync（Keep Data）】，或者去【设置】-&gt;【同步】选项中关闭也是一样的。</p><p>然后依次重新开启同步，重新开启同步后，默认没有选上“收藏夹”、“历史记录”这些选项的，手动选上。</p><p>然后终于同步过来了。</p><p>感觉Edge的同步就跟用微软的产品差不多，时不时能遇到抽风的时候。要不是我这可以远程连接，操作另一台电脑，这要是没同步过来，不都歇菜了么。</p><p>目前，能正常同步了。</p><p>最后，特别要注意的是，千万千万不要去点【重置同步】，这一重置，直接就把云数据清空了！</p>]]></content>
      
      
      <categories>
          
          <category> Windows </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Windows </tag>
            
            <tag> Software </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Docker-Compose详解</title>
      <link href="/2022/06/19/Docker-Compose%E8%AF%A6%E8%A7%A3/"/>
      <url>/2022/06/19/Docker-Compose%E8%AF%A6%E8%A7%A3/</url>
      
        <content type="html"><![CDATA[<p>Compose 项目是 Docker 官方的开源项目，实现对 Docker 容器集群的快速编排。</p><p>官方文档：<a class="link"   href="https://docs.docker.com/compose/" >https://docs.docker.com/compose/<i class="fas fa-external-link-alt"></i></a><br>代码开源(Github）：<a class="link"   href="https://github.com/docker/compose" >https://github.com/docker/compose<i class="fas fa-external-link-alt"></i></a></p><p>Compose 定位是 「定义和运行多个 Docker 容器的应用（Defining and running multi-container Docker applications）」，其前身是开源项目 Fig。</p><a id="more"></a><p>当碰到需要多个容器相互配合来完成某项任务的情况。例如要实现一个 Web 项目，除了 Web 服务容器本身，往往还需要再加上后端的数据库服务容器，甚至还包括负载均衡容器等。</p><p>Compose 恰好满足了这样的需求。它允许用户通过一个单独的 docker-compose.yml 模板文件（YAML 格式）来定义一组相关联的应用容器为一个项目（project）。</p><h2 id="一、Compose安装"><a href="#一、Compose安装" class="headerlink" title="一、Compose安装"></a>一、Compose安装</h2><p>Compose 支持 Linux、macOS、Windows三大平台。<br>Docker Desktop for Mac/Windows 自带 docker-compose 二进制文件，安装 Docker 之后可以直接使用。</p><p>通过以下命令查看Compose版本：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker-compose --version</span><br></pre></td></tr></table></figure><p>如果没有安装的话，按以下方法安装一下（Linux系统）。</p><h3 id="1-pip安装"><a href="#1-pip安装" class="headerlink" title="1.pip安装"></a>1.pip安装</h3><p>Compose 项目由 Python 编写的，所以跟Python第三方的库一样用pip安装就行。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo pip install -U docker-compose</span><br></pre></td></tr></table></figure><p>安装成功后可以查看一下版本。</p><h3 id="2-卸载"><a href="#2-卸载" class="headerlink" title="2.卸载"></a>2.卸载</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo pip uninstall docker-compose</span><br></pre></td></tr></table></figure><h2 id="二、docker-compose-yml配置文件详解"><a href="#二、docker-compose-yml配置文件详解" class="headerlink" title="二、docker-compose.yml配置文件详解"></a>二、docker-compose.yml配置文件详解</h2><p>编写之前，注意下Compose和Docker兼容性：</p><ul><li>Compose 文件格式有3个版本,分别为1, 2.x 和 3.x</li><li>目前主流的为 3.x 其支持 docker 1.13.0 及其以上的版本</li></ul><p>docker-compose.yml配置文件中的指令关键字虽然挺多，但大部分基本上docker run的参数都有对应的，比较好理解的。</p><p>docker-compose配置文件中有几个最常见的一级参数（就是顶格写的）：</p><ul><li>version</li><li>services</li><li>volumes</li><li>networks</li></ul><h3 id="1-docker-compose-yml-举例一（EwoMail邮件服务器）"><a href="#1-docker-compose-yml-举例一（EwoMail邮件服务器）" class="headerlink" title="1.docker-compose.yml 举例一（EwoMail邮件服务器）"></a>1.docker-compose.yml 举例一（EwoMail邮件服务器）</h3><p><strong>EwoMail邮件服务器的docker-compose.yml配置文件</strong>如下：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">mail:</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">bestwu/ewomail</span></span><br><span class="line">    <span class="attr">hostname:</span> <span class="string">mail.abcd.com</span></span><br><span class="line">    <span class="attr">container_name:</span> <span class="string">ewomail</span></span><br><span class="line">    <span class="attr">restart:</span> <span class="string">always</span></span><br><span class="line">    <span class="attr">ports:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">&quot;25:25&quot;</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">&quot;143:143&quot;</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">&quot;587:587&quot;</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">&quot;993:993&quot;</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">&quot;109:109&quot;</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">&quot;110:110&quot;</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">&quot;465:465&quot;</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">&quot;995:995&quot;</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">&quot;80:80&quot;</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">&quot;8080:8080&quot;</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">&quot;3307:3306&quot;</span></span><br><span class="line">    <span class="attr">volumes:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">`pwd`/ewomail/mysql:/ewomail/mysql/data</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">`pwd`/ewomail/vmail:/ewomail/mail</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">`pwd`/ewomail/rainloop:/ewomail/www/rainloop/data</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">`pwd`/ewomail/ssl/certs/:/etc/ssl/certs/</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">`pwd`/ewomail/ssl/private/:/etc/ssl/private/</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">`pwd`/ewomail/ssl/dkim/:/ewomail/dkim/</span></span><br><span class="line">    <span class="attr">environment:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">&quot;MYSQL_ROOT_PASSWORD=123MYSQL456&quot;</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">&quot;MYSQL_MAIL_PASSWORD=111111MYSQL&quot;</span></span><br></pre></td></tr></table></figure><h4 id="1-image-bestwu-ewomail"><a href="#1-image-bestwu-ewomail" class="headerlink" title="1).image: bestwu/ewomail"></a>1).image: bestwu/ewomail</h4><p>指定docker镜像：bestwu/ewomail</p><p>指定镜像名称或镜像 ID。如果镜像本地不存在，Compose 将会拉取这个镜像。</p><p>注意每个服务都必须通过 image 指令指定镜像或 build 指令（需要 Dockerfile）等来自动构建生成镜像。</p><p>如果使用 build 指令，在 Dockerfile 中设置的选项(例如：CMD, EXPOSE, VOLUME, ENV 等) 将会自动被获取，无需在 docker-compose.yml 中重复设置。</p><h4 id="2-container-name-ewomail"><a href="#2-container-name-ewomail" class="headerlink" title="2).container_name: ewomail"></a>2).container_name: ewomail</h4><p>指定容器名称：ewomail。默认将会使用 <code>项目名称_服务名称_序号</code> 这样的格式。</p><h4 id="3-hostname-mail-abcd-com"><a href="#3-hostname-mail-abcd-com" class="headerlink" title="3).hostname: mail.abcd.com"></a>3).hostname: mail.abcd.com</h4><p>这个 docker run中的对应参数一样的。</p><p>指定容器主机名：mail.abcd.com</p><p>除这个外，还有：<br>指定容器中搜索域名 domainname: abcd.com<br>指定容器mac地址 mac_address: 08-00-27-00-0C-0A</p><h4 id="4-restart-always"><a href="#4-restart-always" class="headerlink" title="4).restart: always"></a>4).restart: always</h4><p>这个 docker run中的对应参数一样的。</p><p>指定容器退出后的重启策略为始终重启。该命令对保持服务始终运行十分有效，在生产环境中推荐配置为 always 或者 unless-stopped。</p><h4 id="5-ports"><a href="#5-ports" class="headerlink" title="5).ports"></a>5).ports</h4><p>映射端口。</p><p><strong>格式</strong>：<br>宿主端口:容器中端口 (HOST:CONTAINER) </p><p>或者仅仅指定容器的端口（宿主将会随机选择端口）都可以。</p><p>比如以下就是把容器中的3306端口映射到主机的3307端口上。</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">ports:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">&quot;3307:3306&quot;</span></span><br></pre></td></tr></table></figure><p>注意用上引号，以防止小的端口号报错。</p><h4 id="6-volumes"><a href="#6-volumes" class="headerlink" title="6).volumes"></a>6).volumes</h4><p>数据卷所挂载路径设置。</p><p><strong>格式 两种</strong>：</p><ul><li>宿主机路径:容器中路径(HOST:CONTAINER)</li><li>数据卷名称:容器中路径(VOLUME:CONTAINER)，必须在文件中配置数据卷。</li></ul><p>并且可以设置访问模式只读ReadOnly（HOST:CONTAINER:ro）。</p><p>数据卷的更多介绍看这篇文章：<a href="/2022/06/19/Docker%E6%95%B0%E6%8D%AE%E5%8D%B7/" title="Docker 数据卷（volumes）介绍">Docker 数据卷（volumes）介绍</a></p><p>举例：数据卷mysql_data所挂载的是容器中的/var/lib/mysql目录。</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">version:</span> <span class="string">&quot;3&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="attr">services:</span></span><br><span class="line">  <span class="attr">my_src:</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">mysql:8.0</span></span><br><span class="line">    <span class="attr">volumes:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">mysql_data:/var/lib/mysql</span></span><br><span class="line"></span><br><span class="line"><span class="attr">volumes:</span></span><br><span class="line">  <span class="attr">mysql_data:</span></span><br></pre></td></tr></table></figure><h4 id="7-environment"><a href="#7-environment" class="headerlink" title="7).environment"></a>7).environment</h4><p>设置环境变量。你可以使用数组或字典两种格式。</p><p>只给定名称的变量会自动获取运行 Compose 主机上对应变量的值，可以用来防止泄露不必要的数据。</p><p>用上面和下面的这种都可以。</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">version:</span> <span class="string">&quot;3&quot;</span></span><br><span class="line"><span class="attr">services:</span></span><br><span class="line">  <span class="attr">my_src:</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">mysql:8.0</span></span><br><span class="line">    <span class="attr">volumes:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">mysql_data:/var/lib/mysql</span></span><br><span class="line">    <span class="attr">environment:</span></span><br><span class="line">      <span class="attr">MYSQL_ROOT_PASSWORD:</span> <span class="string">123MYSQL456</span></span><br><span class="line">      <span class="attr">MYSQL_DATABASE:</span> <span class="string">my_db</span></span><br><span class="line"></span><br><span class="line"><span class="attr">volumes:</span></span><br><span class="line">  <span class="attr">mysql_data:</span></span><br></pre></td></tr></table></figure><h4 id="8-expose"><a href="#8-expose" class="headerlink" title="8).expose"></a>8).expose</h4><p>暴露端口，但不映射到宿主机，只被连接的服务访问。</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">expose:</span></span><br><span class="line"> <span class="bullet">-</span> <span class="string">&quot;3000&quot;</span></span><br><span class="line"> <span class="bullet">-</span> <span class="string">&quot;8000&quot;</span></span><br></pre></td></tr></table></figure><h4 id="9-depends-on"><a href="#9-depends-on" class="headerlink" title="9).depends_on"></a>9).depends_on</h4><p>解决容器的依赖、启动先后的问题。以下例子中会先启动 redis db 再启动 web：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">version:</span> <span class="string">&quot;3&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="attr">services:</span></span><br><span class="line">  <span class="attr">web:</span></span><br><span class="line">    <span class="attr">build:</span> <span class="string">.</span></span><br><span class="line">    <span class="attr">depends_on:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">db</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">redis</span></span><br><span class="line"></span><br><span class="line">  <span class="attr">redis:</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">redis</span></span><br><span class="line"></span><br><span class="line">  <span class="attr">db:</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">postgres</span></span><br></pre></td></tr></table></figure><h4 id="10-network-mode"><a href="#10-network-mode" class="headerlink" title="10).network_mode"></a>10).network_mode</h4><p>设置网络模式。使用和 docker run 的 <code>-network</code> 参数一样的值。</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">network_mode:</span> <span class="string">&quot;bridge&quot;</span></span><br><span class="line"><span class="attr">network_mode:</span> <span class="string">&quot;host&quot;</span></span><br><span class="line"><span class="attr">network_mode:</span> <span class="string">&quot;none&quot;</span></span><br><span class="line"><span class="attr">network_mode:</span> <span class="string">&quot;service:[service name]&quot;</span></span><br><span class="line"><span class="attr">network_mode:</span> <span class="string">&quot;container:[container name/id]&quot;</span></span><br></pre></td></tr></table></figure><h4 id="11-networks"><a href="#11-networks" class="headerlink" title="11).networks"></a>11).networks</h4><p>配置容器连接的网络。</p><p>networks是一级参数，与version和services是同级对齐。</p><p>在这篇文章中compose配置文件模板中有实际用到：<a href="/2022/05/29/Docker%E7%89%88Selenium%E4%BD%BF%E7%94%A8%E6%96%B9%E6%B3%95/" title="Docker版Selenium使用方法">Docker版Selenium使用方法</a></p><p>docker-compose配置文件更多介绍 参考文章：</p><ul><li><a class="link"   href="http://docker.baoshu.red/compose/compose_file.html" >Compose模板文件<i class="fas fa-external-link-alt"></i></a></li><li><a class="link"   href="https://yeasy.gitbook.io/docker_practice/compose/compose_file" >Docker从入门到实践-Compose模板文件<i class="fas fa-external-link-alt"></i></a></li></ul><h3 id="2-docker-compose-yml-举例二（部署Flask应用）"><a href="#2-docker-compose-yml-举例二（部署Flask应用）" class="headerlink" title="2.docker-compose.yml 举例二（部署Flask应用）"></a>2.docker-compose.yml 举例二（部署Flask应用）</h3><p>数据库用的mysql，image是自己用Dockfile制作的competition_sys:v1.0。</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">version:</span> <span class="string">&quot;3&quot;</span></span><br><span class="line"><span class="attr">services:</span></span><br><span class="line">  <span class="attr">app:</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">competition_sys:v1.0</span></span><br><span class="line">    <span class="attr">container_name:</span> <span class="string">my_competition</span></span><br><span class="line">    <span class="attr">restart:</span> <span class="string">always</span></span><br><span class="line">    <span class="attr">ports:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">&quot;5002:5002&quot;</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">&quot;5023:22&quot;</span></span><br><span class="line">    <span class="attr">volumes:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">./docker_app:/app</span></span><br><span class="line">    <span class="attr">environment:</span></span><br><span class="line">      <span class="attr">MYSQL_HOST:</span> <span class="string">db</span></span><br><span class="line">      <span class="attr">MYSQL_USER:</span> <span class="string">root</span></span><br><span class="line">      <span class="attr">MYSQL_ROOT_PASSWORD:</span> <span class="string">1234MYSQL</span></span><br><span class="line">      <span class="attr">MYSQL_DATABASE:</span> <span class="string">competition_sys</span></span><br><span class="line">  <span class="attr">db:</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">mysql:8.0</span></span><br><span class="line">    <span class="attr">restart:</span> <span class="string">always</span></span><br><span class="line">    <span class="attr">ports:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">&quot;3308:3306&quot;</span></span><br><span class="line">    <span class="attr">environment:</span></span><br><span class="line">      <span class="attr">MYSQL_ROOT_PASSWORD:</span> <span class="string">1234MYSQL</span></span><br><span class="line">      <span class="attr">MYSQL_DATABASE:</span> <span class="string">competition_sys</span></span><br><span class="line">    <span class="attr">volumes:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">./db_data:/docker-entrypoint-initdb.d/:ro</span></span><br></pre></td></tr></table></figure><h2 id="三、docker-compose常用命令"><a href="#三、docker-compose常用命令" class="headerlink" title="三、docker-compose常用命令"></a>三、docker-compose常用命令</h2><p>docker-compose 命令的基本的使用格式是：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker-compose [-f=&lt;arg&gt;...] [options] [COMMAND] [ARGS...]</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">-f,--file FILE指定使用的Compose模板文件，默认为docker-compose.yml，可以多次指定。</span><br><span class="line">-p,--project-name NAME指定项目名称，默认将使用所在目录名称作为项目名。</span><br><span class="line">--verbose 输出更多调试信息。</span><br><span class="line">-v,--version 打印版本并退出。</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 1.部署一个Compose应用</span></span><br><span class="line">docker-compose up</span><br><span class="line"><span class="comment"># 默认情况下该命令会读取名为 docker-compose.yml，也可以使用-f指定其他文件名。</span></span><br><span class="line"><span class="comment"># 通常情况下，会使用-d参数令应用在后台启动。</span></span><br><span class="line">docker-compose up -d</span><br><span class="line">docker-compose -f docker-compose-v3.yml up -d</span><br><span class="line"></span><br><span class="line"><span class="comment"># 2.列出Compose应用中的各个容器</span></span><br><span class="line">docker-compose ps</span><br><span class="line">docker ps -a <span class="comment"># 显示包括停止的容器</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 3.停止Compose应用相关的所有容器，但不会删除它们</span></span><br><span class="line">docker-compose stop</span><br><span class="line"></span><br><span class="line"><span class="comment"># 4.重启已停止的Compose应用</span></span><br><span class="line">docker-compose restart</span><br><span class="line"></span><br><span class="line"><span class="comment"># 5.停止并删除运行中的Compose应用，会删除容器和网络，但是不会删除卷和镜像。</span></span><br><span class="line">docker-compose down</span><br><span class="line"></span><br><span class="line"><span class="comment"># 6.查看帮助</span></span><br><span class="line">docker-compose <span class="built_in">help</span></span><br></pre></td></tr></table></figure><p>官方文档：<a class="link"   href="https://docs.docker.com/compose/reference/up/" >https://docs.docker.com/compose/reference/up/<i class="fas fa-external-link-alt"></i></a></p>]]></content>
      
      
      <categories>
          
          <category> Docker </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Docker </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Docker 数据卷（volumes）介绍</title>
      <link href="/2022/06/19/Docker%E6%95%B0%E6%8D%AE%E5%8D%B7/"/>
      <url>/2022/06/19/Docker%E6%95%B0%E6%8D%AE%E5%8D%B7/</url>
      
        <content type="html"><![CDATA[<p>Docker 提供了三种不同的方式将数据从 Docker Host 挂载到 Docker 容器，并实现数据的读取和存储：volumes、bind mounts、tmpfs 。</p><ul><li>Volumes 存储在 Docker Host 文件系统的一个路径下，这个路径是由 Docker 来进行管理，路径默认是 /var/lib/docker/volumes/，非 Docker 的进程不能去修改这个路径下面的文件，所以说Volumes 是持久存储数据最好的一种方式。</li><li>Bind mounts 可以存储在 Docker Host 文件系统的任何位置，它们甚至可能是重要的系统文件或目录，非 Docker 的进程或者 Docker 容器可能随时对其进行修改，存在潜在的安全风险。</li><li>Tmpfs 只存储在 Docker Host 的系统内存中，不会写入到系统的文件系统中，不会持久存储。</li></ul><a id="more"></a><p>数据卷（volumes）是一个可供一个或多个容器使用的特殊目录，它绕过 UFS，可以提供很多有用的特性：</p><ul><li>数据卷 可以在容器之间共享和重用；</li><li>对 数据卷 的修改会立马生效；</li><li>对 数据卷 的更新，不会影响镜像；</li><li>数据卷 默认会一直存在，即使容器被删除。</li></ul><p>注意：数据卷 的使用，类似于 Linux 下对目录或文件进行 mount，镜像中的被指定为挂载点的目录中的文件会复制到数据卷中（仅数据卷为空时会复制）。</p><h2 id="数据卷"><a href="#数据卷" class="headerlink" title="数据卷"></a>数据卷</h2><h3 id="1-创建一个数据卷"><a href="#1-创建一个数据卷" class="headerlink" title="1.创建一个数据卷"></a>1.创建一个数据卷</h3><p>创建一个数据卷：my-vol</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker volume create my-vol</span><br></pre></td></tr></table></figure><p>查看所有的数据卷：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker volume ls</span><br></pre></td></tr></table></figure><p>查看指定 数据卷（my-vol） 的信息：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker volume inspect my-vol</span><br></pre></td></tr></table></figure><h3 id="2-删除数据卷"><a href="#2-删除数据卷" class="headerlink" title="2.删除数据卷"></a>2.删除数据卷</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker volume rm my-vol</span><br></pre></td></tr></table></figure><p>数据卷 是被设计用来持久化数据的，它的生命周期独立于容器，Docker 不会在容器被删除后自动删除 数据卷，并且也不存在垃圾回收这样的机制来处理没有任何容器引用的 数据卷。</p><p>如果需要在删除容器的同时移除数据卷。可以在删除容器的时候使用 <code>docker rm -v</code> 这个命令。</p><p>无主的数据卷可能会占据很多空间，要清理使用以下命令：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker volume prune</span><br></pre></td></tr></table></figure><h2 id="挂载数据卷"><a href="#挂载数据卷" class="headerlink" title="挂载数据卷"></a>挂载数据卷</h2><p>启动容器的时候，可以先创建好数据卷，也可以直接设置（会创建新的数据卷）。</p><p><strong>用法</strong>：</p><ul><li><code>-v</code>或<code>--volume</code>，<code>数据卷名称:容器中路径</code></li><li><code>--mount</code>，由多个键值对组成，以逗号分隔，每个键=组由一个元组组成。<code>--mount</code>语法比<code>-v</code>或<code>--volume</code>更详细</li></ul><h3 id="1-docker-run使用数据卷"><a href="#1-docker-run使用数据卷" class="headerlink" title="1.docker run使用数据卷"></a>1.docker run使用数据卷</h3><p>在用 docker run 命令的时候，一般使用<code>-v</code>或 <code>--mount</code> 标记来将 数据卷 挂载到容器里。在一次 docker run 中可以挂载多个 数据卷。</p><p>例如：创建一个名为 myweb 的容器，并加载一个 数据卷 到容器的 <code>/usr/share/nginx/html</code> 目录。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">$ docker run -d -P \</span><br><span class="line">    --name myweb \</span><br><span class="line">    <span class="comment"># -v my-vol:/usr/share/nginx/html \</span></span><br><span class="line">    --mount <span class="built_in">source</span>=my-vol,target=/usr/share/nginx/html \</span><br><span class="line">    nginx:alpine</span><br></pre></td></tr></table></figure><p><strong>查看容器中数据卷信息：</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker inspect myweb</span><br></pre></td></tr></table></figure><p>以上命令可以查看 myweb 容器的信息，数据卷 信息在 “Mounts”下面。</p><h3 id="2-docker-compose使用数据卷"><a href="#2-docker-compose使用数据卷" class="headerlink" title="2.docker-compose使用数据卷"></a>2.docker-compose使用数据卷</h3><p>例如：数据卷mysql_data所挂载的是容器中的/var/lib/mysql目录。</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">version:</span> <span class="string">&quot;3&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="attr">services:</span></span><br><span class="line">  <span class="attr">my_src:</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">mysql:8.0</span></span><br><span class="line">    <span class="attr">volumes:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">mysql_data:/var/lib/mysql</span></span><br><span class="line"></span><br><span class="line"><span class="attr">volumes:</span></span><br><span class="line">  <span class="attr">mysql_data:</span></span><br></pre></td></tr></table></figure><p>数据卷相关介绍 参考文章：</p><ul><li><a class="link"   href="https://yeasy.gitbook.io/docker_practice/data_management/volume" >Docker从入门到实践-数据卷<i class="fas fa-external-link-alt"></i></a></li><li><a class="link"   href="http://docker.baoshu.red/data_management/volume.html" >数据卷详细介绍<i class="fas fa-external-link-alt"></i></a></li></ul>]]></content>
      
      
      <categories>
          
          <category> Docker </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Docker </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Docker搭建frp内网穿透服务器</title>
      <link href="/2022/06/18/Docker%E6%90%AD%E5%BB%BAfrp%E5%86%85%E7%BD%91%E7%A9%BF%E9%80%8F%E6%9C%8D%E5%8A%A1%E5%99%A8/"/>
      <url>/2022/06/18/Docker%E6%90%AD%E5%BB%BAfrp%E5%86%85%E7%BD%91%E7%A9%BF%E9%80%8F%E6%9C%8D%E5%8A%A1%E5%99%A8/</url>
      
        <content type="html"><![CDATA[<p>frp 是一个专注于内网穿透的高性能的反向代理应用，支持 TCP、UDP、HTTP、HTTPS 等多种协议。可以将内网服务以安全、便捷的方式通过具有公网 IP 节点的中转暴露到公网。</p><p>说直白点，我主要是想用来：</p><ul><li>访问内网（现在能访问，但直接访问其它的内网地址还有点问题）；</li><li>安装frpc的电脑开web服务的内网没问题，可以访问；</li><li>访问不了其它的内网，就先用用远程桌面连接吧。（当然，这个也有第三方的工具，但TeamView免费不好用，Todesk免费还行、就是分辨率、稳定性这些还是差一些）</li></ul><p>反正服务器本来就有，就顺便试一下。</p><p>frp中文文档：<a class="link"   href="https://github.com/fatedier/frp/blob/dev/README_zh.md" >https://github.com/fatedier/frp/blob/dev/README_zh.md<i class="fas fa-external-link-alt"></i></a><br>完整文档：<a class="link"   href="https://gofrp.org/" >https://gofrp.org<i class="fas fa-external-link-alt"></i></a></p><p>release版本下载：<a class="link"   href="https://github.com/fatedier/frp/releases" >https://github.com/fatedier/frp/releases<i class="fas fa-external-link-alt"></i></a></p><a id="more"></a><p><strong>准备工作：</strong></p><p>一共3台机子：</p><ul><li>Ubuntu服务器（带Docker，有公网ip）：用来安装frp server端</li><li>办公室Windows10（已安装docker）：安装frp client端</li><li>本机Windows10：远程连接办公室电脑</li></ul><p><strong>frp实现了啥：</strong></p><p>比如我办公室Windows10中运行了一个web服务，局域网可以访问，通过以下地址访问：192.168.1.110:5000</p><p>但外网是无法访问的。</p><p>然后我的Ubuntu服务器（公网ip：43.142.94.65），分别安装了frps、frpc端。</p><p>然后通过frp，外面就可以用：43.142.94.65:18188 来访问 192.168.1.110:5000 了。（这里5000端口映射到服务器的18188端口了）</p><h2 id="一、搭建frp-server-服务器端"><a href="#一、搭建frp-server-服务器端" class="headerlink" title="一、搭建frp server(服务器端)"></a>一、搭建frp server(服务器端)</h2><p>云服务器：带Docker的Ubuntu20.04</p><h3 id="1-创建配置文件（frps-ini）"><a href="#1-创建配置文件（frps-ini）" class="headerlink" title="1.创建配置文件（frps.ini）"></a>1.创建配置文件（frps.ini）</h3><p>先建个frp的目录，随便放哪里，比如我就放在用户目录(<code>/home/ubuntu</code>)下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mkdir frp</span><br></pre></td></tr></table></figure><p>可以直接在服务器(Linux)系统中用<code>vi frps.ini</code>创建配置文件、编辑、保存。</p><p>也可以在本地直接创建好了，用FTP工具上传到 <code>/home/ubuntu/frp</code>目录下。</p><p>frps.ini 文件内容如下：</p><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="section">[common]</span></span><br><span class="line"><span class="comment"># 监听端口</span></span><br><span class="line"><span class="attr">bind_port</span> = <span class="number">7000</span></span><br><span class="line"><span class="comment"># 面板端口</span></span><br><span class="line"><span class="attr">dashboard_port</span> = <span class="number">7500</span></span><br><span class="line"><span class="comment"># 登录面板账号设置</span></span><br><span class="line"><span class="attr">dashboard_user</span> = admin</span><br><span class="line"><span class="attr">dashboard_pwd</span> = Administrator1234</span><br><span class="line"><span class="comment"># 设置http及https协议下代理端口（非重要）</span></span><br><span class="line"><span class="attr">vhost_http_port</span> = <span class="number">7080</span></span><br><span class="line"><span class="attr">vhost_https_port</span> = <span class="number">7081</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 身份验证</span></span><br><span class="line"><span class="attr">token</span> = <span class="number">9</span>LgPn24TaC2NYZXY</span><br></pre></td></tr></table></figure><p>token尽量复杂一些，用Python的话，可以用secrets库生成一下随机密码。</p><p>用的是腾讯云轻量服务器，所以要在【防火墙】中先把这些服务器上要用到的端口开一下，即：<br>7000、7500、7080、7081 四个端口。</p><h3 id="2-创建frps容器"><a href="#2-创建frps容器" class="headerlink" title="2.创建frps容器"></a>2.创建frps容器</h3><p><strong>1).下载frp服务器镜像 snowdreamtech/frps</strong></p><p>docker官方镜像网址：<a class="link"   href="https://hub.docker.com/r/snowdreamtech/frps" >https://hub.docker.com/r/snowdreamtech/frps<i class="fas fa-external-link-alt"></i></a></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker pull snowdreamtech/frps</span><br></pre></td></tr></table></figure><p>碰到没有权限的时候，命令前面加上<code>sudo</code>就行。</p><p><strong>2).启动容器</strong></p><p>我这里配置文件在：<code>/home/ubuntu/frp/frps.ini</code></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run --restart=always --network host -d -v /home/ubuntu/frp/frps.ini:/etc/frp/frps.ini --name frps snowdreamtech/frps</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">--network host：网络模式host</span><br><span class="line">-v &#x2F;home&#x2F;ubuntu&#x2F;frp&#x2F;frps.ini:&#x2F;etc&#x2F;frp&#x2F;frps.ini：配置文件映射</span><br><span class="line">--name frps：容器名称，可以随便取</span><br></pre></td></tr></table></figure><p>启动后，通过<code>docker ps -a</code>命令查看容器列表。</p><p>创建好后，打开网址：<strong>服务器ip:7500</strong> 就可以看到frp面板了。（我这是：43.142.94.65:7500）</p><p>如果出现无法访问的情况，可以在以下网站上查询一下，看服务器端口是否开放：<br><a class="link"   href="https://tool.chinaz.com/port" >https://tool.chinaz.com/port<i class="fas fa-external-link-alt"></i></a></p><h2 id="二、搭建frp-client-客户端"><a href="#二、搭建frp-client-客户端" class="headerlink" title="二、搭建frp client(客户端)"></a>二、搭建frp client(客户端)</h2><p>办公室Windows10（已安装docker）<br>安装docker方法：<a class="link"   href="https://yeasy.gitbook.io/docker_practice/install/windows" >https://yeasy.gitbook.io/docker_practice/install/windows<i class="fas fa-external-link-alt"></i></a></p><h3 id="1-创建配置文件（frpc-ini）"><a href="#1-创建配置文件（frpc-ini）" class="headerlink" title="1.创建配置文件（frpc.ini）"></a>1.创建配置文件（frpc.ini）</h3><p>先建个frp的目录，随便放哪里，比如我就放在(<code>E:\frp</code>)下.</p><p>frpc.ini 文件内容如下：</p><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="section">[common]</span></span><br><span class="line"><span class="comment"># server_addr为FRPS服务器IP地址</span></span><br><span class="line"><span class="attr">server_addr</span> = <span class="number">43.142</span>.<span class="number">94.65</span></span><br><span class="line"><span class="comment"># server_port为服务端监听端口，bind_port，与frps.ini中保存一致</span></span><br><span class="line"><span class="attr">server_port</span> = <span class="number">7000</span></span><br><span class="line"><span class="comment"># 身份验证，与frps.ini中保存一致</span></span><br><span class="line"><span class="attr">token</span> = <span class="number">9</span>LgPn24TaC2NYZXY</span><br><span class="line"></span><br><span class="line"><span class="section">[ssh]</span></span><br><span class="line"><span class="attr">type</span> = tcp</span><br><span class="line"><span class="attr">local_ip</span> = <span class="number">127.0</span>.<span class="number">0.1</span></span><br><span class="line"><span class="attr">local_port</span> = <span class="number">22</span></span><br><span class="line"><span class="attr">remote_port</span> = <span class="number">2288</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># [ssh] 为服务名称，下方此处设置为，访问frp服务段的2288端口时，等同于通过中转服务器访问127.0.0.1的22端口。</span></span><br><span class="line"><span class="comment"># type 为连接的类型，此处为tcp</span></span><br><span class="line"><span class="comment"># local_ip 为中转客户端实际访问的IP </span></span><br><span class="line"><span class="comment"># local_port 为目标端口</span></span><br><span class="line"><span class="comment"># remote_port 为远程端口</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 远程桌面RDP，连接需要3389端口</span></span><br><span class="line"><span class="section">[RDP]</span></span><br><span class="line"><span class="attr">type</span> = tcp</span><br><span class="line"><span class="attr">local_ip</span> = <span class="number">127.0</span>.<span class="number">0.1</span></span><br><span class="line"><span class="attr">local_port</span> = <span class="number">3389</span></span><br><span class="line"><span class="attr">remote_port</span> = <span class="number">18189</span></span><br><span class="line"></span><br><span class="line"><span class="section">[web_host]</span></span><br><span class="line"><span class="attr">type</span> = tcp</span><br><span class="line"><span class="attr">local_ip</span> = <span class="number">127.0</span>.<span class="number">0.1</span></span><br><span class="line"><span class="attr">local_port</span> = <span class="number">5002</span></span><br><span class="line"><span class="attr">remote_port</span> = <span class="number">18289</span></span><br></pre></td></tr></table></figure><p>这里可以建多个，比如我这就开了3个：ssh、RDP、web_host。</p><p>最后对应的访问地址为：FRPS服务器IP地址:remote_port</p><blockquote><p>远程桌面连接地址：43.142.94.65:18189<br>web访问地址：43.142.94.65:18289 对应本机的 127.0.0.1:5002</p></blockquote><p>用的是腾讯云轻量服务器，所以要在【防火墙】中把这些服务器上要用到的端口开一下，即：<br>2288、18189、18289 三个端口。</p><h3 id="2-创建frpc容器"><a href="#2-创建frpc容器" class="headerlink" title="2.创建frpc容器"></a>2.创建frpc容器</h3><p>可以在docker软件中操作，反正跟服务器端差不多的命令，我这就直接用命令了。</p><p><strong>1).下载frp客户端镜像 snowdreamtech/frpc</strong></p><p>docker官方镜像网址：<a class="link"   href="https://hub.docker.com/r/snowdreamtech/frpc" >https://hub.docker.com/r/snowdreamtech/frpc<i class="fas fa-external-link-alt"></i></a></p><p>打开Windows Powershell/命令提示符 用命令下载镜像：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker pull snowdreamtech/frpc</span><br></pre></td></tr></table></figure><p><strong>2).启动容器</strong></p><p>我这里配置文件在：<code>E:/frp/frpc.ini</code></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run --restart=always --network host -d -v E:/frp/frpc.ini:/etc/frp/frpc.ini --name frpc snowdreamtech/frpc</span><br></pre></td></tr></table></figure><p>启动后，通过<code>docker ps -a</code>命令查看容器列表。</p><p>再刷新刚才打开的网址：<strong>服务器ip:7500</strong> 就可以看到frp面板了。（我这是：43.142.94.65:7500）如下图所示：<br><img                       lazyload                     src="/images/loading.svg"                     data-src="/img/Docker_frp_1.png"                      style="zoom: 100%;"                ></p><h2 id="三、远程桌面连接"><a href="#三、远程桌面连接" class="headerlink" title="三、远程桌面连接"></a>三、远程桌面连接</h2><p>当然，首先，要在办公室Windows10（已安装docker）这台机子上开启远程桌面：<br><img                       lazyload                     src="/images/loading.svg"                     data-src="/img/Docker_frp_4.png"                      style="zoom: 75%;"                ></p><p>远程桌面连接地址：43.142.94.65:18189</p><p>在Windows系统中打开【远程桌面连接】，输入连接地址和远程连接的计算机的用户名：<br><img                       lazyload                     src="/images/loading.svg"                     data-src="/img/Docker_frp_2.png"                      style="zoom: 100%;"                ></p><p>注意，Windows10在【体验】选项中，可以选择【LAN（10 Mbps或更高）】，也可以选择【自动检测连接质量】。默认是【低速宽带】，连接上之后，字体变样，感觉很丑、看起来不舒服。</p><p>而Windows11的话，默认是【自动检测连接质量】，就没事问题，连接上后自动检测的效果挺好的。<br><img                       lazyload                     src="/images/loading.svg"                     data-src="/img/Docker_frp_3.png"                      style="zoom: 100%;"                ></p><p>就成功连接啦！<br><img                       lazyload                     src="/images/loading.svg"                     data-src="/img/Docker_frp_5.png"                      style="zoom: 75%;"                ></p><p>更多关于frp的介绍、配置文件说明，都在官方的文档中有：<a class="link"   href="https://gofrp.org/" >https://gofrp.org<i class="fas fa-external-link-alt"></i></a></p><p>参考文章：<a class="link"   href="https://gitee.com/spoto/natserver/tree/master" >自建内网穿透服务器<i class="fas fa-external-link-alt"></i></a></p><h2 id="frp客户端-login-to-server-failed：EOF解决方法"><a href="#frp客户端-login-to-server-failed：EOF解决方法" class="headerlink" title="frp客户端 login to server failed：EOF解决方法"></a>frp客户端 login to server failed：EOF解决方法</h2><a href="/2024/03/30/frp%E5%AE%A2%E6%88%B7%E7%AB%AF%E5%AE%B9%E5%99%A8%E5%90%AF%E5%8A%A8%E5%A4%B1%E8%B4%A5/" title="frp客户端容器启动失败">frp客户端容器启动失败</a>]]></content>
      
      
      <categories>
          
          <category> Docker </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
            <tag> Docker </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Linux使用v2ray</title>
      <link href="/2022/06/14/Linux%E4%BD%BF%E7%94%A8v2ray/"/>
      <url>/2022/06/14/Linux%E4%BD%BF%E7%94%A8v2ray/</url>
      
        <content type="html"><![CDATA[<p>因为在CentOS的服务器上装东西的，用到了github，直接访问不了。本地windows系统用的v2rayN的客户端，想到v2ray在Linux上也可以用，就装上试一下。</p><p>v2ray本身是不区分服务端和客户端的，只要配置好相关文件，反正都可正常使用。（就是配置文件的区别）</p><a id="more"></a><h3 id="1-下载-v2ray-linux-64-zip"><a href="#1-下载-v2ray-linux-64-zip" class="headerlink" title="1.下载 v2ray-linux-64.zip"></a>1.下载 v2ray-linux-64.zip</h3><p>v2ray的Github地址：<br><a class="link"   href="https://github.com/v2ray/v2ray-core/releases/" >https://github.com/v2ray/v2ray-core/releases/<i class="fas fa-external-link-alt"></i></a></p><p>目前最新的版本是v4.31.0，下面有Download页面：<br><a class="link"   href="https://github.com/v2fly/v2ray-core/releases/tag/v4.31.0" >https://github.com/v2fly/v2ray-core/releases/tag/v4.31.0<i class="fas fa-external-link-alt"></i></a></p><p>在页面中找到 v2ray-linux-64.zip 文件下载（我的是64位的CentOS系统）。</p><p>下载后解压出来是一个 v2ray-linux-64 目录，用ftp工具上传到linux的服务器上。</p><p>当然，也可以直接把解压包上传后，再用unzip命令解压。</p><h3 id="2-把文件复制到对应的目录中"><a href="#2-把文件复制到对应的目录中" class="headerlink" title="2.把文件复制到对应的目录中"></a>2.把文件复制到对应的目录中</h3><p>用复制(cp命令)或移动(mv命令)都可以。这里用cp举例。</p><p>首先，进入 v2ray-linux-64 目录，可以用 <code>ls -l</code>查看目录下的文件。<br>目录中的几个文件需要修改下权限，需要添加下可执行的权限。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> v2ray-linux-64</span><br><span class="line"></span><br><span class="line">chmod 755 v2ray</span><br><span class="line">chmod 755 v2ctl</span><br><span class="line">chmod 755 systemd/system/v2ray.service</span><br><span class="line">chmod 755 systemd/system/v2ray@.service</span><br></pre></td></tr></table></figure><p>然后复制目录中的文件到指定位置：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">cp v2ray /usr/<span class="built_in">local</span>/bin/</span><br><span class="line">cp v2ctl /usr/<span class="built_in">local</span>/bin/</span><br><span class="line"></span><br><span class="line">cp systemd/system/v2ray.service /etc/systemd/system/</span><br><span class="line">cp systemd/system/v2ray@.service /etc/systemd/system/</span><br><span class="line"></span><br><span class="line">mkdir /usr/<span class="built_in">local</span>/share/v2ray/</span><br><span class="line">cp geoip.dat /usr/<span class="built_in">local</span>/share/v2ray/</span><br><span class="line">cp geosite.dat /usr/<span class="built_in">local</span>/share/v2ray/</span><br><span class="line"></span><br><span class="line">mkdir /var/<span class="built_in">log</span>/v2ray/</span><br><span class="line">cp access.log /var/<span class="built_in">log</span>/v2ray/</span><br><span class="line">cp error.log /var/<span class="built_in">log</span>/v2ray/</span><br></pre></td></tr></table></figure><p>两个日志文件没有的话，自己新建一个就行，要保证所有人都有读写权限。<br>反正配置文件中不用的话，其实也无所谓，就先建着扔着。</p><p>还有一个config.json配置文件，等配置完了再复制。</p><h3 id="3-config-json配置文件"><a href="#3-config-json配置文件" class="headerlink" title="3.config.json配置文件"></a>3.config.json配置文件</h3><p>原生的V2ray并不支持订阅，反正我本来就在windows下用的，直接在v2rayN的客户端，服务器列表中中右键-&gt;【导出所选服务器为客户端配置】，保存成config.json文件。</p><p>然后把这个config.json文件也上传到 v2ray-linux-64 目录中，再来复制。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">mkdir /usr/<span class="built_in">local</span>/etc/v2ray/</span><br><span class="line">cp config.json /usr/<span class="built_in">local</span>/etc/v2ray/config.json</span><br></pre></td></tr></table></figure><p>以下配置文件仅为参考（需将outbounds处settings中改成自己的）：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">&quot;log&quot;</span>: &#123;</span><br><span class="line">    <span class="attr">&quot;access&quot;</span>: <span class="string">&quot;&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;error&quot;</span>: <span class="string">&quot;&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;loglevel&quot;</span>: <span class="string">&quot;warning&quot;</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">&quot;inbounds&quot;</span>: [</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">&quot;tag&quot;</span>: <span class="string">&quot;socks&quot;</span>,</span><br><span class="line">      <span class="attr">&quot;port&quot;</span>: <span class="number">1080</span>,</span><br><span class="line">      <span class="attr">&quot;listen&quot;</span>: <span class="string">&quot;127.0.0.1&quot;</span>,</span><br><span class="line">      <span class="attr">&quot;protocol&quot;</span>: <span class="string">&quot;socks&quot;</span>,</span><br><span class="line">      <span class="attr">&quot;sniffing&quot;</span>: &#123;</span><br><span class="line">        <span class="attr">&quot;enabled&quot;</span>: <span class="literal">true</span>,</span><br><span class="line">        <span class="attr">&quot;destOverride&quot;</span>: [</span><br><span class="line">          <span class="string">&quot;http&quot;</span>,</span><br><span class="line">          <span class="string">&quot;tls&quot;</span></span><br><span class="line">        ]</span><br><span class="line">      &#125;,</span><br><span class="line">      <span class="attr">&quot;settings&quot;</span>: &#123;</span><br><span class="line">        <span class="attr">&quot;auth&quot;</span>: <span class="string">&quot;noauth&quot;</span>,</span><br><span class="line">        <span class="attr">&quot;udp&quot;</span>: <span class="literal">true</span>,</span><br><span class="line">        <span class="attr">&quot;allowTransparent&quot;</span>: <span class="literal">false</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">&quot;tag&quot;</span>: <span class="string">&quot;http&quot;</span>,</span><br><span class="line">      <span class="attr">&quot;port&quot;</span>: <span class="number">1081</span>,</span><br><span class="line">      <span class="attr">&quot;listen&quot;</span>: <span class="string">&quot;127.0.0.1&quot;</span>,</span><br><span class="line">      <span class="attr">&quot;protocol&quot;</span>: <span class="string">&quot;http&quot;</span>,</span><br><span class="line">      <span class="attr">&quot;sniffing&quot;</span>: &#123;</span><br><span class="line">        <span class="attr">&quot;enabled&quot;</span>: <span class="literal">true</span>,</span><br><span class="line">        <span class="attr">&quot;destOverride&quot;</span>: [</span><br><span class="line">          <span class="string">&quot;http&quot;</span>,</span><br><span class="line">          <span class="string">&quot;tls&quot;</span></span><br><span class="line">        ]</span><br><span class="line">      &#125;,</span><br><span class="line">      <span class="attr">&quot;settings&quot;</span>: &#123;</span><br><span class="line">        <span class="attr">&quot;udp&quot;</span>: <span class="literal">false</span>,</span><br><span class="line">        <span class="attr">&quot;allowTransparent&quot;</span>: <span class="literal">false</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  ],</span><br><span class="line">  <span class="attr">&quot;outbounds&quot;</span>: [</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">&quot;tag&quot;</span>: <span class="string">&quot;proxy&quot;</span>,</span><br><span class="line">      <span class="attr">&quot;protocol&quot;</span>: <span class="string">&quot;vmess&quot;</span>,</span><br><span class="line">      <span class="attr">&quot;settings&quot;</span>: &#123;</span><br><span class="line">        <span class="attr">&quot;vnext&quot;</span>: [</span><br><span class="line">          &#123;</span><br><span class="line">            <span class="attr">&quot;address&quot;</span>: <span class="string">&quot;abc.abc.net&quot;</span>,</span><br><span class="line">            <span class="attr">&quot;port&quot;</span>: <span class="number">30000</span>,</span><br><span class="line">            <span class="attr">&quot;users&quot;</span>: [</span><br><span class="line">              &#123;</span><br><span class="line">                <span class="attr">&quot;id&quot;</span>: <span class="string">&quot;effffff6-fffffb-4aaa-8888-aaaaaaaaaa&quot;</span>,</span><br><span class="line">                <span class="attr">&quot;alterId&quot;</span>: <span class="number">1</span>,</span><br><span class="line">                <span class="attr">&quot;email&quot;</span>: <span class="string">&quot;t@t.tt&quot;</span>,</span><br><span class="line">                <span class="attr">&quot;security&quot;</span>: <span class="string">&quot;chacha20-poly1305&quot;</span></span><br><span class="line">              &#125;</span><br><span class="line">            ]</span><br><span class="line">          &#125;</span><br><span class="line">        ]</span><br><span class="line">      &#125;,</span><br><span class="line">      <span class="attr">&quot;streamSettings&quot;</span>: &#123;</span><br><span class="line">        <span class="attr">&quot;network&quot;</span>: <span class="string">&quot;tcp&quot;</span></span><br><span class="line">      &#125;,</span><br><span class="line">      <span class="attr">&quot;mux&quot;</span>: &#123;</span><br><span class="line">        <span class="attr">&quot;enabled&quot;</span>: <span class="literal">true</span>,</span><br><span class="line">        <span class="attr">&quot;concurrency&quot;</span>: <span class="number">8</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">&quot;tag&quot;</span>: <span class="string">&quot;direct&quot;</span>,</span><br><span class="line">      <span class="attr">&quot;protocol&quot;</span>: <span class="string">&quot;freedom&quot;</span>,</span><br><span class="line">      <span class="attr">&quot;settings&quot;</span>: &#123;&#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">&quot;tag&quot;</span>: <span class="string">&quot;block&quot;</span>,</span><br><span class="line">      <span class="attr">&quot;protocol&quot;</span>: <span class="string">&quot;blackhole&quot;</span>,</span><br><span class="line">      <span class="attr">&quot;settings&quot;</span>: &#123;</span><br><span class="line">        <span class="attr">&quot;response&quot;</span>: &#123;</span><br><span class="line">          <span class="attr">&quot;type&quot;</span>: <span class="string">&quot;http&quot;</span></span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  ],</span><br><span class="line">  <span class="attr">&quot;routing&quot;</span>: &#123;</span><br><span class="line">    <span class="attr">&quot;domainStrategy&quot;</span>: <span class="string">&quot;AsIs&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;domainMatcher&quot;</span>: <span class="string">&quot;linear&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;rules&quot;</span>: [</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="attr">&quot;type&quot;</span>: <span class="string">&quot;field&quot;</span>,</span><br><span class="line">        <span class="attr">&quot;inboundTag&quot;</span>: [</span><br><span class="line">          <span class="string">&quot;api&quot;</span></span><br><span class="line">        ],</span><br><span class="line">        <span class="attr">&quot;outboundTag&quot;</span>: <span class="string">&quot;api&quot;</span>,</span><br><span class="line">        <span class="attr">&quot;enabled&quot;</span>: <span class="literal">true</span></span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="attr">&quot;type&quot;</span>: <span class="string">&quot;field&quot;</span>,</span><br><span class="line">        <span class="attr">&quot;outboundTag&quot;</span>: <span class="string">&quot;proxy&quot;</span>,</span><br><span class="line">        <span class="attr">&quot;domain&quot;</span>: [</span><br><span class="line">          <span class="string">&quot;geosite:google&quot;</span></span><br><span class="line">        ],</span><br><span class="line">        <span class="attr">&quot;enabled&quot;</span>: <span class="literal">true</span></span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="attr">&quot;type&quot;</span>: <span class="string">&quot;field&quot;</span>,</span><br><span class="line">        <span class="attr">&quot;outboundTag&quot;</span>: <span class="string">&quot;direct&quot;</span>,</span><br><span class="line">        <span class="attr">&quot;domain&quot;</span>: [</span><br><span class="line">          <span class="string">&quot;domain:example-example.com&quot;</span>,</span><br><span class="line">          <span class="string">&quot;domain:example-example2.com&quot;</span></span><br><span class="line">        ],</span><br><span class="line">        <span class="attr">&quot;enabled&quot;</span>: <span class="literal">true</span></span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="attr">&quot;type&quot;</span>: <span class="string">&quot;field&quot;</span>,</span><br><span class="line">        <span class="attr">&quot;outboundTag&quot;</span>: <span class="string">&quot;block&quot;</span>,</span><br><span class="line">        <span class="attr">&quot;domain&quot;</span>: [</span><br><span class="line">          <span class="string">&quot;geosite:category-ads-all&quot;</span></span><br><span class="line">        ],</span><br><span class="line">        <span class="attr">&quot;enabled&quot;</span>: <span class="literal">true</span></span><br><span class="line">      &#125;</span><br><span class="line">    ]</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>我这里就没把log文件配置写进去，需要的话再写上：</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&quot;log&quot;: &#123;</span><br><span class="line">    &quot;access&quot;: &quot;/var/log/v2ray/access.log&quot;,</span><br><span class="line">    &quot;error&quot;: &quot;/var/log/v2ray/error.log&quot;,</span><br><span class="line">    &quot;loglevel&quot;: &quot;warning&quot;</span><br><span class="line">  &#125;,</span><br><span class="line">...</span><br></pre></td></tr></table></figure><p>记得这两个文件看一下，要有读写权限。</p><h3 id="4-启动v2ray"><a href="#4-启动v2ray" class="headerlink" title="4.启动v2ray"></a>4.启动v2ray</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 启动V2ray</span></span><br><span class="line">sudo systemctl start v2ray</span><br><span class="line"></span><br><span class="line"><span class="comment"># 检查V2ray状态</span></span><br><span class="line">sudo systemctl status v2ray</span><br><span class="line"></span><br><span class="line"><span class="comment"># 设置V2ray开机自启动</span></span><br><span class="line">sudo systemctl <span class="built_in">enable</span> v2ray</span><br></pre></td></tr></table></figure><p>V2ray状态：<br><img                       lazyload                     src="/images/loading.svg"                     data-src="/img/Linux_v2ray_1.png"                      style="zoom: 100%;"                ></p><h3 id="5-检验代码是否生效"><a href="#5-检验代码是否生效" class="headerlink" title="5.检验代码是否生效"></a>5.检验代码是否生效</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">curl -x socks5://127.0.0.1:1080 https://www.google.com -v</span><br></pre></td></tr></table></figure><p>如果能返回google.com的源代码，即表示配置成功。</p>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CentOS安装git</title>
      <link href="/2022/06/14/CentOS%E5%AE%89%E8%A3%85git/"/>
      <url>/2022/06/14/CentOS%E5%AE%89%E8%A3%85git/</url>
      
        <content type="html"><![CDATA[<p>我有一台腾讯云的CentOS 7.6，不行，安装依赖库的时候直接对应的腾讯云的mirrors都空了，没有。</p><p>于是又试了下，另一台CentOS 8.2版本的，正常可以安装。</p><a id="more"></a><p>Git官网对于Linux系统安装Git的说明：<br><a class="link"   href="https://git-scm.com/download/linux" >https://git-scm.com/download/linux<i class="fas fa-external-link-alt"></i></a></p><p>别的系统都很简单，直接一条命令就行。<br>但就是这个CentOS这几个，需要自己下载源码、编译才能安装。</p><p>用<code>yum install git</code>命令安装的是老版本，反正都不行的。</p><h2 id="CentOS安装git方法"><a href="#CentOS安装git方法" class="headerlink" title="CentOS安装git方法"></a>CentOS安装git方法</h2><h3 id="1-官网下载源码"><a href="#1-官网下载源码" class="headerlink" title="1.官网下载源码"></a>1.官网下载源码</h3><p>上面提供的官网（<a class="link"   href="https://git-scm.com/download/linux" >https://git-scm.com/download/linux<i class="fas fa-external-link-alt"></i></a> ）最后CentOS部分，提供了源码下载的链接：<br><a class="link"   href="https://mirrors.edge.kernel.org/pub/software/scm/git/" >https://mirrors.edge.kernel.org/pub/software/scm/git/<i class="fas fa-external-link-alt"></i></a></p><p>然后直接找一下对应的新版本，我这里下载的新版本是：git-2.36.0.tar.gz</p><p>下载好了用ftp工具上传到centos服务器上。</p><h3 id="2-安装依赖库和编译工具"><a href="#2-安装依赖库和编译工具" class="headerlink" title="2.安装依赖库和编译工具"></a>2.安装依赖库和编译工具</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">yum -y install curl-devel expat-devel openssl-devel zlib-devel // 实测依赖</span><br><span class="line"><span class="comment">#yum -y install curl-devel expat-devel gettext-devel openssl-devel zlib-devel // 官网完整依赖</span></span><br><span class="line"></span><br><span class="line">yum -y install gcc</span><br></pre></td></tr></table></figure><p>依赖库我反正用的第1个就行了。</p><h3 id="3-解压-git-2-36-0-tar-gz-并进入目录"><a href="#3-解压-git-2-36-0-tar-gz-并进入目录" class="headerlink" title="3.解压 git-2.36.0.tar.gz 并进入目录"></a>3.解压 git-2.36.0.tar.gz 并进入目录</h3><p>解压文件，运行以下命令：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">tar -zxf git-2.36.0.tar.gz</span><br><span class="line"><span class="built_in">cd</span> git-2.36.0</span><br></pre></td></tr></table></figure><h3 id="4-编译并安装"><a href="#4-编译并安装" class="headerlink" title="4.编译并安装"></a>4.编译并安装</h3><p>在git-2.36.0 目录下，运行以下命令，先编译，再安装：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">make  //编译</span><br><span class="line">make install prefix=/usr/<span class="built_in">local</span>/git  //安装</span><br></pre></td></tr></table></figure><h3 id="5-把git命令添加到环境变量"><a href="#5-把git命令添加到环境变量" class="headerlink" title="5.把git命令添加到环境变量"></a>5.把git命令添加到环境变量</h3><p>安装成功后，加入到环境变量。</p><p>1).用vi或vim打开编辑/etc/profile 文件</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vi /etc/profile</span><br></pre></td></tr></table></figure><p>在文件末尾添加以下内容：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">export PATH&#x3D;$PATH:&#x2F;usr&#x2F;local&#x2F;git&#x2F;bin</span><br></pre></td></tr></table></figure><p>2).执行以下命令使配置文件生效：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">source</span> /etc/profile</span><br></pre></td></tr></table></figure><h3 id="6-查看git版本"><a href="#6-查看git版本" class="headerlink" title="6.查看git版本"></a>6.查看git版本</h3><p>安装成功后，查看版本（我这就是2.36.0版本）：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git --version</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CentOS </tag>
            
            <tag> Linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Python 读写文本文件</title>
      <link href="/2022/06/06/Python-%E8%AF%BB%E5%86%99%E6%96%87%E6%9C%AC%E6%96%87%E4%BB%B6/"/>
      <url>/2022/06/06/Python-%E8%AF%BB%E5%86%99%E6%96%87%E6%9C%AC%E6%96%87%E4%BB%B6/</url>
      
        <content type="html"><![CDATA[<p>文本文件，就是可以用记事本程序打开的纯文本内容的文件。</p><p>格式可以有很多，比如.txt，.log，.json，后缀是啥也不是很重要，反正内容是纯文本就可以了。</p><p>Python中文本文件的读写，用一个内置的open函数，打开文件，获得文件对象。。</p><a id="more"></a><h2 id="open函数"><a href="#open函数" class="headerlink" title="open函数"></a>open函数</h2><p>open函数参数如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">open(</span><br><span class="line">    file, </span><br><span class="line">    mode&#x3D;&#39;r&#39;, </span><br><span class="line">    buffering&#x3D;-1, </span><br><span class="line">    encoding&#x3D;None, </span><br><span class="line">    errors&#x3D;None, </span><br><span class="line">    newline&#x3D;None, </span><br><span class="line">    closefd&#x3D;True, </span><br><span class="line">    opener&#x3D;None</span><br><span class="line">    ) </span><br></pre></td></tr></table></figure><p>其中常用的就这3个参数：</p><ul><li>file：打开文件的路径，可以是相对路径，也可以是绝对路径。</li><li>mode：打开文件的模式，常用就3种，<code>&#39;r&#39;</code>表示只读，<code>&#39;w&#39;</code>表示只写，<code>&#39;a&#39;</code>表示追加；默认是’r’。</li><li>encoding：字符编码。最常用的就’utf-8’，’gb2312’。</li></ul><h2 id="读取文本文件"><a href="#读取文本文件" class="headerlink" title="读取文本文件"></a>读取文本文件</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 读取文本文件内容</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">read_file</span>(<span class="params">txt_file</span>):</span></span><br><span class="line">    data = []</span><br><span class="line">    <span class="keyword">with</span> <span class="built_in">open</span>(txt_file, <span class="string">&#x27;r&#x27;</span>, encoding=<span class="string">&#x27;utf-8&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">        <span class="comment"># s = f.read() # 读取全部文件内容</span></span><br><span class="line">        <span class="comment"># 一行一行读取，存入List</span></span><br><span class="line">        <span class="keyword">for</span> line <span class="keyword">in</span> f:</span><br><span class="line">            data.append(line.strip(<span class="string">&#x27;\n&#x27;</span>)) <span class="comment"># 读取一行</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment"># f.close()</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> data</span><br></pre></td></tr></table></figure><p>读取文件时，最常用的还是按行、一行一行读取出来，再进行处理。</p><p>这里读取一行的时候，用<code>strip(&#39;\n&#39;)</code>方法处理了下，就是去除一行结尾处的换行符。<br>最后返回一个List。</p><p>这里为啥用的with as 方法打开文件，而不是直接用 <code>f = open(txt_file, &#39;r&#39;, encoding=&#39;utf-8&#39;)</code> ，好处在之前一篇文章里写了：<a href="/2022/05/20/Python%E4%B8%ADwith-as%E7%94%A8%E6%B3%95/" title="Python中with - as用法">Python中with - as用法</a></p><h2 id="写入文本文件"><a href="#写入文本文件" class="headerlink" title="写入文本文件"></a>写入文本文件</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 写入文本文件</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">write_file</span>(<span class="params">txt_file</span>):</span></span><br><span class="line">    data = [<span class="string">&#x27;aaaa&#x27;</span>, <span class="string">&#x27;bbbb&#x27;</span>]</span><br><span class="line">    <span class="keyword">with</span> <span class="built_in">open</span>(txt_file, <span class="string">&#x27;w&#x27;</span>, encoding=<span class="string">&#x27;utf-8&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">        <span class="comment"># 一行一行写入</span></span><br><span class="line">        <span class="keyword">for</span> line <span class="keyword">in</span> data:</span><br><span class="line">            f.write(line+<span class="string">&#x27;\n&#x27;</span>) <span class="comment"># 写入一行</span></span><br></pre></td></tr></table></figure><p>读取文件也一样，一般我们写入一个List的数据，write的时候，后面加个<code>&#39;\n&#39;</code>，就可以换行、一行一行写入了。</p><p>追加写入跟写入文件一样的，就把open函数中，参数mode的<code>&#39;w&#39;</code>改成<code>&#39;a&#39;</code>就行了。</p><p><strong>关于open函数的mode参数：</strong></p><ul><li><code>&#39;rb&#39;</code>：表示二进制方式读</li><li><code>&#39;rw&#39;</code>：表示二进制方式写</li></ul>]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Python Selenium报UnexpectedAlertPresentException 解决方法</title>
      <link href="/2022/06/04/Python-Selenium%E6%8A%A5UnexpectedAlertPresentException-%E8%A7%A3%E5%86%B3%E6%96%B9%E6%B3%95/"/>
      <url>/2022/06/04/Python-Selenium%E6%8A%A5UnexpectedAlertPresentException-%E8%A7%A3%E5%86%B3%E6%96%B9%E6%B3%95/</url>
      
        <content type="html"><![CDATA[<p>用Selenium的时候，有时候进入页面后，会收到一个Exception：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">selenium.common.exceptions.UnexpectedAlertPresentException: Alert Text *******</span><br></pre></td></tr></table></figure><p>这是有个Alert text的内容提醒，然后程序就报Exception，就停了。</p><p>但其实我并不想管这个Alert。</p><p><strong>解决方法</strong>：</p><p>就直接把异常捕获一下，pass就行了。</p><a id="more"></a><p>代码如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    driver.find_elements_by_id(<span class="string">&#x27;test_id&#x27;</span>).click()</span><br><span class="line"><span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">    <span class="keyword">if</span> <span class="string">&#x27;Alert&#x27;</span> <span class="keyword">in</span> <span class="built_in">str</span>(e):</span><br><span class="line">        <span class="keyword">pass</span></span><br></pre></td></tr></table></figure><p>就判断异常内容里有 Alert 这个词的，直接就pass过去了。</p>]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Python 批量图片合成pdf文件</title>
      <link href="/2022/06/04/Python-%E6%89%B9%E9%87%8F%E5%9B%BE%E7%89%87%E5%90%88%E6%88%90pdf%E6%96%87%E4%BB%B6/"/>
      <url>/2022/06/04/Python-%E6%89%B9%E9%87%8F%E5%9B%BE%E7%89%87%E5%90%88%E6%88%90pdf%E6%96%87%E4%BB%B6/</url>
      
        <content type="html"><![CDATA[<p>批量图片合成 pdf 文件的方法试过两种。一种是用PS软件，另一种就是用Python。</p><p>Python处理的方法的好处是：效率更快，然后同样的图片内容，合成pdf文件不到20M，而用Photoshop处理出来都50M+。</p><a id="more"></a><h2 id="一、批量图片设置成一样的大小尺寸和dpi"><a href="#一、批量图片设置成一样的大小尺寸和dpi" class="headerlink" title="一、批量图片设置成一样的大小尺寸和dpi"></a>一、批量图片设置成一样的大小尺寸和dpi</h2><p><strong>如果对图片没有统一大小要求的，可以跳过这一步。</strong></p><p>如果需要图片统一处理的，可以修改尺寸大小这些，这个用PIL库就行。</p><p>安装库：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install Pillow</span><br></pre></td></tr></table></figure><p>怎么批量修改的，有文章写了具体介绍：<a href="/2022/05/10/Python-%E6%89%B9%E9%87%8F%E4%BF%AE%E6%94%B9%E5%9B%BE%E7%89%87%E5%B0%BA%E5%AF%B8/" title="Python 批量修改图片尺寸">Python 批量修改图片尺寸</a> ，这里就不详细说了。</p><p>最后反正整好一个处理好图片的文件夹。</p><h2 id="二、把批量图片合成-pdf"><a href="#二、把批量图片合成-pdf" class="headerlink" title="二、把批量图片合成 pdf"></a>二、把批量图片合成 pdf</h2><p>为了pdf文件中图片能按照想要的顺序排序，图片名称直接用：01.jpg,，02.jpg，类似这样的就行。</p><p>需要用到img2pdf 的库。</p><p>安装：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install img2pdf</span><br></pre></td></tr></table></figure><p>官方文档：<a class="link"   href="https://pypi.org/project/img2pdf" >https://pypi.org/project/img2pdf<i class="fas fa-external-link-alt"></i></a><br>看一下示例就会用了，有多种情况适用</p><p>代码如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> glob</span><br><span class="line"><span class="keyword">import</span> img2pdf</span><br><span class="line"></span><br><span class="line"><span class="comment"># 把目录中所有图片合成pdf</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">pic_to_pdf</span>(<span class="params">picdir, pdf_filename</span>):</span></span><br><span class="line">    new_path = picdir + <span class="string">r&#x27;\*.*&#x27;</span></span><br><span class="line">    <span class="comment"># print(new_path) # C:\Users\zzz\Desktop\222\*.*</span></span><br><span class="line">    new_path_list = glob.glob(new_path)</span><br><span class="line">    <span class="keyword">with</span> <span class="built_in">open</span>(pdf_filename, <span class="string">&#x27;wb&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">        f.write(img2pdf.convert(new_path_list))</span><br><span class="line"></span><br><span class="line"><span class="comment"># 把目录中所有图片合成pdf</span></span><br><span class="line">pic_to_pdf(picdir=<span class="string">r&#x27;C:\Users\zzz\Desktop\222&#x27;</span>, pdf_filename=<span class="string">&#x27;test222.pdf&#x27;</span>) <span class="comment"># 生成pdf文件 test222.pdf</span></span><br></pre></td></tr></table></figure><p>如果有多个文件夹，需要生成多个pdf的话，就再写个 for循环，循环一下就行了。</p>]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>H5视频加倍速播放方法</title>
      <link href="/2022/06/04/H5%E8%A7%86%E9%A2%91%E5%8A%A0%E5%80%8D%E9%80%9F%E6%92%AD%E6%94%BE%E6%96%B9%E6%B3%95/"/>
      <url>/2022/06/04/H5%E8%A7%86%E9%A2%91%E5%8A%A0%E5%80%8D%E9%80%9F%E6%92%AD%E6%94%BE%E6%96%B9%E6%B3%95/</url>
      
        <content type="html"><![CDATA[<p>网上的视频，现在一般也提供倍速播放的功能，一般最多到2.0x。如果想要更快一点，或者没提供倍速播放的，可以试试这个方法，只要是H5视频基本上就行。</p><p>对于H5视频来说，其实就是在网页源代码中能找到有个<code>&lt;video&gt;</code>标签的，一般就是了。</p><p>想要按自己设定的倍速观看，其实也很简单，直接运行一条 js语句就行了。</p><a id="more"></a><p><strong>倍速播放方法</strong>：</p><p>1.在浏览器中按F12，打开 开发者工具，查看video标签在【Elements】（元素）里是否存在。确认是否H5视频。</p><p>2.在【Console】（控制台）里，输入以下js语句后，回车 执行。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">document</span>.querySelector(<span class="string">&#x27;video&#x27;</span>).playbackRate=<span class="number">5</span></span><br></pre></td></tr></table></figure><p>playbackRate后面的值5表示：5倍速。(PS.最高好像是16） </p><img                       lazyload                     src="/images/loading.svg"                     data-src="/img/h5_video_playbackrate.png"                      style="zoom: 70%;"                ><p>话说，有时候querySelector里未必是’video’，那是因为网页源码中的<code>&lt;video&gt;</code>标签被改名了。不是直接用的这个。（发现小破站就改过名字，然后又改回去了）</p>]]></content>
      
      
      <categories>
          
          <category> JavaScript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaScript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>iphone连接电脑后不显示Apple iphone盘符 解决方法</title>
      <link href="/2022/06/04/iphone%E8%BF%9E%E6%8E%A5%E7%94%B5%E8%84%91%E5%90%8E%E4%B8%8D%E6%98%BE%E7%A4%BAApple%E7%9B%98%E7%AC%A6/"/>
      <url>/2022/06/04/iphone%E8%BF%9E%E6%8E%A5%E7%94%B5%E8%84%91%E5%90%8E%E4%B8%8D%E6%98%BE%E7%A4%BAApple%E7%9B%98%E7%AC%A6/</url>
      
        <content type="html"><![CDATA[<p><strong>问题描述</strong>：<br>iphone 连接上电脑后能充电，但是不显示那个Apple iphone的盘符。</p><p>正常情况下，iphone手机连接电脑后，都能看到个Apple iphone的盘符。可以像U盘一样进行操作。<br>可以直接复制手机里的文件，也可以剪切出来。</p><p>于是，我正在清理手机相册，清着清着，突然跳出了错误提示，再然后这个Apple的盘符就不出现了，可以充电，打开itunes也能正常连接。</p><a id="more"></a><p><strong>解决方法</strong>：</p><p>去【服务】里面，把【Apple Mobile Device Service】这项服务停止一下，重新启动一下。然后手机重新连上电脑就有盘符了。<br><img                       lazyload                     src="/images/loading.svg"                     data-src="/img/iphone_connect_pc_not_see_drive.png"                                     ></p>]]></content>
      
      
      <categories>
          
          <category> iphone </category>
          
      </categories>
      
      
        <tags>
            
            <tag> iphone </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Python用 Mysqldb时报错：MySQLdb._exceptions.OperationalError 解决方法</title>
      <link href="/2022/06/04/Python%E7%94%A8Mysqldb%E6%97%B6%E6%8A%A5%E9%94%99OperationalError/"/>
      <url>/2022/06/04/Python%E7%94%A8Mysqldb%E6%97%B6%E6%8A%A5%E9%94%99OperationalError/</url>
      
        <content type="html"><![CDATA[<p>在Python里，用Mysqldb的时候，报错：<code>MySQLdb._exceptions.OperationalError: (2059, &lt;NULL&gt;)</code></p><p>网上查了下 ，说这是将数据迁移至mysql8.0时遇到的问题。</p><p>因为mysql8.0密码加密的问题，mysql8.0对用户密码的加密方式为 <code>caching_sha2_password</code>，然后看了MySQL Workbench的加密方式果然都是这个。</p><a id="more"></a><p>我在Python里用的时候，可能还不支持这种新增的加密方式，所以要改一下用的root账号的加密方式。</p><p><strong>解决方法</strong>：</p><p>1.在mysql中执行以下命令修改加密方式：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&gt; alter user &#39;root&#39;@&#39;localhost&#39; identified with mysql_native_password by &#39;yourpassword&#39;</span><br></pre></td></tr></table></figure><p>yourpassword：你自己mysql root账号的密码</p><p>2.再运行以下命令让其生效：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&gt; flush privileges</span><br></pre></td></tr></table></figure><p>然后就行了。</p>]]></content>
      
      
      <categories>
          
          <category> 数据库 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
            <tag> MySQL </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>重装系统时U盘PE系统进去看不到硬盘 解决方法</title>
      <link href="/2022/06/04/%E9%87%8D%E8%A3%85%E7%B3%BB%E7%BB%9F%E6%97%B6U%E7%9B%98PE%E7%B3%BB%E7%BB%9F%E8%BF%9B%E5%8E%BB%E7%9C%8B%E4%B8%8D%E5%88%B0%E7%A1%AC%E7%9B%98/"/>
      <url>/2022/06/04/%E9%87%8D%E8%A3%85%E7%B3%BB%E7%BB%9F%E6%97%B6U%E7%9B%98PE%E7%B3%BB%E7%BB%9F%E8%BF%9B%E5%8E%BB%E7%9C%8B%E4%B8%8D%E5%88%B0%E7%A1%AC%E7%9B%98/</url>
      
        <content type="html"><![CDATA[<p><strong>问题描述</strong>：<br>戴尔灵越7400（inspiron 7400），重装系统时碰到的。<br>用U盘的PE系统进去，想重新分区，看不到硬盘。</p><p>电脑原本的win10系统进去，打开分区软件，可以看到硬盘的信息。但看到硬盘的分区都显示BitLocker加密。</p><a id="more"></a><p><strong>解决方法</strong>：</p><p><strong>1.取消硬盘BitLocker加密</strong></p><p>从系统的【设置】里搜一下【设备加密】，找到BitLocker加密项，取消就行了。（预装的是Win10的家庭版)<br>取消了BitLocker加密后，发现在U盘的PE系统里，还是看不到硬盘。</p><p><strong>2.改硬盘模式为AHCI</strong></p><p>大多数戴尔机器出厂BIOS默认硬盘模式为Raid On而非AHCI，WIN10纯净版镜像中自带NVME驱动，可以是被AHCI模式下的固态硬盘。<br>这个是官网上对于“安装系统时看不到固态硬盘的解决方案”的回答。</p><p>具体方法如下：<br>开机时连续敲击F2进入BIOS，接下来根据BIOS版本操作，找到SATA Operation选项，选择为AHCI，再保存后重启就可以了。（现在新的BIOS直接搜索一下这个就能找出来了）</p><blockquote><p>①竖版BIOS用户：选择System Configuration=&gt;SATA Operation选择为AHCI<br>②横版BIOS用户：Advance选项下，将SATA Operation选择为AHCI</p></blockquote><p>官网回答地址：<a class="link"   href="https://www.dell.com/support/kbdoc/zh-cn/000149444/%E5%AE%89%E8%A3%85%E7%B3%BB%E7%BB%9F%E6%97%B6%E7%9C%8B%E4%B8%8D%E5%88%B0%E5%9B%BA%E6%80%81%E7%A1%AC%E7%9B%98%E7%9A%84%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88" >安装系统时看不到固态硬盘的解决方案<i class="fas fa-external-link-alt"></i></a></p><p>再进入U盘的PE系统，就可以删除分区，重装再分区啦。</p>]]></content>
      
      
      <categories>
          
          <category> Windows </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Windows </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Excel中对ip地址进行排序</title>
      <link href="/2022/06/04/Excel%E4%B8%AD%E5%AF%B9ip%E5%9C%B0%E5%9D%80%E8%BF%9B%E8%A1%8C%E6%8E%92%E5%BA%8F/"/>
      <url>/2022/06/04/Excel%E4%B8%AD%E5%AF%B9ip%E5%9C%B0%E5%9D%80%E8%BF%9B%E8%A1%8C%E6%8E%92%E5%BA%8F/</url>
      
        <content type="html"><![CDATA[<p>因为ip地址是一个文本，没办法直接用Excel排序。比如：192.168.0.100<br>所以要对ip地址的排序，需要进行一些处理，其实是对ip地址的最后一位进行排序。</p><p><strong>思路</strong>：</p><ul><li>1.用公式获取ip地址的最后一部分，比如ip地址192.168.0.22，获取到22；</li><li>2.以ip地址最后一部分的列为主要关键字进行自定义排序；</li><li>3.删除辅助列，就ok了。</li></ul><a id="more"></a><h2 id="获取ip地址的最后一部分"><a href="#获取ip地址的最后一部分" class="headerlink" title="获取ip地址的最后一部分"></a>获取ip地址的最后一部分</h2><h3 id="1-用SUBSTITUTE函数把ip地址里的最后一个点（-）替换成-符号"><a href="#1-用SUBSTITUTE函数把ip地址里的最后一个点（-）替换成-符号" class="headerlink" title="1.用SUBSTITUTE函数把ip地址里的最后一个点（.）替换成@符号"></a>1.用SUBSTITUTE函数把ip地址里的最后一个点（.）替换成@符号</h3><p>这里替换成啥符号都行，只要不是点。主要方便用查找的函数搜索的时候，准确找到最后一部分的起始位置。</p><p><strong>SUBSTITUTE函数</strong>：替换指定文本，在text字符串中用 new_text 替换 old_text。<br><strong>语法</strong>：SUBSTITUTE(text, old_text, new_text, [instance_num])</p><ul><li>instance_num：可选。指定要将第几个old_text 替换为 new_text。否则是全部替换。</li></ul><p>把A2单元格中的字符串中的第3个点（.）替换成@号。公式：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#x3D;SUBSTITUTE(A2,&quot;.&quot;,&quot;@&quot;,3) </span><br></pre></td></tr></table></figure><p>返回结果如：10.95.22@44</p><h3 id="2-用FIND函数找到-号的位置"><a href="#2-用FIND函数找到-号的位置" class="headerlink" title="2.用FIND函数找到@号的位置"></a>2.用FIND函数找到@号的位置</h3><p>我们要获取的ip地址最后一部分的起始位置就是@符号的后1位。</p><p><strong>FIND函数</strong>：查找在within_text字符串中，第1个出现find_text字符串的起始位置的值，该值从within_text的第1个字符算起。<br><strong>语法</strong>：FIND(find_text, within_text, [start_num])</p><ul><li>start_num：可选。指定find_text中开始进行查找within_text字符串的位置，默认是1。</li></ul><p>公式<code>=FIND(&quot;@&quot;,&quot;192.168.0@44&quot;)</code>返回的结果是：10</p><p>把A2单元格中的字符串中的第3个点（.）替换成@号后，获取@符号的位置。结合起来，公式：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#x3D;FIND(&quot;@&quot;,SUBSTITUTE(A2,&quot;.&quot;,&quot;@&quot;,3))</span><br></pre></td></tr></table></figure><h3 id="3-用MID函数截取ip地址最后部分"><a href="#3-用MID函数截取ip地址最后部分" class="headerlink" title="3.用MID函数截取ip地址最后部分"></a>3.用MID函数截取ip地址最后部分</h3><p><strong>MID函数</strong>：截取text字符串，从中间截取，可以选择开始和结束的位置。<br><strong>语法</strong>：MID(text, start_num, num_chars)</p><ul><li>num_chars：取几个。</li></ul><p>公式<code>=MID(&quot;192.168.0@44&quot;,10+1,3)</code>返回的结果是：44（文本字符串）</p><p>把A2单元格中的ip地址最后一部分截取出来。结合前面的公式，完整公式为：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#x3D;MID(A2,FIND(&quot;@&quot;,SUBSTITUTE(A2,&quot;.&quot;,&quot;@&quot;,3))+1,3)</span><br></pre></td></tr></table></figure><p>效果如图：<br><img                       lazyload                     src="/images/loading.svg"                     data-src="/img/Excel_ip_sort_1.png"                                     ></p><h2 id="自定义排序"><a href="#自定义排序" class="headerlink" title="自定义排序"></a>自定义排序</h2><p>以ip地址最后一部分为关键字进行自定义排序。</p><p>因为刚才取出来的ip地址的最后一部分这一列（B列）是文本的，所以先复制一列出来，粘贴的时候只粘贴文本，然后格式全部一起转换成数字，就有了C列。</p><p>最后，以C列为关键字进行自定义排序。<br><img                       lazyload                     src="/images/loading.svg"                     data-src="/img/Excel_ip_sort_2.png"                                     ></p><p>最后，把不需要的辅助列都删除即可。</p><p>PS.Excel中常用函数应用介绍：<a href="#">Post not found: 【不断更新系列】Excel常用函数</a></p>]]></content>
      
      
      <categories>
          
          <category> Office </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Excel </tag>
            
            <tag> Office </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>浏览器记住密码后无法查看 解决方法</title>
      <link href="/2022/06/04/%E6%B5%8F%E8%A7%88%E5%99%A8%E8%AE%B0%E4%BD%8F%E5%AF%86%E7%A0%81%E5%90%8E%E6%97%A0%E6%B3%95%E6%9F%A5%E7%9C%8B/"/>
      <url>/2022/06/04/%E6%B5%8F%E8%A7%88%E5%99%A8%E8%AE%B0%E4%BD%8F%E5%AF%86%E7%A0%81%E5%90%8E%E6%97%A0%E6%B3%95%E6%9F%A5%E7%9C%8B/</url>
      
        <content type="html"><![CDATA[<p>碰到过的就是360的浏览器（安全浏览器、极速浏览器）！简直了！</p><p>记住密码后，进入设置中，能搜出来的确保存了，都只有点，压根无法查看密码。（这个太反人类了吧）别家浏览器都是打个星号(<code>*</code>)啥的，然后输一下当前电脑的密码就能查看了。</p><a id="more"></a><p>如图所示（就这个鬼样）：<br><img                       lazyload                     src="/images/loading.svg"                     data-src="/img/browser_can_not_see_password_1.png"                                     ></p><p><strong>解决方法：</strong></p><ul><li>1.通过浏览器的开发工具(按F12)，查看审查元素（定位到这个密码的框）；</li><li>2.把原来type的类型从password改成text，回车，就能看到了。</li></ul><p>修改type类型前是这样的：<br><img                       lazyload                     src="/images/loading.svg"                     data-src="/img/browser_can_not_see_password_2.png"                                     ></p><p>修改type类型后（已经能看到密码）：<br><img                       lazyload                     src="/images/loading.svg"                     data-src="/img/browser_can_not_see_password_3.png"                                     ></p><p>PS.当然，这个方法查看已保存的密码的方法是适用于所有浏览器的。别的浏览器也可以这样看已保存的密码。</p>]]></content>
      
      
      <categories>
          
          <category> Software </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Software </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>群晖NAS 设置不同用户之间homes目录不可见</title>
      <link href="/2022/06/04/%E7%BE%A4%E6%99%96NAS-%E8%AE%BE%E7%BD%AE%E4%B8%8D%E5%90%8C%E7%94%A8%E6%88%B7%E4%B9%8B%E9%97%B4homes%E7%9B%AE%E5%BD%95%E4%B8%8D%E5%8F%AF%E8%A7%81/"/>
      <url>/2022/06/04/%E7%BE%A4%E6%99%96NAS-%E8%AE%BE%E7%BD%AE%E4%B8%8D%E5%90%8C%E7%94%A8%E6%88%B7%E4%B9%8B%E9%97%B4homes%E7%9B%AE%E5%BD%95%E4%B8%8D%E5%8F%AF%E8%A7%81/</url>
      
        <content type="html"><![CDATA[<p>默认的情况，每个用户登录后，都能从File station中看到homes目录，homes目录里有每个用户的Drive目录。那相当于每个用户都能看到其它用户存在Drive里的文件了。（这个默认感觉不太好）</p><a id="more"></a><p>如图所示：<br><img                       lazyload                     src="/images/loading.svg"                     data-src="/img/NAS_homes_setting_not_see_1.png"                                     ></p><p><strong>设置不同用户之间homes目录不可见方法：</strong></p><ul><li>1.使用管理员权限登录DSM；</li><li>2.打开【控制面板】；</li><li>3.找到“共享文件夹”；</li><li>4.选中右侧“homes”，点击上方【编辑】按钮；</li><li>5.切换到“高级权限”标签页；</li><li>6.勾选“启用高级共享权限”后点击确定。</li></ul><p>再次登录用户，就会看到homes目录已经不出现在File station的列表中，仅能登录用户的home目录。如下图所示：<br><img                       lazyload                     src="/images/loading.svg"                     data-src="/img/NAS_homes_setting_not_see_2.png"                                     ></p>]]></content>
      
      
      <categories>
          
          <category> NAS </category>
          
      </categories>
      
      
        <tags>
            
            <tag> NAS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Python Failed to write executable - trying to use .deleteme logic 解决方法</title>
      <link href="/2022/06/03/Python-Failed-to-write-executable-trying-to-use-deleteme-logic/"/>
      <url>/2022/06/03/Python-Failed-to-write-executable-trying-to-use-deleteme-logic/</url>
      
        <content type="html"><![CDATA[<p>Python安装包的时候报错（下载完了，进入Installing的时候）：</p><blockquote><p>WARNING: Failed to write executable - trying to use .deleteme logic<br>ERROR: Could not install packages due to an EnvironmentError: [WinError 2] 系统找不到指定的文件。</p></blockquote><a id="more"></a><img                       lazyload                     src="/images/loading.svg"                     data-src="/img/Python_Failed_to_write_executable_1.png"                                     ><p>一看就是权限的问题。</p><p><strong>解决方法（3种）：</strong><br>1.就打开【Windows PowerShell】（管理员）模式，再运行就行了。</p><p>2.用【命令提示符】的话，反正右键用管理员身份运行，也是一样的。</p><p>3.在命令后面加上<code>--user</code>就行。<br>比如<code>pip install img2pdf</code>改成<code>pip install img2pdf --user</code>就行。</p>]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【Windows疑难杂症】打不开网页 解决方法</title>
      <link href="/2022/06/03/%E3%80%90Windows%E7%96%91%E9%9A%BE%E6%9D%82%E7%97%87%E3%80%91%E6%89%93%E4%B8%8D%E5%BC%80%E7%BD%91%E9%A1%B5/"/>
      <url>/2022/06/03/%E3%80%90Windows%E7%96%91%E9%9A%BE%E6%9D%82%E7%97%87%E3%80%91%E6%89%93%E4%B8%8D%E5%BC%80%E7%BD%91%E9%A1%B5/</url>
      
        <content type="html"><![CDATA[<p>当碰到不能打开网页的时候（网络是正常的，别的设备正常上网），</p><p><strong>情况一</strong>：先看看QQ能不能上，能上QQ，不能打开网页，表示是DNS问题，修改下DNS就行了。<br>比如DNS用114.114.114.114或者8.8.8.8，这些公共的DNS试一下。就解决了。</p><p><strong>情况二</strong>：QQ能上，DNS设置也没问题（修改过），ping外网也是通的，但是就是打不开网页。换了浏览器也不行，排除浏览器问题。</p><p>那就是“疑难杂症”类问题了。</p><a id="more"></a><p>别的也不管了，反正就重置Winsock目录以恢复默认网络状态。</p><p>直接用管理员身份打开命令提示符，Win10/Win11用Windows PowerShell（管理员）就行，运行以下命令：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">netsh winsock reset</span><br></pre></td></tr></table></figure><p>提示“成功重置winsock目录，你必须重启计算机才能完成重置”，重启后，网页就可以正常打开了。</p><h2 id="v2rayN使用问题"><a href="#v2rayN使用问题" class="headerlink" title="v2rayN使用问题"></a>v2rayN使用问题</h2><p>其实我碰到的是v2rayN使用的问题。</p><p>这个小工具，以前是经常碰到用到的1080端口被占用的问题。用以下命令查一下占用1080端口的进程的PID号，然后就知道是哪个进程占用，结束一下进程就行了。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">netstat -aon|findstr <span class="string">&quot;1080&quot;</span></span><br></pre></td></tr></table></figure><p>上一次碰到，提示”<strong>failed to start app/proxyman/inbound: failed to listen tcp on 1080</strong>“，启动不了。明明没有进程占用1080端口，反正就是启动不了。</p><p>于是，就试了下上面那个命令，<code>netsh winsock reset</code>，重启一下电脑就正常了。</p><p>这次又碰到了，更奇怪，看<strong>v2rayN的后台启动正常，accept都正常，但是浏览器上相关的网页就是打不开</strong>。就很奇怪。</p><p>于是，又试了下上面那个命令，<code>netsh winsock reset</code>，重启一下电脑就正常了。</p><p>不过，到网上有说，这个命令的好处是可以重新初始化网络环境，以解决由于软件冲突、病毒原因造成的参数错误问题。</p><p>但是，当执行完winsock的命令重启计算机后，需要重新配置IP。局域网的话需要DNS选择一下，另外因机而异可能会断网或网速变慢……（这样的问题我没碰到过，ip和dns都是自动获取的，还是跟原来一样、正常，网速也是如常）</p>]]></content>
      
      
      <categories>
          
          <category> Windows </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Windows </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Excel中提取身份证的出生日期和性别</title>
      <link href="/2022/06/03/Excel%E4%B8%AD%E6%8F%90%E5%8F%96%E8%BA%AB%E4%BB%BD%E8%AF%81%E7%9A%84%E5%87%BA%E7%94%9F%E6%97%A5%E6%9C%9F%E5%92%8C%E6%80%A7%E5%88%AB/"/>
      <url>/2022/06/03/Excel%E4%B8%AD%E6%8F%90%E5%8F%96%E8%BA%AB%E4%BB%BD%E8%AF%81%E7%9A%84%E5%87%BA%E7%94%9F%E6%97%A5%E6%9C%9F%E5%92%8C%E6%80%A7%E5%88%AB/</url>
      
        <content type="html"><![CDATA[<p>18位的身份证号中，前6位是地址码，第7位开始的8位是出生年月日，第17位（倒数第2位）是性别（偶数是女性，奇数是男性）。</p><p>Excel截取字符串很简单，用一个MID函数就能取出来了。</p><p>只是对应出生日期（日期格式）、和性别要做个判断。</p><a id="more"></a><h2 id="求出生日期"><a href="#求出生日期" class="headerlink" title="求出生日期"></a>求出生日期</h2><h3 id="1-公式求出出生日期（身份证号在A2单元格）："><a href="#1-公式求出出生日期（身份证号在A2单元格）：" class="headerlink" title="1.公式求出出生日期（身份证号在A2单元格）："></a>1.公式求出出生日期（身份证号在A2单元格）：</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#x3D;MID(A2,7,8)</span><br></pre></td></tr></table></figure><p>用公式获取到出生日期后，再复制值出来是文本格式，直接设置单元格格式会日期格式是没用的。如下图：<br><img                       lazyload                     src="/images/loading.svg"                     data-src="/img/Excel_id_card_1.png"                                     ></p><h3 id="2-文本转换成日期格式"><a href="#2-文本转换成日期格式" class="headerlink" title="2.文本转换成日期格式"></a>2.文本转换成日期格式</h3><p>就需要用【数据】-&gt;【分列】，把数据格式选成【日期】，最后记得选一下整个目标区域就行了。<br><img                       lazyload                     src="/images/loading.svg"                     data-src="/img/Excel_id_card_2.png"                                     ></p><p>完成后，如下图，已经是日期格式了，想改成啥日期格式都行。<br><img                       lazyload                     src="/images/loading.svg"                     data-src="/img/Excel_id_card_3.png"                                     ></p><p>在Excel中，当遇到日期是文本（字符串）的时候，如果想改成自己想要的日期格式，都是可以借助这个数据中的【分列】功能的。</p><h2 id="求性别"><a href="#求性别" class="headerlink" title="求性别"></a>求性别</h2><p>最终公式为：<code>=IF(MOD(MID(A2,17,1),2)=0,&quot;女&quot;,&quot;男&quot;)</code></p><p>身份证第17位如果是偶数，表示女性；是奇数，则表示男性。</p><h3 id="1-MID函数取身份证第17位（身份证号在A2单元格）："><a href="#1-MID函数取身份证第17位（身份证号在A2单元格）：" class="headerlink" title="1.MID函数取身份证第17位（身份证号在A2单元格）："></a>1.MID函数取身份证第17位（身份证号在A2单元格）：</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#x3D;MID(A2,17,1)</span><br></pre></td></tr></table></figure><h3 id="2-用MOD函数取余数"><a href="#2-用MOD函数取余数" class="headerlink" title="2.用MOD函数取余数"></a>2.用MOD函数取余数</h3><p>MOD(5,2) 表示5除2取余数，结果为1。</p><p>所以把取出的身份证第17位除2取余数。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#x3D;MOD(MID(A2,17,1),2)</span><br></pre></td></tr></table></figure><h3 id="3-用IF函数判断是否为偶数"><a href="#3-用IF函数判断是否为偶数" class="headerlink" title="3.用IF函数判断是否为偶数"></a>3.用IF函数判断是否为偶数</h3><p>如果除2的余数为0，是女性；否则，是男性。<br>IF(1=0,”女”,”男”) 表示如果1=0，则结果是女，否则是男。</p><p>所以把MOD函数取的余数进行判断，是否等于0。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#x3D;IF(MOD(MID(A2,17,1),2)&#x3D;0,&quot;女&quot;,&quot;男&quot;)</span><br></pre></td></tr></table></figure><p>PS.Excel中常用函数应用介绍：<a href="#">Post not found: 【不断更新系列】Excel常用函数</a></p>]]></content>
      
      
      <categories>
          
          <category> Office </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Excel </tag>
            
            <tag> Office </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Termius破解方法（Windows版）</title>
      <link href="/2022/06/03/Termius%E7%A0%B4%E8%A7%A3-Windows%E7%89%88/"/>
      <url>/2022/06/03/Termius%E7%A0%B4%E8%A7%A3-Windows%E7%89%88/</url>
      
        <content type="html"><![CDATA[<p>Termius是一个挺好用的SSH客户端，有全平台版本。MacOS、Windows、Linux，还有IOS、Android。</p><p>软件有免费版和付费版，免费版就已经提供SSH功能，满足连接并操作Linux服务器的需求。</p><p>免费版的缺点是不能用SFTP，也不能云同步。这不能用SFTP就挺麻烦的，现在用的都是XShell+Xftp的免费版，起码日常用用是够用的。然后收费还是订阅的制（更贵了），不是专门运维人员，自己用用，感觉太贵了。</p><a id="more"></a><p>所以，为了用用SFTP功能，看了下网上破解的方法。就试了下。</p><p>提前说明一下：</p><blockquote><p>目前下载的最新版：7.41.3版本，里面文件的方法啥的都变了，所以不能用以下方便破解了。<br>看别人用7.26.2的版本还能找到这个js文件里破解的，于是下载了个旧版本，7.26.2之前的版本。（意思就是7.26.2之前的版本可以用此方便尝试破解，之后就不能保证了。）</p></blockquote><h2 id="一、工具准备"><a href="#一、工具准备" class="headerlink" title="一、工具准备"></a>一、工具准备</h2><h3 id="1-VS-Code（需安装Prettier插件）"><a href="#1-VS-Code（需安装Prettier插件）" class="headerlink" title="1.VS Code（需安装Prettier插件）"></a>1.VS Code（需安装Prettier插件）</h3><p>用来打开一个js文件，Prettier插件主要是让js文件格式化显示的，这样方便查看。</p><p>我这原来就有VS Code，安装下插件就行了。<br>VS Code官方下载地址：<a class="link"   href="https://code.visualstudio.com/docs/?dv=win" >https://code.visualstudio.com/docs/?dv=win<i class="fas fa-external-link-alt"></i></a></p><h3 id="2-Node-js"><a href="#2-Node-js" class="headerlink" title="2.Node.js"></a>2.Node.js</h3><p>用来安装asar，然后后面解压asar文件的。</p><p>1).下载安装Node.js</p><p>官网下载地址：<a class="link"   href="https://nodejs.org/en/download/" >https://nodejs.org/en/download/<i class="fas fa-external-link-alt"></i></a> ，下载对应版本安装就行。<br>（怕有问题，直接搜索安装教程照着来就行）</p><p>2).安装asar</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install -g asar</span><br></pre></td></tr></table></figure><p>Hexo博客的，原来也都有安装Node.js，所以直接安装一下asar就行了。</p><h3 id="3-Termius安装包"><a href="#3-Termius安装包" class="headerlink" title="3.Termius安装包"></a>3.Termius安装包</h3><h2 id="二、破解Termius"><a href="#二、破解Termius" class="headerlink" title="二、破解Termius"></a>二、破解Termius</h2><p>看了下网上大佬的破解方法，就是：</p><ul><li>找到resources目录下有个app.asar的包，解压出来后修改里面有个ui-process.js文件；</li><li>找到js文件里 isProUser（判断是否Pro收费用户）的地方，直接让方法返回True；</li><li>最后再改一下用户名，直接定义个字符串。</li></ul><h3 id="1-安装Termius"><a href="#1-安装Termius" class="headerlink" title="1.安装Termius"></a>1.安装Termius</h3><p>直接【先断网】，再安装，这样也不会把老版本强制升级什么了。</p><h3 id="2-解压app-asar"><a href="#2-解压app-asar" class="headerlink" title="2.解压app.asar"></a>2.解压app.asar</h3><p>在安装好的Termius快捷方式上，右键-&gt;属性，找到安装路径，然后进入resources目录。<br>一般默认路径为：<code>C:\Users\[user_name]\AppData\Local\Programs\Termius\resources</code></p><p>这个目录下有一个app.asar，还有一个app-update.yml（看名字就是软件更新相关）文件先删除。</p><p>在这个目录下，用命令行运行以下命令解压app.asar，得到一个app目录：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">asar e app.asar app</span><br></pre></td></tr></table></figure><h3 id="3-VS-Code打开ui-process-js并格式化"><a href="#3-VS-Code打开ui-process-js并格式化" class="headerlink" title="3.VS Code打开ui-process.js并格式化"></a>3.VS Code打开ui-process.js并格式化</h3><p>用VS Code（需安装Prettier插件）打开 <code>resources\app\js\ui-process.js</code>文件。</p><p>然后按 Ctrl+Shift+P，输入format搜索，选择 Format Document（格式化文档）。</p><h3 id="4-ui-process-js中修改isProUser相关处"><a href="#4-ui-process-js中修改isProUser相关处" class="headerlink" title="4.ui-process.js中修改isProUser相关处"></a>4.ui-process.js中修改isProUser相关处</h3><p>等完成格式化后，Ctrl+F，搜索字段<code>isProUser</code>，找到类似下图所示的地方，不同版本函数会有不一样的。<br><img                       lazyload                     src="/images/loading.svg"                     data-src="/img/Termius_crack_1.png"                                     ></p><p>然后，按Ctrl加鼠标单击，跳转至该函数处，反正把内容直接改成<code>return true;</code>，如下图所示：<br><img                       lazyload                     src="/images/loading.svg"                     data-src="/img/Termius_crack_2.png"                                     ></p><h3 id="5-ui-process-js中修改username"><a href="#5-ui-process-js中修改username" class="headerlink" title="5.ui-process.js中修改username"></a>5.ui-process.js中修改username</h3><p>搜索字段<code>user.username</code>，把这里return后面直接写个字符串，任意值，随便的。例如：<br><img                       lazyload                     src="/images/loading.svg"                     data-src="/img/Termius_crack_3.png"                                     ></p><p>最后保存一下。</p><p>再打开Termius的时候，发现SFTP功能就可以用了。</p><p>PS.ui-process.js是全平台通用的，只需要修改一次。如果是mac版本，反正同一个版本号的话，直接把这个文件覆盖原安装目录下的ui-process.js文件就行。</p>]]></content>
      
      
      <categories>
          
          <category> Software </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Windows </tag>
            
            <tag> Software </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Python 生成二维码图片</title>
      <link href="/2022/06/01/Python%E7%94%9F%E6%88%90%E4%BA%8C%E7%BB%B4%E7%A0%81%E5%9B%BE%E7%89%87/"/>
      <url>/2022/06/01/Python%E7%94%9F%E6%88%90%E4%BA%8C%E7%BB%B4%E7%A0%81%E5%9B%BE%E7%89%87/</url>
      
        <content type="html"><![CDATA[<p>直接有第三方的库：qrcode<br>地址：<a class="link"   href="https://pypi.org/project/qrcode/" >https://pypi.org/project/qrcode/<i class="fas fa-external-link-alt"></i></a></p><p>生成简单二维码是特别简单，就两步。带logo的麻烦一点，主要是要考虑logo图片的大小啥的。</p><a id="more"></a><h2 id="安装qrcode包和PIL包"><a href="#安装qrcode包和PIL包" class="headerlink" title="安装qrcode包和PIL包"></a>安装qrcode包和PIL包</h2><h3 id="1-安装qrcode包"><a href="#1-安装qrcode包" class="headerlink" title="1.安装qrcode包"></a>1.安装qrcode包</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install qrcode</span><br></pre></td></tr></table></figure><h3 id="2-安装PIL包"><a href="#2-安装PIL包" class="headerlink" title="2.安装PIL包"></a>2.安装PIL包</h3><p>如果还没有安装PIL的库，运行的时候也会报错，所以也需要安装PIL的库的；而且要用到带Logo的二维码还是要用到图片，要用到PIL的Image对象，所以还是一起安装了。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install Pillow</span><br></pre></td></tr></table></figure><h2 id="生成普通二维码"><a href="#生成普通二维码" class="headerlink" title="生成普通二维码"></a>生成普通二维码</h2><p>就简单的两步：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">qrcode.make(<span class="built_in">str</span>)：<span class="built_in">str</span>为二维码包含的文字信息,也可以是网页链接，返回二维码对象</span><br><span class="line">qrcode.save(<span class="built_in">str</span>)：将二维码以<span class="built_in">str</span>为名保存到本地目录（注意文件的扩展名）</span><br><span class="line">qrcode.show()：运行时展示二维码图案</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> PIL <span class="keyword">import</span> Image</span><br><span class="line"><span class="keyword">import</span> qrcode, os</span><br><span class="line"></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string"># pip install qrcode 二维码库</span></span><br><span class="line"><span class="string"># pip install Pillow 如果报没有这个PIL库，需要安装一下</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 生成普通二维码</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">generate_qrcode</span>(<span class="params">content, qcode_pic_path</span>):</span></span><br><span class="line">    <span class="comment"># 创建包含信息的二维码对象</span></span><br><span class="line">    img = qrcode.make(content)</span><br><span class="line">    img.save(qcode_pic_path) <span class="comment"># 二维码保存</span></span><br><span class="line">    <span class="comment"># img.show() # 展示二维码</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span>():</span></span><br><span class="line">    content = <span class="string">&#x27;https://www.hduzn.cn/&#x27;</span></span><br><span class="line">    qcode_pic_path = <span class="string">&#x27;hello.png&#x27;</span> <span class="comment"># 生成二维码保存的图片</span></span><br><span class="line">    generate_qrcode(content, qcode_pic_path) <span class="comment"># 生成普通二维码</span></span><br><span class="line"></span><br><span class="line">main()</span><br><span class="line"><span class="comment"># print(os.getcwd()) # 返回当前工作目录</span></span><br></pre></td></tr></table></figure><h2 id="生成带logo的二维码"><a href="#生成带logo的二维码" class="headerlink" title="生成带logo的二维码"></a>生成带logo的二维码</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> PIL <span class="keyword">import</span> Image</span><br><span class="line"><span class="keyword">import</span> qrcode, os</span><br><span class="line"></span><br><span class="line"><span class="comment"># 生成普通二维码</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">generate_qrcode</span>(<span class="params">content, qcode_pic_path</span>):</span></span><br><span class="line">    <span class="comment"># 创建包含信息的二维码对象</span></span><br><span class="line">    img = qrcode.make(content)</span><br><span class="line">    img.save(qcode_pic_path) <span class="comment"># 二维码保存</span></span><br><span class="line">    <span class="comment"># img.show() # 展示二维码</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 生成带Logo的二维码</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">generate_qrcode_logo</span>(<span class="params">content, logo_pic, qcode_pic_path</span>):</span></span><br><span class="line">    <span class="comment"># QRCode() 创建对象</span></span><br><span class="line">    <span class="comment"># version：值为1~40的整数，控制二维码的大小（最小值是1，是个21×21的矩阵）</span></span><br><span class="line">    <span class="comment"># box_size：控制二维码中每个小格子包含的像素数</span></span><br><span class="line">    <span class="comment"># border：控制边框（二维码与图片边界的距离）包含的格子数（默认为4)</span></span><br><span class="line">    <span class="comment"># error_correction：控制二维码的错误纠正功能。可取值下列4个常量： </span></span><br><span class="line">    <span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">    qrcode.constants.ERROR_CORRECT_X：</span></span><br><span class="line"><span class="string">        1. X=L时，大约7%或更少的错误能被纠正。 </span></span><br><span class="line"><span class="string">        2. X=M（默认）时，大约15%或更少的错误能被纠正。</span></span><br><span class="line"><span class="string">        3. X=Q时，25%以下的错误会被纠正。</span></span><br><span class="line"><span class="string">        4. X=H时，大约30%或更少的错误能被纠正。</span></span><br><span class="line"><span class="string">    &#x27;&#x27;&#x27;</span></span><br><span class="line">    qr = qrcode.QRCode(</span><br><span class="line">        version=<span class="number">5</span>,</span><br><span class="line">        error_correction=qrcode.constants.ERROR_CORRECT_H,</span><br><span class="line">        box_size=<span class="number">8</span>,</span><br><span class="line">        border=<span class="number">4</span> )</span><br><span class="line">    qr.add_data(content) <span class="comment"># 向二维码中添加信息</span></span><br><span class="line">    qr.make(fit=<span class="literal">True</span>)</span><br><span class="line"></span><br><span class="line">    img = qr.make_image()</span><br><span class="line">    img = img.convert(<span class="string">&#x27;RGBA&#x27;</span>) <span class="comment"># 二维码设置为彩色</span></span><br><span class="line">    <span class="comment"># 二维码尺寸</span></span><br><span class="line">    img_w, img_h = img.size</span><br><span class="line">    factor = <span class="number">4</span> <span class="comment"># 默认LOGO最大设为图片的1/4</span></span><br><span class="line">    <span class="comment"># 最大logo尺寸</span></span><br><span class="line">    size_w = <span class="built_in">int</span>(img_w/factor)</span><br><span class="line">    size_h = <span class="built_in">int</span>(img_h/factor)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">with</span> Image.<span class="built_in">open</span>(logo_pic) <span class="keyword">as</span> logo:</span><br><span class="line">        logo_w,logo_h = logo.size</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> logo_w &gt; size_w <span class="keyword">or</span> logo_h &gt; size_h:</span><br><span class="line">            logo_w = size_w</span><br><span class="line">            logo_h = size_h</span><br><span class="line">        </span><br><span class="line">        logo = logo.resize((logo_w, logo_h),Image.ANTIALIAS).convert(<span class="string">&#x27;RGBA&#x27;</span>)</span><br><span class="line">        l_w = <span class="built_in">int</span>((img_w-logo_w)/<span class="number">2</span>)</span><br><span class="line">        l_h = <span class="built_in">int</span>((img_h-logo_h)/<span class="number">2</span>)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 替换指定位置</span></span><br><span class="line">        img.paste(logo,(l_w,l_h),logo)</span><br><span class="line">        img.save(qcode_pic_path) <span class="comment"># 二维码保存</span></span><br><span class="line">        img.show() <span class="comment"># 展示二维码</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span>():</span></span><br><span class="line">    content = <span class="string">&#x27;https://www.hduzn.cn/&#x27;</span></span><br><span class="line">    logo_pic = <span class="string">&#x27;.\logo.png&#x27;</span></span><br><span class="line"></span><br><span class="line">    qcode_pic_path = <span class="string">&#x27;hello.png&#x27;</span> <span class="comment"># 生成二维码保存的图片</span></span><br><span class="line">    <span class="comment"># generate_qrcode(content, qcode_pic_path) # 生成普通二维码</span></span><br><span class="line">    generate_qrcode_logo(content, logo_pic, qcode_pic_path) <span class="comment"># 生成带Logo的二维码</span></span><br><span class="line"></span><br><span class="line">main()</span><br><span class="line"><span class="comment"># print(os.getcwd()) # 返回当前工作目录</span></span><br></pre></td></tr></table></figure><p>带logo的二维码效果如图所示：<br><img                       lazyload                     src="/images/loading.svg"                     data-src="/img/Python_generate_qrcode.png"                                     ></p>]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Python 批量修改图片尺寸为一寸/二寸照</title>
      <link href="/2022/05/30/Python-%E6%89%B9%E9%87%8F%E4%BF%AE%E6%94%B9%E5%9B%BE%E7%89%87%E5%B0%BA%E5%AF%B8%E4%B8%BA%E4%B8%80%E5%AF%B8-%E4%BA%8C%E5%AF%B8%E7%85%A7/"/>
      <url>/2022/05/30/Python-%E6%89%B9%E9%87%8F%E4%BF%AE%E6%94%B9%E5%9B%BE%E7%89%87%E5%B0%BA%E5%AF%B8%E4%B8%BA%E4%B8%80%E5%AF%B8-%E4%BA%8C%E5%AF%B8%E7%85%A7/</url>
      
        <content type="html"><![CDATA[<p>关于批量修改图片尺寸，之前已经写了一篇文章：<a href="/2022/05/10/Python-%E6%89%B9%E9%87%8F%E4%BF%AE%E6%94%B9%E5%9B%BE%E7%89%87%E5%B0%BA%E5%AF%B8/" title="Python 批量修改图片尺寸">Python 批量修改图片尺寸</a>。是通过修改分辨率去修改的。</p><p>那怎么修改图片尺寸为一寸照、二寸照呢？不能直接照搬网上搜索出来的结果。<br>比如网上说一寸照大小是 <code>2.5cm*3.5cm</code> 或者 <code>295像素*413像素</code>；<br>二寸照是<code>3.5cm*5.3cm</code>或者<code>413像素*626像素</code>。</p><p>你如果直接把像素大小按上面的改可能就会有问题。按上面的分辨率修改出来的尺寸打开一看不对。</p><a id="more"></a><p>这里涉及到一个 dpi 分辨率 的概念。</p><h2 id="dpi的概念"><a href="#dpi的概念" class="headerlink" title="dpi的概念"></a>dpi的概念</h2><p>dots per inch，每英寸点数。</p><p>含义搞不那么清楚也没关系，看一张图就了解了。（在Photoshop里看的）<br><img                       lazyload                     src="/images/loading.svg"                     data-src="/img/Python_image_resize_dpi_1.png"                                     ></p><p>看上面的图片，当图像的大小是：<code>2.5cm*3.5cm</code>时，分辨率（dpi）不同，宽度高度的像素就不同。</p><p>网上经常一搜就能看到的一寸二寸照片的宽高度像素比其实是分辨率（dpi=300）的时候。</p><p>二寸照dpi=96的时候，像素大概是：<code>133像素*200像素</code><br><img                       lazyload                     src="/images/loading.svg"                     data-src="/img/Python_image_resize_dpi_2.png"                                     ></p><h2 id="单张图片修改尺寸和dpi"><a href="#单张图片修改尺寸和dpi" class="headerlink" title="单张图片修改尺寸和dpi"></a>单张图片修改尺寸和dpi</h2><p>那我们用Python修改图片尺寸，用PIL库的Image对象的resize修改后，其实就保存的时候设一下dpi就行了。</p><p>代码如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> PIL <span class="keyword">import</span> Image</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"></span><br><span class="line"><span class="comment"># 单张图片修改尺寸和dpi</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">change_pic_size_dpi</span>(<span class="params">picfile, outdir, width, height, dpi_float</span>):</span></span><br><span class="line">    img = Image.<span class="built_in">open</span>(picfile)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        new_img = img.resize((width, height), Image.BILINEAR)</span><br><span class="line">        new_img.save(os.path.join(outdir, os.path.basename(picfile)), dpi=(dpi_float,dpi_float))</span><br><span class="line">    <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">        <span class="built_in">print</span>(e)</span><br><span class="line"></span><br><span class="line">change_pic_size_dpi(picfile, outdir, <span class="number">96</span>, <span class="number">132</span>, dpi_float=<span class="number">96.0</span>)</span><br></pre></td></tr></table></figure><p>其实就第7行，Image.save的时候，添加dpi的参数设置就行了。<br>注意对应的dpi的宽高度的像素值不同，不能直接照搬网上的。</p><p>完整的批量修改的代码看上一篇文章的就行，反正就改了这一句，添加一个 dpi的参数就行，注意dpi用浮点数，带个小数点。代码这里就不贴了。</p>]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Docker Dockerfile文件详解（制作自己的镜像）</title>
      <link href="/2022/05/29/Docker-Dockerfile%E6%96%87%E4%BB%B6%E8%AF%A6%E8%A7%A3%EF%BC%88%E5%88%B6%E4%BD%9C%E8%87%AA%E5%B7%B1%E7%9A%84%E9%95%9C%E5%83%8F%EF%BC%89/"/>
      <url>/2022/05/29/Docker-Dockerfile%E6%96%87%E4%BB%B6%E8%AF%A6%E8%A7%A3%EF%BC%88%E5%88%B6%E4%BD%9C%E8%87%AA%E5%B7%B1%E7%9A%84%E9%95%9C%E5%83%8F%EF%BC%89/</url>
      
        <content type="html"><![CDATA[<p>镜像的定制，实际上就是定制每一层所添加的配置、文件。我们可以把每一层修改、安装、构建、操作的命令都写入一个脚本，用这个脚本来构建、定制镜像。这个脚本就是 Dockerfile。</p><p>Dockerfile 是一个文本文件，其内包含了一条条的指令(Instruction)，每一条指令构建一层，因此每一条指令的内容，就是描述该层应当如何构建。</p><a id="more"></a><h2 id="一、举例：创建Flask项目环境镜像"><a href="#一、举例：创建Flask项目环境镜像" class="headerlink" title="一、举例：创建Flask项目环境镜像"></a>一、举例：创建Flask项目环境镜像</h2><p>比如，我自己有个Python的项目，是个Flask项目，我想把它放到服务器上，就是个Web项目。</p><p>那我们怎么在一台服务器上快速、方便的把本地的Flask开发环境部署上去呢？比如本地用的Python版本、以前Flask相关的库，以及其它用到的库。就可以用Docker制作一个自己的镜像。</p><p>Flask开发环境的镜像制作好了，其实就是一个Dockerfile 文件，之后就可以随意部署到带Docker的服务器上去了。贼方便。</p><p>还有，就是我想制作的是一个Flask项目的环境镜像，所以代码这些无所谓的，只要环境能制作好就行，所以在建这个镜像的时候没有复制项目文件这些，也用不着运行。<br>因为这样一个通用的Flask镜像，后续项目文件自己上传就行。</p><p><strong>Flask项目结构（样例）</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">flask_proj_demo</span><br><span class="line">├── app</span><br><span class="line">│   ├── templates</span><br><span class="line">│       └── index.html</span><br><span class="line">│   ├── app.py</span><br><span class="line">│   ├── Dockerfile</span><br><span class="line">│   └── requirements.txt</span><br></pre></td></tr></table></figure><h3 id="1-生成-requirements-txt（本地）"><a href="#1-生成-requirements-txt（本地）" class="headerlink" title="1.生成 requirements.txt（本地）"></a>1.生成 requirements.txt（本地）</h3><p>进入flask_proj_demo项目目录的app目录下，运行如下命令，就可以生成项目环境的 requirements.txt 文件。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip freeze &gt; requirements.txt</span><br></pre></td></tr></table></figure><p><strong>requirements.txt 举例</strong>：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">click&#x3D;&#x3D;8.0.1</span><br><span class="line">colorama&#x3D;&#x3D;0.4.4</span><br><span class="line">et-xmlfile&#x3D;&#x3D;1.1.0</span><br><span class="line">Flask&#x3D;&#x3D;2.0.1</span><br><span class="line">Flask-MySQLdb&#x3D;&#x3D;0.2.0</span><br><span class="line">Flask-SQLAlchemy&#x3D;&#x3D;2.5.1</span><br><span class="line">Flask-WTF&#x3D;&#x3D;0.15.1</span><br><span class="line">greenlet&#x3D;&#x3D;1.1.0</span><br><span class="line">itsdangerous&#x3D;&#x3D;2.0.1</span><br><span class="line">Jinja2&#x3D;&#x3D;3.0.1</span><br><span class="line">MarkupSafe&#x3D;&#x3D;2.0.1</span><br><span class="line">mysqlclient&#x3D;&#x3D;2.0.3</span><br><span class="line">numpy&#x3D;&#x3D;1.22.2</span><br><span class="line">openpyxl&#x3D;&#x3D;3.0.9</span><br><span class="line">pandas&#x3D;&#x3D;1.4.1</span><br><span class="line">PyMySQL&#x3D;&#x3D;1.0.2</span><br><span class="line">python-dateutil&#x3D;&#x3D;2.8.2</span><br><span class="line">pytz&#x3D;&#x3D;2021.3</span><br><span class="line">six&#x3D;&#x3D;1.16.0</span><br><span class="line">SQLAlchemy&#x3D;&#x3D;1.4.21</span><br><span class="line">Werkzeug&#x3D;&#x3D;2.0.1</span><br><span class="line">WTForms&#x3D;&#x3D;2.3.3</span><br><span class="line">xlrd&#x3D;&#x3D;2.0.1</span><br><span class="line">pandas&#x3D;&#x3D;1.4.1</span><br><span class="line">requests&#x3D;&#x3D;2.27.1</span><br><span class="line">selenium&#x3D;&#x3D;4.1.3</span><br><span class="line">urllib3&#x3D;&#x3D;1.26.9</span><br></pre></td></tr></table></figure><p>可以看到除了带Flask中常用的库，也带了mysql和selenium、pandas这些，这种随你自己就行，你自己项目经常用哪些就放哪些。生成的requirements.txt文件中如果有些用不着，也可以删除的。</p><h3 id="2-用Dockerfile-文件创建镜像"><a href="#2-用Dockerfile-文件创建镜像" class="headerlink" title="2.用Dockerfile 文件创建镜像"></a>2.用Dockerfile 文件创建镜像</h3><p>Dockerfile文件内容如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"># Use an official Python runtime as an image</span><br><span class="line"># FROM：依赖的基础镜像 python3.9版本</span><br><span class="line">FROM python:3.9</span><br><span class="line"></span><br><span class="line"># Sets the working directory for following COPY and CMD instructions</span><br><span class="line"># Notice we haven’t created a directory by this name - this instruction</span><br><span class="line"># creates a directory with this name if it doesn’t exist</span><br><span class="line"># WORKDIR：设置容器启动后的默认运行目录 &#x2F;app</span><br><span class="line">WORKDIR &#x2F;app</span><br><span class="line"></span><br><span class="line"># copy code</span><br><span class="line"># COPY . &#x2F;app</span><br><span class="line"># COPY：复制文件到容器的&#x2F;app目录</span><br><span class="line">COPY requirements.txt &#x2F;app</span><br><span class="line"></span><br><span class="line"># RUN python -m pip install --upgrade pip</span><br><span class="line"># RUN pip install --trusted-host pypi.org --trusted-host pypi.python.org --trusted-host&#x3D;files.pythonhosted.org --no-cache-dir -r requirements.txt</span><br><span class="line"># RUN：运行命令，安装依赖 requirements.txt中的库</span><br><span class="line">RUN pip3 install -i https:&#x2F;&#x2F;pypi.tuna.tsinghua.edu.cn&#x2F;simple --upgrade pip </span><br><span class="line">RUN pip3 install -i https:&#x2F;&#x2F;pypi.tuna.tsinghua.edu.cn&#x2F;simple -r requirements.txt </span><br><span class="line"></span><br><span class="line"># The EXPOSE instruction indicates the ports on which a container</span><br><span class="line"># EXPOSE：端口暴露 我这里app.py中run的port&#x3D;5020，所以暴露的是这个端口</span><br><span class="line">EXPOSE 5020</span><br><span class="line"></span><br><span class="line"># Run app.py when the container launches</span><br><span class="line"># COPY app.py &#x2F;app</span><br><span class="line"># CMD指令只能一个，是容器启动后执行的命令，算是程序的入口；如果需要运行其他命令可以用&amp;&amp;连接</span><br><span class="line"># CMD [&quot;python&quot;, &quot;app.py&quot;]</span><br></pre></td></tr></table></figure><p>然后，就把这整个项目的文件上传到服务器上。我这直接用Xftp上传到了 <code>/root/flask/flask_proj_demo/app</code>目录。</p><p>最后用SSH连接服务器，进入到 /root/flask/flask_proj_demo/app 目录，运行以下命令生成镜像：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker build -t flask_demo:v1.0 .</span><br></pre></td></tr></table></figure><blockquote><p>-t 设置镜像名字和版本号</p></blockquote><p>执行完，就可以用命令 <code>docker images</code>看到以下镜像了（当然也有python3.9的镜像）。</p><h2 id="二、Dockerfile-指令详解"><a href="#二、Dockerfile-指令详解" class="headerlink" title="二、Dockerfile 指令详解"></a>二、Dockerfile 指令详解</h2><h3 id="1-常用指令"><a href="#1-常用指令" class="headerlink" title="1.常用指令"></a>1.常用指令</h3><p>常用的基本上就是上面用到的那几个指令：</p><blockquote><p>FROM python:3.9：依赖的基础镜像 python3.9版本<br>WORKDIR /app：设置容器启动后的默认工作运行目录 /app<br>COPY . /app：复制当前目录下文件到容器的/app目录<br>RUN：执行命令<br>EXPOSE 5020：暴露5020端口<br>CMD：CMD指令只能一个，是容器启动后执行的命令，算是程序的入口</p></blockquote><h3 id="1-COPY-复制文件"><a href="#1-COPY-复制文件" class="headerlink" title="1.COPY 复制文件"></a>1.COPY 复制文件</h3><p>格式：<code>COPY [--chown=&lt;user&gt;:&lt;group&gt;] &lt;源路径&gt;... &lt;目标路径&gt;</code><br><code>--chown=&lt;user&gt;:&lt;group&gt;</code> 参数来改变文件的所属用户及所属组。</p><p>COPY指令复制，源文件的各种元数据都会保留。</p><p>例子：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">COPY . &#x2F;app：复制当前目录下文件到容器的&#x2F;app目录</span><br><span class="line">COPY requirements.txt &#x2F;app：复制文件到容器的&#x2F;app目录</span><br><span class="line">COPY --chown&#x3D;abcuser:mygroup . &#x2F;app</span><br></pre></td></tr></table></figure><h3 id="2-ADD-更高级的复制文件"><a href="#2-ADD-更高级的复制文件" class="headerlink" title="2.ADD 更高级的复制文件"></a>2.ADD 更高级的复制文件</h3><p>ADD 指令和 COPY 的格式和性质基本一致。但是在 COPY 基础上增加了一些功能。</p><p><strong>比如 &lt;源路径&gt; 可以是一个 URL</strong>，<br>这种情况下，Docker 引擎会试图去下载这个链接的文件放到 &lt;目标路径&gt; 去。下载后的文件权限自动设置为 600，如果这并不是想要的权限，那么还需要增加额外的一层 RUN 进行权限调整，另外，如果下载的是个压缩包，需要解压缩，也一样还需要额外的一层 RUN 指令进行解压缩。<br>所以不如直接使用 RUN 指令，然后使用 wget 或者 curl 工具下载，处理权限、解压缩、然后清理无用文件更合理。<strong>因此，这个功能其实并不实用，而且不推荐使用。</strong></p><p><strong>如果 &lt;源路径&gt; 为一个 tar 压缩文件的话</strong>，<br>压缩格式为 gzip, bzip2 以及 xz 的情况下，ADD 指令将会自动解压缩这个压缩文件到 &lt;目标路径&gt; 去。</p><p>不过，按在Docker官方的 Dockerfile最佳实践文档中的要求，尽可能的使用COPY，因为 COPY 的语义很明确，就是复制文件而已，而 ADD 则包含了更复杂的功能，其行为也不一定很清晰。最适合使用 ADD 的场合，就是所提及的需要自动解压缩的场合。</p><p>所以除了需要自动解压的场合，一般用COPY就行。</p><h3 id="3-RUN-执行命令"><a href="#3-RUN-执行命令" class="headerlink" title="3.RUN 执行命令"></a>3.RUN 执行命令</h3><p>格式有两种：<br>shell 格式：<code>RUN &lt;命令&gt;</code>，就像直接在命令行中输入的命令一样。<br>exec 格式：<code>RUN [&quot;可执行文件&quot;, &quot;参数1&quot;, &quot;参数2&quot;]</code>，这更像是函数调用中的格式。</p><p>举例：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">RUN pip3 install -i https://pypi.tuna.tsinghua.edu.cn/simple --upgrade pip</span><br></pre></td></tr></table></figure><h3 id="4-CMD-指令"><a href="#4-CMD-指令" class="headerlink" title="4.CMD 指令"></a>4.CMD 指令</h3><p>CMD指令只能一个，是容器启动后执行的命令，算是程序的入口。</p><p>1).格式</p><p>格式和 RUN 相似，也是两种格式：<br>shell 格式：<code>CMD &lt;命令&gt;</code><br>exec 格式：<code>CMD [&quot;可执行文件&quot;, &quot;参数1&quot;, &quot;参数2&quot;...]</code></p><p>参数列表格式：CMD [“参数1”, “参数2”…]。在指定了 ENTRYPOINT 指令后，用 CMD 指定具体的参数。</p><p>2).举例</p><p>ubuntu 镜像默认的 CMD 是 <code>/bin/bash</code>，如果我们直接 <code>docker run -it ubuntu</code> 的话，会直接进入 bash。<br>我们也可以在运行时指定运行别的命令，如 <code>docker run -it ubuntu cat /etc/os-release</code>。这就是用 cat /etc/os-release 命令替换了默认的 /bin/bash 命令了，输出了系统版本信息。</p><p>在指令格式上，一般推荐使用 exec 格式，这类格式在解析时会被解析为 JSON 数组，因此一定要使用双引号 “，而不要使用单引号。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">CMD <span class="built_in">echo</span> <span class="variable">$HOME</span></span><br></pre></td></tr></table></figure><p>在实际执行中，会将其变更为：<code>CMD [ &quot;sh&quot;, &quot;-c&quot;, &quot;echo $HOME&quot; ]</code></p><p>3).容器中应用在前台执行（重点）</p><p>Docker 不是虚拟机，容器中的应用都应该以前台执行，而不是像虚拟机、物理机里面那样，用 systemd 去启动后台服务，容器内没有后台服务的概念。</p><p>如果CMD这样写：<code>CMD service nginx start</code>，就会有问题了。</p><p>发现容器执行后就立即退出了。甚至在容器内去使用 systemctl 命令结果却发现根本执行不了。</p><p>这就是因为没有搞明白前台、后台的概念，没有区分容器和虚拟机的差异，依旧在以传统虚拟机的角度去理解容器。</p><p>对于容器而言，其启动程序就是容器应用进程，容器就是为了主进程而存在的，主进程退出，容器就失去了存在的意义，从而退出，其它辅助进程不是它需要关心的东西。</p><p>而使用 <code>service nginx start</code> 命令，则是希望 upstart 来以后台守护进程形式启动 nginx 服务。而刚才说了 <code>CMD service nginx start</code> 会被理解为 <code>CMD [ &quot;sh&quot;, &quot;-c&quot;, &quot;service nginx start&quot;]</code>，因此主进程实际上是 sh。</p><p>那么当 <code>service nginx start</code> 命令结束后，sh 也就结束了，sh 作为主进程退出了，自然就会令容器退出。</p><p>正确的做法是直接执行 nginx 可执行文件，并且要求以前台形式运行。比如：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">CMD [<span class="string">&quot;nginx&quot;</span>, <span class="string">&quot;-g&quot;</span>, <span class="string">&quot;daemon off;&quot;</span>]</span><br></pre></td></tr></table></figure><h3 id="5-EXPOSE-暴露端口"><a href="#5-EXPOSE-暴露端口" class="headerlink" title="5.EXPOSE 暴露端口"></a>5.EXPOSE 暴露端口</h3><p>格式为：<code>EXPOSE &lt;端口1&gt; [&lt;端口2&gt;...]</code></p><p>EXPOSE 指令是声明容器运行时提供服务的端口，这只是一个声明，在容器运行时并不会因为这个声明应用就会开启这个端口的服务。</p><p>在 Dockerfile 中写入这样的声明有两个好处，一个是帮助镜像使用者理解这个镜像服务的守护端口，以方便配置映射；另一个用处则是在运行时使用随机端口映射时，也就是 <code>docker run -P</code> 时，会自动随机映射 EXPOSE 的端口。</p><p>要将 EXPOSE 和在运行时使用 <code>-p &lt;宿主端口&gt;:&lt;容器端口&gt;</code> 区分开来。<br><code>-p</code>，是映射宿主端口和容器端口，就是将容器的对应端口服务公开给外界访问；<br>而 EXPOSE 仅仅是声明容器打算使用什么端口而已，并不会自动在宿主进行端口映射。</p><h3 id="6-ENV-设置环境变量"><a href="#6-ENV-设置环境变量" class="headerlink" title="6.ENV 设置环境变量"></a>6.ENV 设置环境变量</h3><p>格式有两种：<br><code>ENV &lt;key&gt; &lt;value&gt;</code><br><code>ENV &lt;key1&gt;=&lt;value1&gt; &lt;key2&gt;=&lt;value2&gt;...</code></p><p>这个指令很简单，就是设置环境变量而已，无论是后面的其它指令，如 RUN，还是运行时的应用，都可以直接使用这里定义的环境变量。</p><p>比如举个简单的例子（Dockerfile中）：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">ENV NODE_VERSION 7.2.0</span><br><span class="line"></span><br><span class="line">RUN curl -SLO &quot;https:&#x2F;&#x2F;nodejs.org&#x2F;dist&#x2F;v$NODE_VERSION&#x2F;node-v$NODE_VERSION-linux-x64.tar.xz&quot; \</span><br><span class="line">  &amp;&amp; curl -SLO &quot;https:&#x2F;&#x2F;nodejs.org&#x2F;dist&#x2F;v$NODE_VERSION&#x2F;SHASUMS256.txt.asc&quot; \</span><br><span class="line">  &amp;&amp; gpg --batch --decrypt --output SHASUMS256.txt SHASUMS256.txt.asc \</span><br><span class="line">  &amp;&amp; grep &quot; node-v$NODE_VERSION-linux-x64.tar.xz\$&quot; SHASUMS256.txt | sha256sum -c - \</span><br><span class="line">  &amp;&amp; tar -xJf &quot;node-v$NODE_VERSION-linux-x64.tar.xz&quot; -C &#x2F;usr&#x2F;local --strip-components&#x3D;1 \</span><br><span class="line">  &amp;&amp; rm &quot;node-v$NODE_VERSION-linux-x64.tar.xz&quot; SHASUMS256.txt.asc SHASUMS256.txt \</span><br><span class="line">  &amp;&amp; ln -s &#x2F;usr&#x2F;local&#x2F;bin&#x2F;node &#x2F;usr&#x2F;local&#x2F;bin&#x2F;nodejsENV NODE_VERSION 7.2.0</span><br></pre></td></tr></table></figure><p>这里先定义了环境变量 NODE_VERSION，其后的 RUN 这层里，多次使用 $NODE_VERSION 来进行操作定制。</p><p>那将来升级镜像构建版本的时候，只需要更新 7.2.0 即可，Dockerfile 构建维护变得更轻松了。</p><p>下列指令支持环境变量展开： ADD、COPY、ENV、EXPOSE、FROM、LABEL、USER、WORKDIR、VOLUME、STOPSIGNAL、ONBUILD、RUN。</p><h3 id="7-VOLUME-定义匿名卷"><a href="#7-VOLUME-定义匿名卷" class="headerlink" title="7.VOLUME 定义匿名卷"></a>7.VOLUME 定义匿名卷</h3><p>格式为：<br><code>VOLUME &lt;路径&gt;</code><br><code>VOLUME [&quot;&lt;路径1&gt;&quot;, &quot;&lt;路径2&gt;&quot;...]</code></p><p>容器运行时应该尽量保持容器存储层不发生写操作，对于数据库类需要保存动态数据的应用，其数据库文件应该保存于卷(volume)中。</p><p>为了防止运行时用户忘记将动态文件所保存目录挂载为卷，在 Dockerfile 中，我们可以事先指定某些目录挂载为匿名卷，这样在运行时如果用户不指定挂载，其应用也可以正常运行，不会向容器存储层写入大量数据。</p><p>举个例子（Dockerfile中）：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">VOLUME &#x2F;data</span><br></pre></td></tr></table></figure><p>这里的 /data 目录就会在容器运行时自动挂载为匿名卷，任何向 /data 中写入的信息都不会记录进容器存储层，从而保证了容器存储层的无状态化。当然，运行容器时可以覆盖这个挂载设置。</p><p>比如，运行以下命令，就使用了 mydata 这个命名卷挂载到了 /data 这个位置，替代了 Dockerfile 中定义的匿名卷的挂载配置。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ docker run -d -v mydata:/data xxxx</span><br></pre></td></tr></table></figure><h3 id="8-其它指令"><a href="#8-其它指令" class="headerlink" title="8.其它指令"></a>8.其它指令</h3><p>还剩下一些其它的指令，这里就简单列一下了。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">USER：指定当前用户 # 格式：USER &lt;用户名&gt;[:&lt;用户组&gt;]</span><br><span class="line">ENTRYPOINT：入口点</span><br><span class="line">SHELL：指令 # 格式：SHELL [&quot;executable&quot;, &quot;parameters&quot;]</span><br><span class="line">HEALTHCHECK：健康检查 # 格式：HEALTHCHECK [选项] CMD &lt;命令&gt;</span><br><span class="line">ONBUILD：为他人作嫁衣裳 # 格式：ONBUILD &lt;其它指令&gt;</span><br><span class="line">LABEL：为镜像添加元数据</span><br><span class="line">ARG：构建参数 # 格式：ARG &lt;参数名&gt;[&#x3D;&lt;默认值&gt;]</span><br></pre></td></tr></table></figure><p>需要看具体的，网上一搜都有介绍，有Docker从入门到实践的文档：<a class="link"   href="https://yeasy.gitbook.io/docker_practice/image/dockerfile" >https://yeasy.gitbook.io/docker_practice/image/dockerfile<i class="fas fa-external-link-alt"></i></a></p><p>官方镜像的Dockerfile 参考典范：<a class="link"   href="https://github.com/docker-library/docs" >https://github.com/docker-library/docs<i class="fas fa-external-link-alt"></i></a><br>可以瞅瞅，参考参考。</p>]]></content>
      
      
      <categories>
          
          <category> Docker </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Docker </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Docker版Selenium使用方法</title>
      <link href="/2022/05/29/Docker%E7%89%88Selenium%E4%BD%BF%E7%94%A8%E6%96%B9%E6%B3%95/"/>
      <url>/2022/05/29/Docker%E7%89%88Selenium%E4%BD%BF%E7%94%A8%E6%96%B9%E6%B3%95/</url>
      
        <content type="html"><![CDATA[<p>Selenium 包含 3 大组件，Selenium IDE、Selenium WebDriver、Selenium Grid。<br>Selenium IDE：负责录制、回放脚本，模拟用户对页面的真实操作。<br>Selenium WebDriver：提供 API 来操作浏览器。<br>Selenium Grid：用于分布式自动化测试，可以控制多台机器、多个浏览器并行执行测试用例。</p><p>此文用的就是Docker版Selenium Grid，用的环境是：服务器CentOS8.2。</p><p><strong>Selenium Grid Docker</strong><br>官方文档：<a class="link"   href="https://github.com/SeleniumHQ/docker-selenium/blob/trunk/README.md" >https://github.com/SeleniumHQ/docker-selenium/blob/trunk/README.md<i class="fas fa-external-link-alt"></i></a></p><a id="more"></a><h2 id="一、pull需要的docker镜像"><a href="#一、pull需要的docker镜像" class="headerlink" title="一、pull需要的docker镜像"></a>一、pull需要的docker镜像</h2><p>使用到两个镜像：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">docker pull selenium/hub</span><br><span class="line">docker pull selenium/node-chrome</span><br></pre></td></tr></table></figure><p>selenium/node-chrome 是无界面的。</p><p>拉取完镜像后，可以用 <code>docker images</code> 查看所有镜像。</p><p>要想能看到实时运行界面，需要pull以下镜像：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker pull selenium/standalone-chrome-debug</span><br></pre></td></tr></table></figure><h2 id="二、创建容器"><a href="#二、创建容器" class="headerlink" title="二、创建容器"></a>二、创建容器</h2><h3 id="1-创建一个新的-Docker-网络"><a href="#1-创建一个新的-Docker-网络" class="headerlink" title="1.创建一个新的 Docker 网络"></a>1.创建一个新的 Docker 网络</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker network create my-grid</span><br></pre></td></tr></table></figure><p>可以通过 <code>docker network ls</code>命令查看结果。</p><h3 id="1-Hub节点的容器"><a href="#1-Hub节点的容器" class="headerlink" title="1.Hub节点的容器"></a>1.Hub节点的容器</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run -d -p 4442-4444:4442-4444 --net my-grid --name selen-hub selenium/hub</span><br></pre></td></tr></table></figure><h3 id="2-Node节点的容器"><a href="#2-Node节点的容器" class="headerlink" title="2.Node节点的容器"></a>2.Node节点的容器</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">docker run -d --net my-grid -e SE_EVENT_BUS_HOST=selen-hub \</span><br><span class="line">--shm-size=<span class="string">&quot;2g&quot;</span> \</span><br><span class="line">-e SE_EVENT_BUS_PUBLISH_PORT=4442 \</span><br><span class="line">-e SE_EVENT_BUS_SUBSCRIBE_PORT=4443 \</span><br><span class="line">-p 5900:5900 \</span><br><span class="line">-p 7900:7900 \</span><br><span class="line">-v /dev/shm:/dev/shm \</span><br><span class="line">--name selen-node-chrome1 selenium/node-chrome</span><br></pre></td></tr></table></figure><blockquote><p>5900 端口是给VNC客户端用的<br>7900 端口是给noVNC用的</p></blockquote><p>容器可以通过 <code>docker ps -a</code>命令查看 。</p><p>服务起来了，可以在浏览器中查看（我的服务器ip为：43.142.94.65）：<br><a class="link"   href="http://43.142.94.65:4444/" >http://43.142.94.65:4444<i class="fas fa-external-link-alt"></i></a></p><p>结果如下：<br><img                       lazyload                     src="/images/loading.svg"                     data-src="/img/Docker_Selenium_1.png"                                     ></p><p>点开版本号上面的1，可以看到有如下信息（这些信息有用的，记一下，代码里会用到这些参数）：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;&quot;browserName&quot;:&quot;chrome&quot;,&quot;browserVersion&quot;:&quot;102.0&quot;,&quot;platformName&quot;:&quot;Linux&quot;,&quot;se:noVncPort&quot;:7900,&quot;se:vncEnabled&quot;:true&#125;</span><br></pre></td></tr></table></figure><h3 id="3-使用docker-compose创建"><a href="#3-使用docker-compose创建" class="headerlink" title="3. 使用docker-compose创建"></a>3. 使用docker-compose创建</h3><p>如果不想用上面这种依次创建容器的方法，就直接用docker-compose一起创建（内容对照上面的一样的）。</p><p>docker-compose.yml 文件模板如下（Github上也有模板）：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># To execute this docker-compose yml file use `docker-compose -f docker-compose-v3.yml up`</span></span><br><span class="line"><span class="comment"># Add the `-d` flag at the end for detached execution</span></span><br><span class="line"><span class="comment"># To stop the execution, hit Ctrl+C, and then `docker-compose -f docker-compose-v3.yml down`</span></span><br><span class="line"><span class="attr">version:</span> <span class="string">&quot;3&quot;</span></span><br><span class="line"><span class="attr">services:</span></span><br><span class="line">  <span class="attr">chrome:</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">selenium/node-chrome:latest</span></span><br><span class="line">    <span class="attr">shm_size:</span> <span class="string">2gb</span></span><br><span class="line">    <span class="attr">depends_on:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">selenium-hub</span></span><br><span class="line">    <span class="attr">environment:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">SE_EVENT_BUS_HOST=selen-hub</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">SE_EVENT_BUS_PUBLISH_PORT=4442</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">SE_EVENT_BUS_SUBSCRIBE_PORT=4443</span></span><br><span class="line">    <span class="attr">networks:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">my-grid</span></span><br><span class="line">    <span class="attr">ports:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">&quot;5900:5900&quot;</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">&quot;7900:7900&quot;</span></span><br><span class="line"></span><br><span class="line">  <span class="attr">firefox:</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">selenium/node-firefox:latest</span></span><br><span class="line">    <span class="attr">shm_size:</span> <span class="string">2gb</span></span><br><span class="line">    <span class="attr">depends_on:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">selenium-hub</span></span><br><span class="line">    <span class="attr">environment:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">SE_EVENT_BUS_HOST=selen-hub</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">SE_EVENT_BUS_PUBLISH_PORT=4442</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">SE_EVENT_BUS_SUBSCRIBE_PORT=4443</span></span><br><span class="line">    <span class="attr">networks:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">my-grid</span></span><br><span class="line">    <span class="attr">ports:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">&quot;5901:5900&quot;</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">&quot;7901:7900&quot;</span></span><br><span class="line"></span><br><span class="line">  <span class="attr">selenium-hub:</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">selenium/hub:latest</span></span><br><span class="line">    <span class="attr">container_name:</span> <span class="string">selen-hub</span></span><br><span class="line">    <span class="attr">ports:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">&quot;4442:4442&quot;</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">&quot;4443:4443&quot;</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">&quot;4444:4444&quot;</span></span><br><span class="line">    <span class="attr">networks:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">my-grid</span></span><br><span class="line"></span><br><span class="line"><span class="attr">networks:</span></span><br><span class="line">  <span class="attr">my-grid:</span></span><br></pre></td></tr></table></figure><p>把docker-compose.yml 文件上传到服务器，然后进入文件所在目录下，执行以下命令运行容器：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker-compose up -d</span><br></pre></td></tr></table></figure><blockquote><p>-d ：后台运行</p></blockquote><p>如果文件名没用默认的 docker-compose.yml，就参考上面的提示，加上-f 的文件参数就行：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker-compose -f docker-compose-v3.yml up -d</span><br></pre></td></tr></table></figure><p>执行完后，通过<code>docker ps -a</code>查看容器列表，如图所示，添加了3个容器（容器需要加name的，自己添加一下container_name参数；还有个firefox不需要的就删除或者注释掉就行。）：<br><img                       lazyload                     src="/images/loading.svg"                     data-src="/img/Docker_Selenium_2.png"                                     ></p><p>要删除这些容器也简单，可以一键删除：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker-compose -f docker-compose-v3.yml down</span><br></pre></td></tr></table></figure><h2 id="三、使用Python调用Selenium-Grid"><a href="#三、使用Python调用Selenium-Grid" class="headerlink" title="三、使用Python调用Selenium Grid"></a>三、使用Python调用Selenium Grid</h2><p>这反正跟平常的Selenium WebDriver一样的，参考之前的文章：<a href="/2022/05/04/Python-Selenium%E4%BD%BF%E7%94%A8%E4%B8%BE%E4%BE%8B/" title="Python Selenium使用举例">Python Selenium使用举例</a></p><p>主要就是开头设置有些不一样。这里就需要用到 <a class="link"   href="http://43.142.94.65:4444/" >http://43.142.94.65:4444<i class="fas fa-external-link-alt"></i></a> 运行后的这些信息。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;&quot;browserName&quot;:&quot;chrome&quot;,&quot;browserVersion&quot;:&quot;102.0&quot;,&quot;platformName&quot;:&quot;Linux&quot;,&quot;se:noVncPort&quot;:7900,&quot;se:vncEnabled&quot;:true&#125;</span><br></pre></td></tr></table></figure><p>代码举例（test.py）：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python</span></span><br><span class="line"><span class="comment"># -*- encoding: utf-8 -*-</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> selenium <span class="keyword">import</span> webdriver</span><br><span class="line"><span class="keyword">from</span> selenium.webdriver.common.by <span class="keyword">import</span> By</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line">selenium_grid_url = <span class="string">&#x27;http://43.142.94.65:4444/wd/hub&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># selenium</span></span><br><span class="line">option = webdriver.ChromeOptions()</span><br><span class="line">option.set_capability(<span class="string">&quot;browserName&quot;</span>, <span class="string">&quot;chrome&quot;</span>)</span><br><span class="line">option.set_capability(<span class="string">&quot;browserVersion&quot;</span>, <span class="string">&quot;102.0&quot;</span>)</span><br><span class="line">option.set_capability(<span class="string">&quot;platformName&quot;</span>, <span class="string">&quot;Linux&quot;</span>)</span><br><span class="line">wd = webdriver.Remote(command_executor=selenium_grid_url, options=option)</span><br><span class="line"></span><br><span class="line">wd.implicitly_wait(<span class="number">10</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 调用WebDriver 对象的get方法 可以让浏览器打开指定网址</span></span><br><span class="line">wd.get(<span class="string">&#x27;https://cn.bing.com/&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(wd.title) <span class="comment"># 打印网页标题</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 根据id选择元素，返回的就是该元素对应的WebElement对象</span></span><br><span class="line"><span class="comment"># element = wd.find_element_by_id(&#x27;c&#x27;) # selenium3写法</span></span><br><span class="line">element = wd.find_element(By.ID,<span class="string">&#x27;sb_form_q&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 通过该 WebElement对象，就可以对页面元素进行操作了</span></span><br><span class="line"><span class="comment"># 比如输入字符串到 这个 输入框里</span></span><br><span class="line"><span class="comment"># element.send_keys(&#x27;五四青年节\n&#x27;)</span></span><br><span class="line">element.send_keys(<span class="string">&#x27;五四青年节&#x27;</span>)</span><br><span class="line"></span><br><span class="line">time.sleep(<span class="number">5</span>)</span><br><span class="line"></span><br><span class="line">element2 = wd.find_element(By.ID, <span class="string">&#x27;search_icon&#x27;</span>)</span><br><span class="line">element2.click()</span><br><span class="line">time.sleep(<span class="number">5</span>)</span><br><span class="line"></span><br><span class="line">wd.quit()</span><br></pre></td></tr></table></figure><p>用命令运行这个Python文件，<code>python test.py</code>就可以看到运行结果了。也可以用下面远程观看的方式看到运行过程。<br><img                       lazyload                     src="/images/loading.svg"                     data-src="/img/Docker_Selenium_3.png"                                     ></p><h2 id="四、远程观看"><a href="#四、远程观看" class="headerlink" title="四、远程观看"></a>四、远程观看</h2><p>Selenium 提示VNC客户端和浏览器两种远程方法。</p><h3 id="1-VNC客户端"><a href="#1-VNC客户端" class="headerlink" title="1.VNC客户端"></a>1.VNC客户端</h3><p>vnc viewer是一款优秀的远程控制工具软件。<br>官网下载地址：<a class="link"   href="https://www.realvnc.com/en/connect/download/viewer/" >https://www.realvnc.com/en/connect/download/viewer/<i class="fas fa-external-link-alt"></i></a></p><p>安装好以后 File-&gt;New connection，在弹出的界面中输入node的ip和端口号（比如我这就是43.142.94.65:5900，Name随意），保存后双击启动。<br>连接，会要求输入密码，默认密码：secret</p><p>连接上后，再运行Python selenium的代码，就能看到运行过程了。（结果就像上面那张图一样）</p><h3 id="2-使用浏览器（noVNC）"><a href="#2-使用浏览器（noVNC）" class="headerlink" title="2.使用浏览器（noVNC）"></a>2.使用浏览器（noVNC）</h3><p>我的服务器ip为：43.142.94.65，映射出来的端口也是7900，那打开地址就是：</p><p><a class="link"   href="http://43.142.94.65:7900/vnc.html" >http://43.142.94.65:7900/vnc.html<i class="fas fa-external-link-alt"></i></a></p><p>默认密码：secret</p><p>效果跟上面也是一样的。</p><p>PS.注意服务器防火墙设置里这几个用到的端口开一下。（docker-compose.yml 文件里那些个端口）</p><h2 id="小结的话"><a href="#小结的话" class="headerlink" title="小结的话"></a>小结的话</h2><p>有了这些可以做些什么呢？</p><p>加上前面一篇文章：<a href="/2022/05/28/%E6%9C%8D%E5%8A%A1%E5%99%A8Docker%E6%90%AD%E5%BB%BAFlask%E5%BA%94%E7%94%A8%EF%BC%88%E4%B8%80%EF%BC%89/" title="服务器 Docker搭建Flask应用（一）">服务器 Docker搭建Flask应用（一）</a>，就在服务器上用Docker创建了3个容器，分别是：</p><ul><li>Flask应用的容器</li><li>selenium hub的容器</li><li>selenium node-chrome的容器</li></ul><p>这样就可以在Flask应用的容器中，代码用selenium爬取数据，写一个get接口，返回json数据；或者做自动化测试。</p>]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
            <tag> Docker </tag>
            
            <tag> Python </tag>
            
            <tag> Selenium </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>服务器 Docker搭建Flask应用（一）</title>
      <link href="/2022/05/28/%E6%9C%8D%E5%8A%A1%E5%99%A8Docker%E6%90%AD%E5%BB%BAFlask%E5%BA%94%E7%94%A8%EF%BC%88%E4%B8%80%EF%BC%89/"/>
      <url>/2022/05/28/%E6%9C%8D%E5%8A%A1%E5%99%A8Docker%E6%90%AD%E5%BB%BAFlask%E5%BA%94%E7%94%A8%EF%BC%88%E4%B8%80%EF%BC%89/</url>
      
        <content type="html"><![CDATA[<p>用Python的Web框架——Flask写了应用，然后就可以放到服务器上。</p><p>用Docker的话，贼方便。自己用的Flask项目的基础环境（安装需要的常用的库），可以打包成一个环境镜像。</p><p>然后新建Flask项目的话，就在这个镜像的基础上建容器就行了。<br>需要MySQL的话，再建个MySQL的容器用就行。</p><p>此文是一个最基础版，还没带数据库MySQL。用的服务器是CentOS8.2版本。<br>如果需要配置MySQL的，看这篇：<a href="/2023/01/14/%E6%9C%8D%E5%8A%A1%E5%99%A8Docker%E6%90%AD%E5%BB%BAFlask%E5%BA%94%E7%94%A8%EF%BC%88%E4%BA%8C%EF%BC%89/" title="服务器Docker搭建Flask应用（二）">服务器Docker搭建Flask应用（二）</a>，</p><a id="more"></a><h2 id="一、创建Flask项目环境镜像（服务器）"><a href="#一、创建Flask项目环境镜像（服务器）" class="headerlink" title="一、创建Flask项目环境镜像（服务器）"></a>一、创建Flask项目环境镜像（服务器）</h2><h3 id="1-项目结构（样例）"><a href="#1-项目结构（样例）" class="headerlink" title="1.项目结构（样例）"></a>1.项目结构（样例）</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">book_isbn</span><br><span class="line">├── app</span><br><span class="line">│   ├── templates</span><br><span class="line">│       └── index.html</span><br><span class="line">│   ├── app.py</span><br><span class="line">│   ├── Dockerfile</span><br><span class="line">│   └── requirements.txt</span><br></pre></td></tr></table></figure><h3 id="2-生成-requirements-txt（本地）"><a href="#2-生成-requirements-txt（本地）" class="headerlink" title="2.生成 requirements.txt（本地）"></a>2.生成 requirements.txt（本地）</h3><p>进入book_isbn项目目录的app目录下，运行如下命令，就可以生成项目环境的 requirements.txt 文件。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip freeze &gt; requirements.txt</span><br></pre></td></tr></table></figure><p><strong>requirements.txt 举例</strong>：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">click&#x3D;&#x3D;8.0.1</span><br><span class="line">colorama&#x3D;&#x3D;0.4.4</span><br><span class="line">et-xmlfile&#x3D;&#x3D;1.1.0</span><br><span class="line">Flask&#x3D;&#x3D;2.0.1</span><br><span class="line">Flask-MySQLdb&#x3D;&#x3D;0.2.0</span><br><span class="line">Flask-SQLAlchemy&#x3D;&#x3D;2.5.1</span><br><span class="line">Flask-WTF&#x3D;&#x3D;0.15.1</span><br><span class="line">greenlet&#x3D;&#x3D;1.1.0</span><br><span class="line">itsdangerous&#x3D;&#x3D;2.0.1</span><br><span class="line">Jinja2&#x3D;&#x3D;3.0.1</span><br><span class="line">MarkupSafe&#x3D;&#x3D;2.0.1</span><br><span class="line">mysqlclient&#x3D;&#x3D;2.0.3</span><br><span class="line">numpy&#x3D;&#x3D;1.22.2</span><br><span class="line">openpyxl&#x3D;&#x3D;3.0.9</span><br><span class="line">pandas&#x3D;&#x3D;1.4.1</span><br><span class="line">PyMySQL&#x3D;&#x3D;1.0.2</span><br><span class="line">python-dateutil&#x3D;&#x3D;2.8.2</span><br><span class="line">pytz&#x3D;&#x3D;2021.3</span><br><span class="line">six&#x3D;&#x3D;1.16.0</span><br><span class="line">SQLAlchemy&#x3D;&#x3D;1.4.21</span><br><span class="line">Werkzeug&#x3D;&#x3D;2.0.1</span><br><span class="line">WTForms&#x3D;&#x3D;2.3.3</span><br><span class="line">xlrd&#x3D;&#x3D;2.0.1</span><br><span class="line">pandas&#x3D;&#x3D;1.4.1</span><br><span class="line">requests&#x3D;&#x3D;2.27.1</span><br><span class="line">selenium&#x3D;&#x3D;4.1.3</span><br><span class="line">urllib3&#x3D;&#x3D;1.26.9</span><br></pre></td></tr></table></figure><p>可以看到除了带Flask中常用的库，也带了mysql和selenium、pandas这些，这种随你自己就行，生成的requirements.txt文件中如果有哪些用不着，也可以删除的。这个只要用到的库都装上了，其它的关系不大。</p><h3 id="3-用Dockerfile-文件创建镜像"><a href="#3-用Dockerfile-文件创建镜像" class="headerlink" title="3.用Dockerfile 文件创建镜像"></a>3.用Dockerfile 文件创建镜像</h3><p>Dockerfile文件内容如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"># Use an official Python runtime as an image</span><br><span class="line">FROM python:3.9</span><br><span class="line"></span><br><span class="line"># Sets the working directory for following COPY and CMD instructions</span><br><span class="line"># Notice we haven’t created a directory by this name - this instruction</span><br><span class="line"># creates a directory with this name if it doesn’t exist</span><br><span class="line">WORKDIR &#x2F;app</span><br><span class="line"></span><br><span class="line"># copy code</span><br><span class="line"># COPY . &#x2F;app</span><br><span class="line">COPY requirements.txt &#x2F;app</span><br><span class="line"></span><br><span class="line"># RUN python -m pip install --upgrade pip</span><br><span class="line"># RUN pip install --trusted-host pypi.org --trusted-host pypi.python.org --trusted-host&#x3D;files.pythonhosted.org --no-cache-dir -r requirements.txt</span><br><span class="line">RUN pip3 install -i https:&#x2F;&#x2F;pypi.tuna.tsinghua.edu.cn&#x2F;simple --upgrade pip </span><br><span class="line">RUN pip3 install -i https:&#x2F;&#x2F;pypi.tuna.tsinghua.edu.cn&#x2F;simple -r requirements.txt </span><br><span class="line"></span><br><span class="line"># The EXPOSE instruction indicates the ports on which a container</span><br><span class="line"># 我这里app.py中run的port&#x3D;5020，所以开的是这个端口，你的看你自己的设置</span><br><span class="line">EXPOSE 5020</span><br><span class="line"></span><br><span class="line"># Run app.py when the container launches</span><br><span class="line">COPY app.py &#x2F;app</span><br><span class="line"># CMD [&quot;python&quot;, &quot;app.py&quot;]</span><br></pre></td></tr></table></figure><p><code>EXPOSE 5020</code>：这里需要改成你自己设置的端口号。<br>别的可以啥也不用改。</p><p>当然，现在需要把这整个项目的文件上传到服务器上。我这直接用Xftp上传到了 <code>/root/flask/book_isbn/app</code>目录。</p><p>然后SSH连接服务器，进入到 /root/flask/book_isbn/app 目录，运行以下命令生成镜像：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker build -t book_isbn:v1.0 .</span><br></pre></td></tr></table></figure><blockquote><p>-t 设置镜像名字和版本号</p></blockquote><p>执行完，就可以用命令 <code>docker images</code>看到以下镜像了（当然也有python3.9的镜像）。如图：<br><img                       lazyload                     src="/images/loading.svg"                     data-src="/img/Docker_Python_Flask_interface_1.png"                                     ></p><p><strong>注意</strong>：有一点说明一下，如果你的Flask项目是做一个完整的项目，后续不修改代码，直接打包的一个Web项目。那requirements.txt 文件就不用都扔进去；这个Dockerfile文件也不能这样写简略，要把项目代码都copy进去，直接的CMD也要用起来，要运行app.py的。（我这只是搭基础环境的，都是后续在里面改项目代码的）</p><h2 id="二、创建Flask项目容器（服务器）"><a href="#二、创建Flask项目容器（服务器）" class="headerlink" title="二、创建Flask项目容器（服务器）"></a>二、创建Flask项目容器（服务器）</h2><p>直接根据刚创建的镜像：book_isbn:v1.0 创建一个容器。</p><h3 id="1-创建容器（book-isbn）"><a href="#1-创建容器（book-isbn）" class="headerlink" title="1.创建容器（book_isbn）"></a>1.创建容器（book_isbn）</h3><p>后退（<code>cd ..</code>），回到book_isbn目录下。运行以下命令：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">docker run -dit --restart=always \</span><br><span class="line">-p 5020:5020 \</span><br><span class="line">-p 5022:22 \</span><br><span class="line">-v `<span class="built_in">pwd</span>`/docker_app/:/app/ \</span><br><span class="line">--name book_isbn book_isbn:v1.0 /bin/bash</span><br></pre></td></tr></table></figure><blockquote><p><code>pwd</code>/docker_app/：其中pwd是用的命令形式，表示当前目录。<br>第4行表示将服务器中的 当前目录下的docker_app 目录挂载到容器中的 /app目录（这是创建镜像时设的WORKDIR 工作目录</p></blockquote><p>执行完后，用<code>docker ps -a</code>命令查看，就可以容器列表了。如下图所示：<br><img                       lazyload                     src="/images/loading.svg"                     data-src="/img/Docker_Python_Flask_interface_2.png"                                     ></p><p>同时，在book_isbn目录下也生成了一个 docker_app目录。</p><h3 id="2-把app目录下的所有文件复制到docker-app目录中"><a href="#2-把app目录下的所有文件复制到docker-app目录中" class="headerlink" title="2.把app目录下的所有文件复制到docker_app目录中"></a>2.把app目录下的所有文件复制到docker_app目录中</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cp -r app/. docker_app/</span><br></pre></td></tr></table></figure><blockquote><p>cp -r app docker_app/ ：表示将app目录及其目录下所有文件复制到docker_app目录下，就会有 docker_app/app目录</p><p>cp -r app/. docker_app/ ：表示将app目录下所有文件复制到docker_app目录下，不包括app目录</p></blockquote><p>以后要改容器中的代码，就直接改这个目录下的代码就行了。<br>可以用VS Code远程连接，也可以用Cloud Studio，然后修改项目中的文件就行。</p><p>而原来的book_isbn/app目录也不需要了，可以删除，不删除久了自己可能也会忘记、搞混。可以需要重新创建容器的时候再上传就行了。</p><h2 id="三、后台一直运行app-py"><a href="#三、后台一直运行app-py" class="headerlink" title="三、后台一直运行app.py"></a>三、后台一直运行app.py</h2><p>这个用<code>nohup</code>命令，有文章写过介绍了：<a href="/2022/05/02/Linux-nohup-%E5%90%8E%E5%8F%B0%E8%BF%90%E8%A1%8C-%E5%91%BD%E4%BB%A4%E8%AF%A6%E8%A7%A3/" title="Linux nohup 后台运行 命令详解">Linux nohup 后台运行 命令详解</a></p><h3 id="1-进入容器"><a href="#1-进入容器" class="headerlink" title="1.进入容器"></a>1.进入容器</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker <span class="built_in">exec</span> -it book_isbn /bin/bash</span><br></pre></td></tr></table></figure><h3 id="2-后台运行Flask项目"><a href="#2-后台运行Flask项目" class="headerlink" title="2.后台运行Flask项目"></a>2.后台运行Flask项目</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nohup python -u app.py &gt; /dev/null 2&gt;&amp;1 &amp;</span><br></pre></td></tr></table></figure><p>运行后，会显示进程的PID。</p><p><strong>命令详解</strong>：</p><blockquote><p>1.最后一个“&amp;”：表示后台运行程序<br>2.“nohup” ：表示程序不被挂起<br>3.“python”：即python.exe，执行python代码<br>4.“-u”：表示不启用缓存，实时输出打印信息到日志文件（如果不加-u，则会导致日志文件不会实时刷新代码中的print函数的信息）<br>5.“app.py”：表示python的源代码文件<br>6.“&gt;”：表示将打印信息重定向到日志文件<br>7.“/dev/null”：我这里就不要日志文件了<br>8.“2&gt;&amp;1”：表示将标准错误输出转变化标准输出，可以将错误信息也输出到日志文件中（0-&gt; stdin, 1-&gt;stdout, 2-&gt;stderr）</p></blockquote><p>当后台运行app.py后，就可以通过服务器的ip地址访问了。比如我的服务器ip地址为：43.142.94.65，那在浏览器里就可以用以下地址访问了：<a class="link"   href="http://43.142.94.65:5020/" >http://43.142.94.65:5020/<i class="fas fa-external-link-alt"></i></a><br>如图所示：<br><img                       lazyload                     src="/images/loading.svg"                     data-src="/img/Docker_Python_Flask_interface_3.png"                                     ></p><h3 id="3-结束后台运行进程（容器内）"><a href="#3-结束后台运行进程（容器内）" class="headerlink" title="3.结束后台运行进程（容器内）"></a>3.结束后台运行进程（容器内）</h3><p>进程在后台运行，想要关闭就要查看进程的PID。想要修改代码，就需要先结束进程。</p><p>可以通过搜索查找这个命令的PID。</p><p><strong>1).用命令查找进程的PID</strong></p><p>可以通过以下命令查找：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ps -aux | grep <span class="string">&quot;app.py&quot;</span></span><br></pre></td></tr></table></figure><p>结果如图：<br><img                       lazyload                     src="/images/loading.svg"                     data-src="/img/Docker_Python_Flask_interface_4.png"                                      ></p><p>用户名后面一项就是PID，可以看到PID=36。</p><p>还可以用 <code>top -p 36</code>命令确认下471进程是不是这个app.py的进程。</p><p><strong>2).结束进程</strong></p><p>运行命令：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">kill</span> [PID]</span><br></pre></td></tr></table></figure><p>比如上面的进程就是<code>kill 36</code>，就可以结束这个app.py的进程了。</p>]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Docker </tag>
            
            <tag> Python </tag>
            
            <tag> Flask </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【行政办公系列】Python批量复制文件并重命名</title>
      <link href="/2022/05/28/%E3%80%90%E8%A1%8C%E6%94%BF%E5%8A%9E%E5%85%AC%E7%B3%BB%E5%88%97%E3%80%91Python%E6%89%B9%E9%87%8F%E5%A4%8D%E5%88%B6%E6%96%87%E4%BB%B6%E5%B9%B6%E9%87%8D%E5%91%BD%E5%90%8D/"/>
      <url>/2022/05/28/%E3%80%90%E8%A1%8C%E6%94%BF%E5%8A%9E%E5%85%AC%E7%B3%BB%E5%88%97%E3%80%91Python%E6%89%B9%E9%87%8F%E5%A4%8D%E5%88%B6%E6%96%87%E4%BB%B6%E5%B9%B6%E9%87%8D%E5%91%BD%E5%90%8D/</url>
      
        <content type="html"><![CDATA[<p><strong>问题描述</strong>：</p><p>比如我需要收集全部员工填写后的一份资料，要让每个人填写某个文档（模板）。现在手上有个名单列表。</p><p>考虑到钉钉群里面，部分人没有电脑，只有手机的，用手机下载文件再编辑上传比如麻烦。</p><p>为了方便操作，就可以建个文件夹，把模板的文档复制到文件夹中，并依次重命名为员工姓名的文件名。</p><p>然后把整个文件夹上传到钉钉群就可以了。群成员找到文件夹中自己名字的文档，直接在线编辑就行了。</p><a id="more"></a><p>当然，上面只是举个例子，主要是方便在钉钉群中方便群员用手机操作。</p><p>此文主要介绍用Python读取Excel中姓名列表，再批量复制文件并重命名的方法。</p><p><strong>实现思路</strong>：</p><ul><li>读取Excel表中姓名列的数据</li><li>创建一个目录，用来放所有的文档</li><li>循环遍历姓名列表（List），依次复制文件并重命名</li></ul><h2 id="一、用openpyxl库读取Excel表格"><a href="#一、用openpyxl库读取Excel表格" class="headerlink" title="一、用openpyxl库读取Excel表格"></a>一、用openpyxl库读取Excel表格</h2><p>openpyxl 库是Python用来操作Excel表格（.xlsx）一个库。这里只简单介绍怎么读取一列数据，不作详细介绍。</p><p>比如有这样一张表：<br><img                       lazyload                     src="/images/loading.svg"                     data-src="/img/OfficeSeries_Python_copyfile_rename_1.png"                                     ></p><p>我们怎么把A列的数据读出来。</p><h3 id="1-安装openpyxl-库"><a href="#1-安装openpyxl-库" class="headerlink" title="1.安装openpyxl 库"></a>1.安装openpyxl 库</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install openpyxl</span><br></pre></td></tr></table></figure><h3 id="2-读取Excel一列（A列）数据"><a href="#2-读取Excel一列（A列）数据" class="headerlink" title="2.读取Excel一列（A列）数据"></a>2.读取Excel一列（A列）数据</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> openpyxl</span><br><span class="line"></span><br><span class="line"><span class="comment"># 从 Excel文件中读取 指定列(col_name) 的数据返回List</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">read_from_excel_by_col_name</span>(<span class="params">ex_file, sheet_name, col_name</span>):</span></span><br><span class="line">    <span class="keyword">if</span>(os.path.exists(ex_file)):</span><br><span class="line">        book = openpyxl.load_workbook(ex_file)</span><br><span class="line">        sheet = book[sheet_name]</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line"></span><br><span class="line">    value_list = []</span><br><span class="line">    <span class="keyword">for</span> col_num <span class="keyword">in</span> sheet[col_name]:</span><br><span class="line">        value_list.append(col_num.value)</span><br><span class="line">    book.close()</span><br><span class="line">    <span class="keyword">return</span> value_list</span><br><span class="line"></span><br><span class="line"><span class="comment"># name_list 即获取到的姓名列表 e.g [&#x27;1荀彧&#x27;,&#x27;2荀攸&#x27;]</span></span><br><span class="line">name_list = read_from_excel_by_col_name(<span class="string">&#x27;信息表.xlsx&#x27;</span>, <span class="string">&#x27;Sheet1&#x27;</span>, <span class="string">&#x27;A&#x27;</span>)</span><br></pre></td></tr></table></figure><h2 id="二、创建文件夹"><a href="#二、创建文件夹" class="headerlink" title="二、创建文件夹"></a>二、创建文件夹</h2><p>这个简单，直接用Python自带的os库的makedirs()方法就行。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 创建一个文件夹</span></span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">mkdir</span>(<span class="params">path</span>):</span></span><br><span class="line">    outdir = os.path.exists(path)</span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> outdir:</span><br><span class="line">        os.makedirs(path)</span><br><span class="line"></span><br><span class="line">mkdir(<span class="string">&#x27;D:\107轨迹确认书&#x27;</span>)</span><br></pre></td></tr></table></figure><h2 id="三、复制文件并重命名"><a href="#三、复制文件并重命名" class="headerlink" title="三、复制文件并重命名"></a>三、复制文件并重命名</h2><p>用shutil库，实现对文件的复制操作，之前一篇文章专门讲了这个库的用法举例：<a href="/2022/05/15/Python%E6%96%87%E4%BB%B6%E6%93%8D%E4%BD%9C-shutil%E5%BA%93%E4%BD%BF%E7%94%A8%E4%B8%BE%E4%BE%8B/" title="Python文件操作 shutil库使用举例">Python文件操作 shutil库使用举例</a></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> shutil</span><br><span class="line"></span><br><span class="line">temp_file = <span class="string">r&#x27;D:\a.docx&#x27;</span> <span class="comment"># 模板文件</span></span><br><span class="line">houzhui = <span class="string">&#x27;.&#x27;</span> + temp_file.split(<span class="string">&#x27;.&#x27;</span>)[-<span class="number">1</span>] <span class="comment"># 模板文件后缀 .docx</span></span><br><span class="line"></span><br><span class="line">dst_path = <span class="string">r&#x27;D:\107轨迹确认书&#x27;</span> <span class="comment"># 存放新文件的目录</span></span><br><span class="line">new_file_name = <span class="string">&#x27;1荀彧&#x27;</span></span><br><span class="line">dst = dst_path + <span class="string">&#x27;\\&#x27;</span> + new_file_name + houzhui <span class="comment"># &#x27;D:\107轨迹确认书\1荀彧.docx&#x27; 这个路径是windows下写法</span></span><br><span class="line"></span><br><span class="line">shutil.copy(temp_file, dst) <span class="comment"># 复制文件并重命名</span></span><br></pre></td></tr></table></figure><h2 id="四、完整代码举例"><a href="#四、完整代码举例" class="headerlink" title="四、完整代码举例"></a>四、完整代码举例</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> os, shutil</span><br><span class="line"><span class="keyword">import</span> openpyxl</span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建文件夹</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">mkdir</span>(<span class="params">path</span>):</span></span><br><span class="line">    outdir = os.path.exists(path)</span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> outdir:</span><br><span class="line">        os.makedirs(path)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 从 Excel文件中读取 指定列(col_name) 的数据返回List</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">read_from_excel_by_col_name</span>(<span class="params">ex_file, sheet_name, col_name</span>):</span></span><br><span class="line">    <span class="keyword">if</span>(os.path.exists(ex_file)):</span><br><span class="line">        book = openpyxl.load_workbook(ex_file)</span><br><span class="line">        sheet = book[sheet_name]</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line"></span><br><span class="line">    value_list = []</span><br><span class="line">    <span class="keyword">for</span> col_num <span class="keyword">in</span> sheet[col_name]:</span><br><span class="line">        value_list.append(col_num.value)</span><br><span class="line">    book.close()</span><br><span class="line">    <span class="keyword">return</span> value_list</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span>():</span></span><br><span class="line">    ex_file = <span class="string">r&#x27;.\信息表.xlsx&#x27;</span></span><br><span class="line">    temp_file = <span class="string">r&#x27;C:\节假日离校返家师生员工行动轨迹确认书.doc&#x27;</span></span><br><span class="line">    houzhui = <span class="string">&#x27;.&#x27;</span> + temp_file.split(<span class="string">&#x27;.&#x27;</span>)[-<span class="number">1</span>] <span class="comment"># .doc</span></span><br><span class="line">    <span class="comment"># print(houzhui)</span></span><br><span class="line"></span><br><span class="line">    dst_path = <span class="string">r&#x27;D:\107轨迹确认书&#x27;</span></span><br><span class="line">    mkdir(dst_path) <span class="comment"># 创建文件夹</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 获取姓名列表</span></span><br><span class="line">    name_list = read_from_excel_by_col_name(ex_file, <span class="string">&#x27;Sheet1&#x27;</span>, <span class="string">&#x27;A&#x27;</span>)</span><br><span class="line">    <span class="comment"># print(name_list)</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 批量复制文件并重命名</span></span><br><span class="line">    <span class="keyword">for</span> name <span class="keyword">in</span> name_list:</span><br><span class="line">        dst = dst_path + <span class="string">&#x27;\\&#x27;</span> + name + houzhui</span><br><span class="line">        shutil.copy(temp_file, dst)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;-------------fine!&#x27;</span>)</span><br><span class="line"></span><br><span class="line">main()</span><br><span class="line"><span class="comment"># print(os.getcwd()) # 查看当前工作目录路径</span></span><br></pre></td></tr></table></figure><p>运行后结果如图：<br><img                       lazyload                     src="/images/loading.svg"                     data-src="/img/OfficeSeries_Python_copyfile_rename_2.png"                                     ></p>]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
            <tag> Office </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>《你的第一本保险指南》书摘&amp;笔记</title>
      <link href="/2022/05/22/%E3%80%8A%E4%BD%A0%E7%9A%84%E7%AC%AC%E4%B8%80%E6%9C%AC%E4%BF%9D%E9%99%A9%E6%8C%87%E5%8D%97%E3%80%8B%E4%B9%A6%E6%91%98-%E7%AC%94%E8%AE%B0/"/>
      <url>/2022/05/22/%E3%80%8A%E4%BD%A0%E7%9A%84%E7%AC%AC%E4%B8%80%E6%9C%AC%E4%BF%9D%E9%99%A9%E6%8C%87%E5%8D%97%E3%80%8B%E4%B9%A6%E6%91%98-%E7%AC%94%E8%AE%B0/</url>
      
        <content type="html"><![CDATA[<table><thead><tr><th>书名</th><th>《你的第一本保险指南》</th></tr></thead><tbody><tr><td>作者</td><td>槽叔</td></tr><tr><td>出版社</td><td>中信出版社</td></tr><tr><td>出版时间</td><td>2018-09</td></tr><tr><td>豆瓣评分</td><td>8.4分 ★★★★☆ （推荐）</td></tr><tr><td>我的评论</td><td>科普性很强，特别适合小白看看、了解一下。写的挺简单易懂的。</td></tr></tbody></table><a id="more"></a><p>假设有件商品，你看不见也摸不着，只能“脑补”它的价值和作用。更要命的是，身边还有很多人对你说：你的这些脑补可能都是假的。那你还会买吗？ 保险就是这样一种。</p><p>死亡和疾病是最直观的两大风险，因为容易理解，消费者普遍很认同。针对这两大风险，保险公司开发了<strong>寿险</strong>和<strong>重大疾病险</strong>两种产品。</p><p>四大保险金刚：定期寿险、意外险、重大疾病险、商业医疗险。</p><h2 id="一、寿险"><a href="#一、寿险" class="headerlink" title="一、寿险"></a>一、寿险</h2><p>对<strong>终身寿险</strong>的描述，就是其涵盖的身故责任：无论投保人活到多少岁，只要身故就可以获得一笔理赔金。</p><p>比如终身寿险，这款产品包含身故责任，主要是为了应对被保人死亡的风险。如果被保人不幸身故，保险公司便会为其保险受益人提供一笔定额理赔金。</p><p>接下来我们就得琢磨：什么样的人在身故后，需要留下一笔钱呢？他们更可能是作为家庭支柱的父母，而不是子女。由此我们知道，大多数时候我们没有必要为孩子购买终身寿险。</p><h2 id="二、意外险"><a href="#二、意外险" class="headerlink" title="二、意外险"></a>二、意外险</h2><h3 id="1、意外的定义"><a href="#1、意外的定义" class="headerlink" title="1、意外的定义"></a>1、意外的定义</h3><blockquote><p>遭受外来的、突发的、非本意的、非疾病的使身体受到伤害的客观事件。自然死亡、疾病身故、猝死、 自杀及自伤均不属于意外伤害。</p></blockquote><p>在每份意外险的保险条款里，你都能看到这样的描述。这段话表达了两层意思：</p><ul><li>第一，外来的、突发的、非本意的、非疾病的使身体受到伤害的客观事件，属于意外；</li><li>第二， 自然死亡、疾病身故、猝死、自杀及自伤，不属于意外。</li></ul><h3 id="2、意外险的责任"><a href="#2、意外险的责任" class="headerlink" title="2、意外险的责任"></a>2、意外险的责任</h3><p>意外险只包含<strong>意外身故</strong>和<strong>意外伤残</strong>两项责任，并不包含意外医疗。</p><p>一起意外事件可能带来两种结果，一是受伤，二是身故。如果一份意外险只涵盖意外身故，因为意外导致的受伤就无法获赔。<br><em>（现在很多意外险，一般能看到会有附带一个意外医疗险。）</em></p><p>不少人误以为<strong>猝死</strong>也是一种意外。整晚熬夜工作以致猝死，怎么能不算意外呢？<br>但医学上对于猝死的定义是：<strong>因疾病而突然死亡。保险公司也将猝死责任视为因突发疾病导致的身故。</strong></p><p>我们当然可以把猝死作为一项额外责任，加到意外险的产品里，但这必然导致意外险产品价格的提升。或者，我们也可以选择购买一份寿险（对身故的原因不做限制），这样可以弥补一些猝死带来的损失。<br><em>（现在有些意外险，也都有可选有带猝死的。）</em></p><h3 id="3、配置意外险的几条原则"><a href="#3、配置意外险的几条原则" class="headerlink" title="3、配置意外险的几条原则"></a>3、配置意外险的几条原则</h3><p><strong>原则一：必须涵盖意外医疗责任。</strong></p><p>意外导致的结果无非两种：伤残和死亡。因此，意外险保障的责任有三个必选项：身故、伤残、医疗。就像在手机话费套餐里，通话、短信、流量 是三大必备要素，同样，身故、残疾、医疗是意外险的三大必备要素。</p><p>至于意外医疗的保额，一两万就足够了。如果是一两万元都治不好的意外受伤，一定已经严重到需要做 手术或者长期住院治疗了，这时理赔的责任就可以交给上文提到的住院医疗保险了。</p><p><strong>原则二：一般意外身故的保额应足够高。</strong></p><p>所以强烈建议各位，尽可能把意外身故的保额提高。花最少的钱，撬动更高的杠杆，这是意外险的真实写照。说实话，意外险100万元身故保额在一二线城市根本不算高。</p><p><strong>原则三：不同人群的意外险，侧重点不一样。</strong></p><p>对于职场白领来说，意外险既要有足够的身故补偿（用于弥补家庭经济损失），也要保证受伤后有钱治疗；但对于孩子和老人来说，身故补偿就没有医疗费用补偿重要，毕竟他们不是家里的顶梁柱。因此，孩子和老人的意外险，应侧重于考虑提升意外医疗的保额，而没有必要追求意外身故的高保额。</p><p><strong>原则四：保障时间一年就够了。</strong></p><p>特别建议，每月缴纳五险一金和个人所得税的上班族，一定要投保税收递延养老保险，你可以把它理 解为一种包含政府福利的养老保险政策。每月投入1000元，除了获得3%~4%的稳健复利收益，更能直接获得一部分延迟缴税。</p><p><strong>中国养老有三个支柱：</strong></p><ul><li>第一支柱是政府养老金，</li><li>第二支柱是企业年金、职业年金，</li><li>第三支柱是包含税延养老险在内的商业养老保险。</li></ul><p>第一支柱大家都懂，第二支柱很多人听都没听过，因为基本上只有效益很好的大国企、央企才会给职工买。所以对于很多人来说，他们必须选择第三支柱作为养老的重要补充。</p><h2 id="三、重疾险"><a href="#三、重疾险" class="headerlink" title="三、重疾险"></a>三、重疾险</h2><p>不光是意外险，近年来越来越多的人关注的重大疾病险，其实对于每种疾病都有明确的定义。比如，单单“癌症”二字，不足以清楚表达疾病的定义。原位癌（癌症的早期形式）从字面上看也属于癌症，但治愈率极高且花费不多，便不属于保险条款规定的重大疾病。所以，我们不能简单地说重大疾病险“只要是癌症就能付”。</p><p><strong>其实为了解决类似的“误读”，保险条款会专门针对这类容易引起歧义的内容做额外说明。比如，意外险的条款里会出现“猝死不在保障范围”，重疾险里也会出现“原位癌不属于恶性肿瘤”之类的表述。</strong></p><h3 id="1-提前给付型重疾险"><a href="#1-提前给付型重疾险" class="headerlink" title="1.提前给付型重疾险"></a>1.提前给付型重疾险</h3><p>对寿险来说，保障终身的寿险，客户一定能拿到赔付，毕竟人这一辈子终有一死。而对重疾险来说，即使设置为保障终身，但如果由于车祸等意外事故不幸身亡，被保险人还没“来得及”患上重疾就离开人世，自然是拿不到赔偿的。这种情况并不少见。 </p><p>对此，<strong>保险公司的解决方案是：在重疾险里添加死亡责任。</strong><br>换句话说，即使你没得病，但不幸亡故，保险公司也会赔偿。 这类重疾险名叫“<strong>提前给付型重疾险</strong>”。身患重疾或不幸身故，哪个提前发生，都可给付赔偿。但它和返本型保险类似，其代价依然是：支付更多的保费。</p><h3 id="2-什么叫“罹患”"><a href="#2-什么叫“罹患”" class="headerlink" title="2.什么叫“罹患”"></a>2.什么叫“罹患”</h3><p>在重疾险的理赔中，<strong>符合“罹患”要求的有三种情况。</strong></p><p><strong>第一，病情达到某个标准，相当于确诊即赔。</strong></p><p>比如恶性肿瘤：</p><blockquote><p>指恶性细胞不受控制地进行增长和扩散， 浸润和破坏周围正常组织，可以经血管、淋巴管和体腔扩散转移到身体其他部位的疾病。经病理学检查结果明确诊断，临床诊断属于世界卫生组织《疾病和有关健康问题的国际统计分类》的恶性肿瘤范畴。</p></blockquote><p><strong>第二，投保人为治疗某种疾病而接受了某种治疗方法。</strong></p><p>比如心脏瓣膜手术：</p><blockquote><p>为治疗心脏瓣膜疾病，实际实施了开胸进行的心脏瓣膜置换或修复的手术。</p></blockquote><p><strong>第三，某种状态持续了一段时间。</strong></p><p>比如脑中风后遗症：</p><blockquote><p>指因脑血管的突发病变引起脑血管出血、栓塞或梗死，并导致神经系统永久性的功能障碍。神经系统永久性的功能障碍，指疾病确诊180天后，仍遗留下列一种或一种以上障碍：<br>一肢或一肢以上的肢体机能完全丧失；<br>语言能力或咀嚼吞咽能力完全丧失；<br>自主生活能力完全丧失，无法独立完成六项基本日常活动中的三项或三项以上。</p></blockquote><p>所以，如果谁对你说重疾险是确诊即赔的，那他显然理解得过于简单了。</p><h3 id="3-除了重大疾病，重疾险还保这些"><a href="#3-除了重大疾病，重疾险还保这些" class="headerlink" title="3.除了重大疾病，重疾险还保这些"></a>3.除了重大疾病，重疾险还保这些</h3><p>在新增的责任里，</p><p><strong>第一类是“身故责任”。</strong><br>这种包含身故责任的重疾险，基本上都可以“提前给付”。 所谓“提前给付”，并不是“我比别的重疾险赔付得快”，这里的提前指的是重疾、身故二者中哪个先发生，就给付发个。</p><p><strong>第二类新增责任是轻症和中症责任。</strong><br>比如原位癌，作为癌症的早期阶段，原位癌相对容易治愈，属于轻症的一种。</p><p><strong>第三类新增责任是针对重大疾病的花样赔付方式。</strong><br>比如重疾和轻症可以赔付多次，又比如挑出某几个病 种额外赔付50%的保额，再比如投保后前10年享受保额额外增加50%，等等。</p><p>所有的赔付方式都是对风险的定价，然后把溢价加到原有价格中，就是这么简单。</p><p>绝不反对大家选择责任丰富的重疾险，而是希望大家坚守一个前提：<strong>选择重大疾病险时，最重要的是 做到保额满足需要。</strong></p><h3 id="4-重疾险的保额选择"><a href="#4-重疾险的保额选择" class="headerlink" title="4.重疾险的保额选择"></a>4.重疾险的保额选择</h3><p><strong>年收入20万元的小王，重疾险的保额应该是多少呢？</strong></p><p>这个问题没有正确答案，但有正确的思路。患重疾后，患者普遍面临的是3~5年的治疗康复期，与此同时，重疾导致收入中断将为家庭带来更大的压力。</p><p>因此，重疾险的保额应至少覆盖投保人3~5年的收入。所以，对于小王来说，60万元的重疾险保额一点 儿也不多。</p><p>收入没了，房贷还得还，银行可不管你是否得病；孩子和家人的正常生活也要继续，更不用说治病本身的高昂开销了。只要确保这款重疾险能提供60万元的重疾保额，有没有身故责任、多次赔付、投保人豁免，都无关紧要。</p><p>对于重疾险、定期寿险，可以保终身或者保到70岁左右的长期产品，是我们的首选——不仅价格更划 算，也不会出现保险中断的情况。</p><h3 id="5-如何确定保障期限"><a href="#5-如何确定保障期限" class="headerlink" title="5.如何确定保障期限"></a>5.如何确定保障期限</h3><p>和缴费期限相比，<strong>对消费者来说，最大的难点其实在于如何确定保障期限。</strong></p><p>保障期限的延长，会带来保费的升高。没办法，一个人年龄越大，罹患重疾的概率就越高。如果预算充 足，保终身当然是最好的选择。但如果我一时半会儿拿不出那么多钱，有没有什么权宜之计呢？</p><p>当然有。<strong>在确保保额充足的情况下，我们可以把保额拆成两个产品来实现，一个保到退休，另一个保终身。</strong></p><p>比如，对于需要60万元重疾险保额的小王来说，可以选择买一份保终身的30万元保额的重疾险，再买一 份保到70岁的30万元保额的重疾险。<br>这比直接购买一份保终身的60万元保额的重疾险，花费更少。这种终身险和定期险搭配购买的方法，一方面可以解决人生关键时期（退休前）的风险问题，另一方面可以确保步入老年后也有保障。</p><h2 id="四、医疗险"><a href="#四、医疗险" class="headerlink" title="四、医疗险"></a>四、医疗险</h2><p>看似复杂的医疗险其实只包括两种产品。</p><ul><li>第一种是包含门诊责任的商业医疗保险，可暂且称之为<strong>门诊医疗保险</strong>。</li><li>第二种是包含住院责任的商业医疗保险，我们称之为<strong>住院医疗保险</strong>。</li></ul><p>如果一个人罹患影响正常生活的重大疾病，那他主要面临的问题有两个：</p><ul><li>一是治疗费用太高，掏空家底；</li><li>二是无法继续工作，失去收入。</li></ul><p>前者可以靠<strong>商业医疗保险</strong>解决，后者则只能靠<strong>重疾险</strong>解决，两类保险的功能不一样。</p><p><em>（医疗险主要是看病之后报销的，看花费来报销；而重疾险是确诊后就赔付的钱。）</em></p><h2 id="五、团险"><a href="#五、团险" class="headerlink" title="五、团险"></a>五、团险</h2><p>在这里把企业团体保险统称为团险。</p><p>团险通常由4个保险产品组成：<strong>定期寿险、重大疾病险、意外险、医疗险。</strong></p><h3 id="1-团险举例"><a href="#1-团险举例" class="headerlink" title="1.团险举例"></a>1.团险举例</h3><p>这4个产品就是一份套餐里的汉堡、炸鸡、饮料和甜点，如果给这4个单品换点儿配料，又可以衍生出不同的口味，最终形成不同的保险责任。以这4个产品为基础，团险计划可以涵盖以下责任：</p><ul><li>1.罹患重大疾病：保额50万元(重大疾病险的重疾责任50万元）。</li><li>2.疾病导致身故：保额50万元（定期寿险身故责任50万元）。</li><li>3.意外导致身故：保额150万元（定期寿险身故责任50万元+意外险身故责任100万元）。</li><li>4.门诊责任：保额2万元（医疗险包含的门急诊医疗责任2万元）。</li><li>5.住院责任：保额30万元（医疗险包含的住院医疗责任30万元）。</li></ul><p>由此，公司便可以负责任地对员工说，不管是患重病还是身故，所有这些风险都由保险公司来承担。只要你在我公司工作一天，我就给你这份安心。</p><p>看到这里你可能会说，这么好的保险福利，一定要花不少钱。但如果我告诉你，这么多的福利，每年每人的价格只有2800元，平均每个月才200多元，你是不是觉得很值?（这里的保费计算前提是，假设该公司员工的平均年龄为35岁。）</p><h3 id="2-团险价格“亲民”原因"><a href="#2-团险价格“亲民”原因" class="headerlink" title="2.团险价格“亲民”原因"></a>2.团险价格“亲民”原因</h3><p>主要原因如下：</p><ul><li>第一，团险可以简单类比为团购，买的人数多，节省了一部分管理成本，自然就能获得一定的优惠。</li><li>第二，团险的主要销售对象是企业人力资源部，只要负责人拍板，100个员工就直接购买了，不用一个一 个地宣传、介绍，间接降低了产品的销售费用，最终的实惠落在了每一位参保员工身上。</li><li>第三，以企业名义投保，参保人员的工作环境和性质相对一致，外部风险可控，何况不少企业还有入职 体检，可以很好解决客户的逆选择和健康问题。而且，团险的核保是面向一个群体的核保，不用挨个询 问。因此，有些人即使因为小病无法购买重疾险，也可以通过团险来解决患重大疾病的风险问题。</li></ul><p>多人团购、核保宽松，除了这些原因外，团险价低的原因还在于其包含的保险产品的保障期限都是一年。<em>（我觉得这也是团险便宜的一个原因）</em></p><p>身边的朋友能享受到团险的大多来自两类公司：一类是外资跨国企业的中国分支机构；一类是部分金融企业，以私募、投行为主。<br><em>（我觉得国内一些互联网类公司好像也有的）</em></p><p>所以，建议大家用客观的态度看待公司为员工购买的团险。它是一种极好的员工福利，它应该是员工自 身已购保险的有力补充，却不能被当作全部。当你离职后，从零开始的除了你的事业，还有你的保险。</p><h2 id="六、健康告知"><a href="#六、健康告知" class="headerlink" title="六、健康告知"></a>六、健康告知</h2><p>健康告知，可以被看作核保的第一道防线，这道防线主要包含三部分内容：</p><ul><li>1.<strong>健康问询</strong>： 是否有疾病或住院记录等。这是健康告知中最主要的部分，因此，很多核保师都是医生出身，毕竟有了医学方面的专业知识，才能准确把握健康问题的严苛尺度。</li><li>2.<strong>职业问询</strong>： 是否从事高危行业。对于高空清洁工、武警战士等职业的从业者来说，他们面临的风险明显更高。</li><li>3.<strong>生活问询</strong>： 是否吸烟、酗酒（酒精依赖），是否有极限运动等危险性高的业余爱好等。 除了这三类问询，其他问询还会零散地涉及客户的保险购买情况等。</li></ul><p>当我们对照自身情况挨个看完健康告知后，会收到核保师的核保结论，内容不外乎以下4种：</p><ul><li><strong>结论一：标准体。</strong> 恭喜，你完美地符合健康告知中的所有要求，可以直接投保，无须做补充告知。</li><li>**结论二：次标准体。 **可能有少数几条不符合健康告知，但考虑到基本在可接受范围内，保险公司就“勉为其难”地允许你投保了。当然，有个前提条件：要么增加保费，要么接受除外责任。</li><li>**结论三：延期。 **保险公司考虑到你的某个健康问题，暂不接受你的本次投保申请，建议过一段时间再来试试。至于要等多久，不同公司、不同产品、不同疾病的情况皆不一样。<br>保险公司的意思说白了就是：你当下的风险过高，等等再说吧。遇到延期，我们应当分情况看待。比如，对于早产儿，通常要等到2岁以后才能申请投保；你当前某项血液指标异常，可能是因为最近半年的饮食过于油腻，且缺乏锻炼，假如花上半年时间锻炼以恢复体质，便很容易成功投保。但如果导致延期的是慢性疾病，可能短期内无法恢复，在这种情况下，我们会无奈地将延期看作“死缓”——和拒保没什么区别。</li><li><strong>结论四：拒保。</strong> 对不起，你的身体健康状况不符合健康告知的要求，相当于被保险公司判了“死刑”。</li></ul><p><strong>说实话，当保险公司把重疾险、医疗险这类保障型产品放到网上销售的时候，其实只是想卖给标准体客户。</strong></p><p>至于次标准体和非标准体客户，对不起，这类产品不是为他们准备的。不过，随着通过互联网购买保险的客户越来越多，次标准体客户的购买呼声也越来越高。为实现这一目标，保险公司和各大保险销售平台采取了两种解决方案。</p><p>一是电话咨询。有搞不清楚的问题？打电话。需补充就诊材料？发邮件。这能解决不少问题，也是目前普遍采用的方法。</p><p>二是<strong>智能核保</strong>。智能核保兴起于近几年，指越来越多的保险公司在重疾险、医疗险的投保流程中，针对具体问题设置问答环节。在这个环节中，你可以想象自己在和一个机器人对话，你每提供一个健康告知，对方便会就此问题进行详细询问，直到得出最终结论。</p><p>智能核保是个人非常推崇的核保方式，它本质上是将一条条细致的核保规则按照可能发生的问询流程进行整理，可在一定程度上实现“客户—代理人—核保师”三个角色的转换。未来几年内，智能核保的技术水平将会不断进步，提升客户的保险购买体验。</p><p><em>（现在基本上直接线上购买，智能核保就行，很简单方便。）</em></p><h2 id="七、相关法律法规"><a href="#七、相关法律法规" class="headerlink" title="七、相关法律法规"></a>七、相关法律法规</h2><h3 id="1-健康告知"><a href="#1-健康告知" class="headerlink" title="1.健康告知"></a>1.健康告知</h3><p><strong>《保险法》第十六条</strong></p><p>《中华人民共和国保险法》（以下简称“《保险法》”）第十六条对这类行为有明确规定：</p><blockquote><p>投保人故意或者因重大过失未履行前款规定的如实告知义务，足以影响保险人决定是否同意承保或者提高保险费率的，保险人有权解除合同。</p></blockquote><p>这里的“故意或者因重大过失”包含两种情况。</p><p><strong>一种是“我故意不告知”。</strong><br>比如，在骗保案件里，丈夫是医生，妻子是代理人，明知投保人的病情却不告知。在这种情况下，且不说他们的行为是否涉嫌欺诈罪，保险公司肯定连保费都不会退还。</p><p><strong>另一种是“我无意中没告知”。</strong><br>比如，健康告知里明确写了“最近1年内是否有血液检测结果异常”的细项。某客户在半年前的一次体检中，某项血液指标显示异常，体检报告上也有标注，但他投保时忘记了半年前的这件事。 投保后一年左右，该客户确诊患重型再生障碍性贫血，保险公司经核查发现，体检时的这项血液指标属于疾病的重要征兆，客户应在投保时告知。如果客户如实告知，保险公司便不会承保。<br><strong>在这种情况下，客户更多是无意的、非主观的，所以可以拿回已交保费。</strong>但到了这个时候，退还保费并无太大意义，没有获得赔偿才是问题所在。</p><p><strong>其实客户“因重大过失而未尽告知义务”这个问题，在实际案例中经常出现扯皮的情况，最终成为保险理赔纠纷中的常见难题。</strong></p><h3 id="2-赔付"><a href="#2-赔付" class="headerlink" title="2.赔付"></a>2.赔付</h3><p><strong>赔付相关问题中最突出的就是：保险条款内容艰涩，有些标准较为苛刻。其中以重大疾病险对于疾病的定义最为突出。</strong></p><h4 id="《健康保险管理办法》"><a href="#《健康保险管理办法》" class="headerlink" title="《健康保险管理办法》"></a>《健康保险管理办法》</h4><p>保险业这种不顾实际情况的咬文嚼字，连中华人民共和国保险监督管理委员会（以下简称“中国保监会”）都看不下去了。早在2006年，中国保监会发布的《健康保险管理办法》中就有规定： 保险公司在健康保险产品条款中约定的疾病诊断标准应当符合通行的医学诊断标准，并考虑到医疗技术条件发展的趋势。健康保险合同生效后，被保险人根据通行的医学诊断标准被确诊疾病的，保险公司不得以该诊断标准与保险合同约定不符为理由拒绝给付保险金。</p><p>中国保监会在2017年修订《健康保险管理办法》时，上述内容得到保留，而且关于消费者保护的内容更多、力度更大。精确、可量化本来就是专业、高效的代名词。只是在保险理赔领域，可量化的标准和实际操作情况两者之间的平衡确实太难掌握了。</p><h4 id="保险公司偿付能力"><a href="#保险公司偿付能力" class="headerlink" title="保险公司偿付能力"></a>保险公司偿付能力</h4><p>所谓<strong>偿付能力，指的是当保险公司遭遇极端情况时，是否仍有能力履行赔付责任。</strong><br>每个年度和季度，保险公司的精算、财务等专业人士都会编制公司偿付能力报告，涉及一系列数学模型和压力测试。</p><p>目前我国执行的<strong>第二代偿付能力监管制度</strong>（偿二代），是于2016年年初颁布实施的，堪称全球范围内姿态最审慎、涵盖面最广的偿付能力监管体系。 根据偿付能力情况，保险公司会得到从优到差的评级，包括A、 B、C、D4个等级。<br><strong>评级可以在保险公司官网的“公开信息查询”栏目查到</strong>，我们将它视为判断保险公司是否“靠谱”的一个重要标志。长期来看，只要评级稳定在A和B的公司，我们都可以放心购买其产品。</p><h3 id="3-重疾险不能单独处理甲状腺癌"><a href="#3-重疾险不能单独处理甲状腺癌" class="headerlink" title="3.重疾险不能单独处理甲状腺癌"></a>3.重疾险不能单独处理甲状腺癌</h3><p>2018年5月，中国银保监会发布《关于组织开展人身保险产品专项核查清理工作的通知》，明确要求保险公司不得出现下列行为：</p><blockquote><p>重大疾病保险产品对恶性肿瘤责任中的甲状腺恶性肿瘤进行单独处理，责任设计不合理，设置较低的保险金额，变相缩小产品的保障范围。</p></blockquote><p><em>（不过 ，现在关于这个甲状腺癌一直在说好像要移出重疾了。具体情况看当前重疾险的说明）</em></p><h2 id="八、选购保险产品三个重点"><a href="#八、选购保险产品三个重点" class="headerlink" title="八、选购保险产品三个重点"></a>八、选购保险产品三个重点</h2><p>汽车三大件是什么？所谓三大件，指的是发动机、变速箱、底盘。汽车的这三大件，决定了整车的动力和驾驶性能，也是其核心技术。</p><p>保险产品，其实也有三大件。保险责任，就是其中之一，余下两大件分别是保险产品的保额和期限。</p><p>一条原则：<strong>责任、保额、期限这三样东西是我们选购保险产品是最重要的关注点。</strong></p><p><strong>责任的多少、保额的高低、期限的长短，这三大因素直接决定了保险产品的价格。</strong></p><h3 id="1-保险责任"><a href="#1-保险责任" class="headerlink" title="1.保险责任"></a>1.保险责任</h3><p>保险责任决定了产品的形态，多种形态的产品组成一份保险计划。把保险责任弄清楚，就想弄清楚，你爱不爱吃牛肉一样，最终会帮助你选对“套餐”。</p><p><strong>你最需要向他们咨询的就是这款产品的责任到底是什么 、承担什么风险、解决什么问题。</strong><br>弄明白自己需要的保险责任才是最重要的。</p><p>要记住：<strong>短期险发挥的只是补充作用。</strong>如果我们一开始就完全倚仗一年期产品，那么未来遇到问题的概率会很高。 </p><p>对于初入职场的单身一族来说，正确的做法是，先确定哪些需求是一定要解决的，根据优先级列出清单：</p><ul><li>1.得了重疾，有钱治病；</li><li>2.得了重疾，弥补治疗期间的收入；</li><li>3.不幸身故，给爸妈留一笔养老费；</li><li>4.意外受伤，解决医保不包含的费用。</li></ul><p>可以根据以上4项需求，找到对应的保险产品，并结合自己的收入确定保额。在此基础上，如果发现保终身的产品价格过高，就选择八到60岁或者70岁；如果你还是觉得难以承受，可以选择减少保额，直至找到自己预算范围内的产品规划。</p><p>保险这种产品不是一次性的，它是陪伴你度过漫长人生的一种风险规划。</p><h2 id="九、保险业务员"><a href="#九、保险业务员" class="headerlink" title="九、保险业务员"></a>九、保险业务员</h2><p>第一，保险代理人。他们代表各自所在的保险公司，只销售某一家保险公司的产品。 </p><p>第二，保险经纪人。和代理人最大的不同是，经纪人代表的不是某一家保险公司，而是保险中介公司，他们可以销售多家保险公司产品。</p><p>第三，银行理财经理。无论是在网点柜台，还是网上银行，我们都能找到银行代理的各家保险公司的产品。</p><p>第四，互联网第三方平台。通过互联网购买保险的行为，正变得越来越普遍。不管是腾讯、阿里巴巴这样的互联网巨头，还是专做保险金融的垂直网站，都属此类。<br><em>（现在互联网销售平台很方便的。）</em></p><p>一个不容忽视的客观事实是：<strong>保险代理人是一个流动性极大的职业，当年向你销售保险的人，可能已经离开了这个行业。</strong><br>在保险公司里，由于销售人员离职造成的保单无人管理的问题非常普遍，这类保单被形象地称为“孤儿保单”。</p><p>卖保险其实一点儿也不简单，方方面面的知识都要涉及，真正合格的保险销售人员应当具备融会贯通的能力。<br><strong>首先，应对保险精算有基本的认识。</strong>产品贵不贵(同类产品的定价和费率对比)？到底有哪些保障(保险责任的解读)？退保能拿到多少保费(保单现金价值的解读)？买完后哪些信息可以修改(对保单保全功能的讲解)？ ……</p><p><strong>其次，要有基本的金融知识。</strong>如果以理财为目的，这个产品能实现多高收益(如何计算分红险、万能险、年金等产品的投资收益)？缴费期限怎么选择(现金流贴现原理)？ ……</p><p><strong>再次，要具备基本的保险法律知识。</strong>保险条款里有没有所谓的坑(除外责任做重点说明)？遇到结婚的时候如何处理？ ……</p><p>除此之外，对重疾险、医疗险的健康险产品涉及的核保规则、疾病定义、理赔标准，要能有理有据地提供解答。</p><h2 id="十、理财保险"><a href="#十、理财保险" class="headerlink" title="十、理财保险"></a>十、理财保险</h2><p>欧美和日本的经验证明，随着中产阶级的增加和老龄化的逼近，以养老金为代表的长期保险资金将会成为居民的重要投资方式。</p><h3 id="1-年金保险"><a href="#1-年金保险" class="headerlink" title="1.年金保险"></a>1.年金保险</h3><p>第一种保险之所以“算不清楚”收益，是因为你交的保费并非在某个时间点一次性返还给你，而是像分期贷款一样，逐年返还给你。年金保险往往属于此类。</p><p>下面，请你把自己当成银行，把保险公司当成月供一族。你购买理财保险，实际上就是向保险公司放 贷，保险公司在未来的岁月里向你定期还款（你领取年金）。那么，如果你连“放贷利率”都不知道， 这生意岂不是白做了？ 为了确定“放贷利率”，你必须拥有一项技能：<strong>计算内部收益率。</strong></p><p>年金险产品，都要遵从一个规定：<strong>内部收益率不能超过4.025%。</strong>这是监管部门为了防止利差 损而制定的规则 。<br><em>（这是以前的，现在肯定没这么高，好像降到3.5%还是多少了）</em></p><h3 id="2-万能险、连结险"><a href="#2-万能险、连结险" class="headerlink" title="2.万能险、连结险"></a>2.万能险、连结险</h3><p>交一笔钱，过段时间取出来，要么多了（赚了），要么少了（亏了），这种收益率非常好算。连结险和万能险就属于这类理财保险产品。</p><p>最好理解的就是投资<strong>连结险</strong>，其理财风格最彪悍，对它来说，债券可以买，基金可以买，股票也可以 买。而且，它不对比例做限制。</p><p><strong>万能险</strong>则没那么激进，虽然也可以选择股票作为投资对象，但资金运用比例受到一定的限制。更重要的 是，万能投资账户设置了保底收益，客户起码不会有亏损的风险。</p><p>事实上，万能险本就是为了同时满足理财和保障两大需求而诞生的。</p><p>其实，获取大规模的资金，在任何时候都是保险公司的重要功能甚至是首要功能。为了达到资金的规模 效应，单靠重疾险、定期寿险这类产品聚拢资金，是远远不够的。而市场上几乎没有不做理财保险的保 险公司，这意味着保险公司的投资能力对其生存发展而言至关重要。</p><p>保险产品的价格<br>保险产品的价格不仅仅由风险发生率决定。这就好像一瓶农夫山泉，其成本主要由三部分构成：取水成 本、运输成本、营销成本。只看一个因素不足以得出结论。同样的道理，重疾险的成本也包含三部分： <strong>预定利率、重疾发生率及费率。</strong></p><p><em>（前几年5%年收益率的万能险很火，后来就叫停了、没了。然后收益率就降了 ，大概4点几，抑或 往3点几去了吧，也可能没这产品了。）</em></p><h2 id="十一、定制保险方案"><a href="#十一、定制保险方案" class="headerlink" title="十一、定制保险方案"></a>十一、定制保险方案</h2><h3 id="1-如何给孩子买保险"><a href="#1-如何给孩子买保险" class="headerlink" title="1.如何给孩子买保险"></a>1.如何给孩子买保险</h3><p>弄清楚孩子面临的风险，是科学配置保险的前提条件。和孩子相关的风险其实很简单，几乎都和疾病相 关，一点儿也不复杂。</p><p><strong>风险一：身患危重疾病</strong></p><p>比如少儿群体中发病率最高的恶性肿瘤白血病，是大家公认的重大风险。白血病占全部儿童恶性肿瘤的 35.9%。<br>孩子一旦患危重疾病，除了需要长期投入高额治疗费用，父母也可能为了照顾孩子而辞掉工作。因此， <strong>重疾险</strong>和<strong>高保额住院医疗险</strong>是应该首先为孩子配置的保险。</p><p>重疾险的价值在于，罹患重疾后一次性获得定额赔偿，可作为自费治疗费用和家庭收入中断的补偿。<br>高额住院医疗险的价值在于应对高额的医疗费用，尤其是许多医保范围外的自费项目。只要产生了必要且合理的医疗开销，在保额范围内花多少保险公司就赔付多少。几百万元的高保额医疗险，可以在这方面为家庭提供充足的预算支持。</p><p><strong>风险二：发生意外受伤</strong></p><p>因交通事故、跌倒、坠落造成的意外伤害和身故，在孩童的意外险理赔中的占比最高。<br><em>（所以上学后，学校都会让买意外险，记得从小上学就有买保险）</em></p><p><strong>风险三：身患一般疾病</strong></p><p>和危重疾病相比，小病小灾在孩子们身上要常见得多。每逢儿童流感季，各医院 的儿科科室永远人满为患。</p><p>政府严格限制未成年人身故可获得的赔偿金额。即使父母从几十家保险公司给孩子买了几十份寿险、意外险，一旦孩子身故，获得的赔偿都不能超过特定限额。</p><p>10岁以下的未成年人的身故赔偿限额是20万元。10~18岁的未成年人，身故赔偿限额是50万元（注意：航空意外、自然灾害意外不受此规定限制）。</p><p><strong>孩子真正需要的商业保险其实只有三款： 重大疾病险、 意外险、 高额住院医疗。</strong></p><p><strong>为孩子配置保险的关键点</strong></p><ul><li>1.作为父母，先把自己的保险配置好，因为你才是孩子最大的“保险”；</li><li>2.在购买任何商业保险之前，先为孩子办理好当地的少儿医保，这是政府给予的福利，一 定要充分利用；</li><li>3.结合自身预算，首先配置高保额的重大疾病险和住院医疗险，其他的保险则量力购买。</li></ul><h3 id="2-如何给父母买保险"><a href="#2-如何给父母买保险" class="headerlink" title="2.如何给父母买保险"></a>2.如何给父母买保险</h3><p>给父母配置保险，主要考虑的应该是<strong>重疾险、医疗险和意外险。</strong></p><p><strong>防癌险</strong></p><p>患有高血压、心脏病、糖尿病的老年人，可以直接和重大疾病险、住院医疗险说再见了。保险公司也意识到了这个问题，于是想了一个办法：双方各退一步。保险公司把保障范围缩小，限制也随之减少。但这个保障范围不能太小，得有存在的意义。</p><p>于是，防癌类保险应运而生。重疾险涵盖的几十种疾病，只保留第一项，即恶性肿瘤；住院医疗险涵盖的所有疾病的住院责任，也只保留一项，即癌症住院责任。 在给家庭带来巨大压力的重大疾病中，恶性肿瘤占70%。笼统地说恶性肿瘤你可能没有概念，但如果我说一款保险既保白血病，又保胃癌、肺癌，还保身体所有器官的癌症，听上去是不是挺全面的。</p><p><strong>给父母买保险的技巧</strong></p><p>第一，确保父母双方都有社会医疗保险。不管是城市的居民医保，还是农村的“新农合”，没有的话，赶紧先把社会医保办好。<em>（现在基本上都买了这个）</em></p><p>第二，遇到疑难杂症，不少人会选择带父母来北上广等大城市就诊。所以，请提前研究好医保的异地结算流程，确保不让医保“白交”，这一点非常有必要。</p><p>第三，详细了解爸妈的身体健康情况，对症下药买保险。</p><h3 id="3-如何给自己买保险"><a href="#3-如何给自己买保险" class="headerlink" title="3.如何给自己买保险"></a>3.如何给自己买保险</h3><h4 id="1-18岁保险清单"><a href="#1-18岁保险清单" class="headerlink" title="1).18岁保险清单"></a>1).18岁保险清单</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">**学生团体保险**：</span><br><span class="line">包含意外身故&#x2F;伤残责任，意外医疗责任，住院医疗责任；预算为200 元。</span><br><span class="line"></span><br><span class="line">或自己投保：</span><br><span class="line">**意外险**：包含意外身故&#x2F;伤残责任，意外医疗责任；预算为200元（保额为50万元）。</span><br><span class="line">**医疗险**：包含疾病导致的住院医疗责任，预算为200元。</span><br><span class="line"></span><br><span class="line">**保障速览**</span><br><span class="line">身故补偿（仅限意外原 因）：50万元。</span><br><span class="line">意外医疗补偿：1万元（上限）。</span><br><span class="line">住院医疗补偿：100万元（上限）。</span><br></pre></td></tr></table></figure><h4 id="2-22岁保险清单"><a href="#2-22岁保险清单" class="headerlink" title="2).22岁保险清单"></a>2).22岁保险清单</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">**新增保险情况**</span><br><span class="line">**定期寿险A**：受益人为父母，保额大约相当于父母5年的退休金；预算为每年500元（保额 50万元，保障期30年，缴费期30年）。</span><br><span class="line"></span><br><span class="line">**保障速览**</span><br><span class="line">身故补偿（不限死亡原因）：50万元。</span><br><span class="line">额外身故补偿 （仅限意外原因）：50万元。</span><br><span class="line">意外医疗补偿：1万元（上限）。</span><br><span class="line">住院医疗补偿：100万元（上限）。</span><br></pre></td></tr></table></figure><h4 id="3-28岁保险清单"><a href="#3-28岁保险清单" class="headerlink" title="3).28岁保险清单"></a>3).28岁保险清单</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">对一个家庭来说，称得上灭顶之灾的只有两件事：身患重疾，不幸身故。前者靠重大疾病险和医疗险来 应对，后者靠定期寿险来应对。</span><br><span class="line"></span><br><span class="line">**新增保险情况**</span><br><span class="line">**定期寿险B**：受益人为法定受益人，保额约等于5倍年薪；</span><br><span class="line">预算为每年1000元（保额80万 元，保到60岁，缴费期30年）。</span><br><span class="line">**重大疾病险A**：保额约等于购买时的3倍年薪；预算为每年5000元（保 额50万元，保到70岁，缴费期30年）。</span><br><span class="line"></span><br><span class="line">**保障速览**</span><br><span class="line">身故补偿（不限死亡原因）：130万元。</span><br><span class="line">额外身故补偿 （仅限意外原因）：50万元。</span><br><span class="line">意外医疗补偿：1万元（上限）。</span><br><span class="line">住院医疗补偿：100万元（上限）。</span><br><span class="line">重大疾病补偿：50万元。</span><br></pre></td></tr></table></figure><h4 id="4-32岁保险清单"><a href="#4-32岁保险清单" class="headerlink" title="4).32岁保险清单"></a>4).32岁保险清单</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">**新增保险情况**</span><br><span class="line">**意外险**：包含意外身故&#x2F;伤残责任；预算为每年400元（保额100万元）。</span><br><span class="line">**减额定期寿险 C**：受益人为法定受益人，保额等于房贷总额；预算为每年2000元（保额150万元，保障期30年，缴费期 20年）。</span><br><span class="line">**重大疾病险B**：提升重疾保额；预算为每年5000元（保额30万元，保终身，缴费期30年）。</span><br><span class="line"></span><br><span class="line">**保障速览**</span><br><span class="line">身故补偿（不限死亡原因）：130万元。</span><br><span class="line">额外身故补偿（仅限意外原因）：150万元。</span><br><span class="line">意外医疗补偿： 1万元（上限）。</span><br><span class="line">住院医疗补偿： 100万元（上限）。</span><br><span class="line">重大疾病补偿： 80万元。</span><br></pre></td></tr></table></figure><h4 id="5-32岁保险清单"><a href="#5-32岁保险清单" class="headerlink" title="5).32岁保险清单"></a>5).32岁保险清单</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">已经购买的三份定期寿险，分别是为了父母的养老、配偶的生活、房贷的偿还，现在你需要为孩子买一 份定期寿险了。</span><br><span class="line"></span><br><span class="line">**新增保险情况**</span><br><span class="line">**定期寿险D**：受益人为子女，保额相当于孩子5年的生活费；预算为每年4000元（保额100 万元，保到60岁，缴费期20年）。</span><br><span class="line">**养老保险**（60岁领取）：预算为每年60000元（每月5000元）。</span><br><span class="line"></span><br><span class="line">**保障速览**</span><br><span class="line">意外险：包含意外身故&#x2F;伤残责任，意外医疗责任；预算为每年200元（保额50万元）。</span><br><span class="line">意外险：包含意外身故&#x2F;伤残责任；预算为每年400元（保额100万元）。</span><br><span class="line">医疗险：包含疾病导致的住院医疗责任；预算为每年200元。</span><br><span class="line">定期寿险A：受益人为父母，保额相当于父母5年的退休金；预算为每年500元 （保额50万元，保障期30年，缴费期30年）。</span><br><span class="line">定期寿险B：受益人为法定受益人，保额相当于自己5倍 的年薪。预算为每年1000元（保额80万元，保到60岁，缴费期30年）。</span><br><span class="line">减额定期寿险C：受益人为法定 受益人，保额等于房贷总额；预算为每年2000元（保额150万元，保障期30年，缴费期20年）。</span><br><span class="line">定期寿险D：受益人为子女，保额相当于孩子5年的生活费；预算为每年4000元（保额100万元，保到60岁，缴 费期20年）。</span><br><span class="line">重大疾病险A：保额相当于自己当时的3倍年薪；预算为每年5000元（保额50万元，保到70 岁，缴费期30年）。</span><br><span class="line">重大疾病险B：提升重疾险保额；预算为每年5000元（保额30万元，保终身，缴费 期30年）。</span><br><span class="line">养老保险（60岁领取）：预算为每年60000元（每月5000元）。</span><br></pre></td></tr></table></figure><p>至此，你大概终于明白了：</p><p>给自己买保险，不能一蹴而就，应随着人生进入不同阶段而分步实施。在这个过程中，我们需要对自己的情感进行再分配，说到底就是，回答“<strong>为谁买保险</strong>”的问题。<br>比如，涉及医疗补偿的保险（如住院医疗险、重大疾病险)，是为了让自己不至于被疾病掏空腰包；再比如，涉及身故补偿的保险（如定期寿险、意外险)，是为了让家人能够继续维持原来的生活水准。</p><h2 id="十二、个人总结"><a href="#十二、个人总结" class="headerlink" title="十二、个人总结"></a>十二、个人总结</h2><p>购买保险的步骤（纯属个人浅见）：</p><p>1.了解几种保险情况，匹配自己的风险需求。<br>挑选好想要买的保险品种（比如意外险+重疾险+寿险，这个选择自己合适的就好）。</p><p>2.每个品种从一些网红产品（有利于我们做一个快速过滤）中挑出几家公司的产品。<br>对比挑出来的几种产品的公司情况和产品详情（网红产品一般网上会有一些对比的文章，可以参考）。一些互联网平台，热门的产品里挑一下。</p><p>3.找平台（靠谱的平台或者官网）的保险顾问咨询、确认。<br>像互联网平台这些，都会直接给你配一个保险的顾问经理，直接问就行了。比如有健康告知不明确的，或者职业不明确的。</p><h3 id="个人保险配置（推荐）"><a href="#个人保险配置（推荐）" class="headerlink" title="个人保险配置（推荐）"></a>个人保险配置（推荐）</h3><p>纯属个人想法。有自己想法的，忽略就好；没有自己想法的，可以看一下我的想法。</p><p>关于书中<strong>定制保险方案</strong>这一块，反正就看一下，了解一下。<br>说白了 ，反正就寿险、重疾、医疗和意外这4种。</p><p><strong>保险能买就早点买</strong></p><p>如果能买的话，</p><ul><li>1).重疾险：长期险。这虽然不是确诊即赔，反正差不多就是这么理解，得了这病，确诊后就能拿到赔偿金额的。一般都是分N年付款的，保到多久（比如70岁，保终身）的。</li><li>2).寿险：长期险。反正也是可以分N年交费，保到多久的。</li><li>3).医疗险：有2种。即有长期险，也有短期险（保1年）的。能买长期的，当然买个长期的，比如保证续保多少年的。毕竟保1年的短期险，是不保证能续保的。（”惠民保”类就是短期1年的医疗险）</li><li>4).意外险：一般都带意外医疗。因为长期是比短期的要贵的 ，意外险就用不着长期了 ，因为意外险一般没啥限制，所以短期（保1年）就行，每年买一下。</li></ul><p>至于年金险这些理财型的，看自己理财、养老这方面的需要吧。</p><p>比如有些不能买的话，<br>像我自己前几年想买的时候，发现每年的体检突然有了肺结节，所以重疾、寿险、医疗险都不用想了，都不能买了。</p><p>所以自己就只买了个高额意外险。<br>幸好有”惠民保”这种产品，相当于补充的医疗险。</p><blockquote><p><strong>“惠民保”</strong><br>前两年开始，全国各地地方政府有推一个“惠民保”（大概这名字，各地名字不同，保的东西也略有不同，也有全国版的）的商业保险。就是保1年的短期的医疗险。一年大概只要100-200左右。</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 读书笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 读书笔记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>TPLink路由器无线桥接、无线中继</title>
      <link href="/2022/05/21/TPLink%E8%B7%AF%E7%94%B1%E5%99%A8%E6%97%A0%E7%BA%BF%E6%A1%A5%E6%8E%A5%E3%80%81%E6%97%A0%E7%BA%BF%E4%B8%AD%E6%96%AD/"/>
      <url>/2022/05/21/TPLink%E8%B7%AF%E7%94%B1%E5%99%A8%E6%97%A0%E7%BA%BF%E6%A1%A5%E6%8E%A5%E3%80%81%E6%97%A0%E7%BA%BF%E4%B8%AD%E6%96%AD/</url>
      
        <content type="html"><![CDATA[<p>原来用的一台TPLink的路由器，之前换成小米AC2100了（千兆路由器），还换了网线，开了5G配置，带宽300+M。</p><p>然后路由器在我房间，所以在我房间信号当然没啥问题，用了快2年了，然后爹妈反应现在在客厅有时候WiFi信号不行，压根用不了。（我自己基本上是在厨房信号的确不行，别的地方好像没啥问题）</p><a id="more"></a><p>于是，把旧的那台TPLink的路由器找出来了（原来也没坏，就是觉得不好用了吧），准备扔客厅，搭个无线桥接试一下。回头如果还是不好用，再买个新路由器做无线桥接看看。</p><p>TPLink的路由器做无线桥接、设置很方便。</p><h2 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h2><ul><li>1.有一台正常使用的路由器（小米AC2100），作为主路由器。</li><li>2.一台副路由器（TPLink）的连接上电源。</li><li>3.用手机或平板进入副路由器（TPLink）的管理页面，进行操作。</li></ul><h2 id="TPLink路由器无线桥接设置"><a href="#TPLink路由器无线桥接设置" class="headerlink" title="TPLink路由器无线桥接设置"></a>TPLink路由器无线桥接设置</h2><h3 id="1-设备连接副路由器（TPLink）WiFI信号"><a href="#1-设备连接副路由器（TPLink）WiFI信号" class="headerlink" title="1.设备连接副路由器（TPLink）WiFI信号"></a>1.设备连接副路由器（TPLink）WiFI信号</h3><p>副路由器（TPLink）接上电源后，用手机或平板连接副路由器（TPLink）的WiFi信号。</p><p>当然，你用电脑也可以，电脑有无线的直接连无线信号，没有无线的台式就需要网线连接了。</p><h3 id="2-登录TPLink路由器管理页面"><a href="#2-登录TPLink路由器管理页面" class="headerlink" title="2.登录TPLink路由器管理页面"></a>2.登录TPLink路由器管理页面</h3><p>一般是”192.168.1.1” 或 “192.168.0.1”，以前用过的路由器就直接用密码登录就行。<br>如果忘记密码了，就把路由器重置一下（恢复之后，用默认的密码登录）。</p><img                       lazyload                     src="/images/loading.svg"                     data-src="/img/TPLink_wifi_bridging_1.png"                                     ><p>名称设置不设置也无所谓，反正设置桥接后会设置的，只要登录成功了就行。</p><h3 id="3-【无线桥接】设置"><a href="#3-【无线桥接】设置" class="headerlink" title="3.【无线桥接】设置"></a>3.【无线桥接】设置</h3><p>1).打开【应用管理】-&gt;【无线桥接】，进入<br><img                       lazyload                     src="/images/loading.svg"                     data-src="/img/TPLink_wifi_bridging_2.png"                                     ></p><p>2).选择桥接的主路由器</p><p>开始设置后，会扫出附近的无线名称，我这里选择主路由器（小米AC2100），选择之后会要输入主路由器设置的无线密码。<br><img                       lazyload                     src="/images/loading.svg"                     data-src="/img/TPLink_wifi_bridging_3.png"                                     ></p><p>连接成功后，然后会从主路由器自动获取IP地址，直接下一步。<br><img                       lazyload                     src="/images/loading.svg"                     data-src="/img/TPLink_wifi_bridging_4.png"                                     ></p><p><strong>注意</strong>：把这个ip记一下，因为下次再进入副路由器（TPLink）的管理页面，就不是 192.168.0.1了，而是这个ip地址了。（我这里是 192.168.31.201）</p><p>3).副路由器的无线名称设置</p><p>这里会有个提示：</p><blockquote><p>推荐将本路由器的无线名称和密码更改为与主路由器一致，请确认以下更改：</p></blockquote><p>然后看到无线名称和无线密码是跟主路由器设置的一样的。</p><p>个人建议还是不要一致了，因为如果一致连上这个WiFi信号的时候就不清楚是哪个了。当然，后面也可以再修改（就是麻烦一点，要确认连上的是这个路由器的WiFi信号）。</p><p>建议直接无线名称后面加上<code>-2</code>就行，密码可以一致。</p><p>最后完成后路由器会重启。</p><p>4).查看副路由器（TPLink）DHCP服器设置</p><p>因为这个无线桥接是要关闭这个DHCP服务的，否则连接了TPLink的好像不能上网。</p><p>TPLink的打开DHCP设置，看到直接变成【自动】选项了，那就是关闭了。不用再手动关了。</p><h3 id="4-小结"><a href="#4-小结" class="headerlink" title="4.小结"></a>4.小结</h3><p>所以TPLink的路由器无线桥接，作一个副路由器是很方便的。</p><p>差不多直接下一步下一步就行，也不用设什么ip。<br>就是无线名称设置我觉得可以改一下，简单标识一下。这样哪个信号好，可以自己选择一下。密码反正设置的一样的，输过一次后也不用输入。</p><img                       lazyload                     src="/images/loading.svg"                     data-src="/img/TPLink_wifi_bridging_5.png"                                     ><p>PS.效果咋样还不知道，看了一下订单，发现是15年买的TPLink了。别的路由器只要有这个设置选项的，应该都很简单。</p><h2 id="小米路由器无线中继设置"><a href="#小米路由器无线中继设置" class="headerlink" title="小米路由器无线中继设置"></a>小米路由器无线中继设置</h2><p>设置基本上跟TPLink没啥区别，直接先连上一台主路由器后，再把副路由器（小米路由器）插上电源，登录管理地址（小米的默认是：192.168.31.1）。</p><p>进入【常用设置】-&gt;【上网设置】-&gt;【工作模式切换】，选择“无线中继工作模式”就行了。</p><p>后面的设置也是一样的，是否要双频合一（2.4G和5G合一），然后也一样会分配一个ip，这个就是之后这个作中继器的副路由器的管理地址了（而不是原来的192.163.31.1了）。这个地址进主路由器管理页面里也能查看的。</p>]]></content>
      
      
      <categories>
          
          <category> Windows </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Windows </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Python 批量转换图片格式</title>
      <link href="/2022/05/20/Python-%E6%89%B9%E9%87%8F%E8%BD%AC%E6%8D%A2%E5%9B%BE%E7%89%87%E6%A0%BC%E5%BC%8F/"/>
      <url>/2022/05/20/Python-%E6%89%B9%E9%87%8F%E8%BD%AC%E6%8D%A2%E5%9B%BE%E7%89%87%E6%A0%BC%E5%BC%8F/</url>
      
        <content type="html"><![CDATA[<p>跟之前一篇文章：<a href="/2022/05/10/Python-%E6%89%B9%E9%87%8F%E4%BF%AE%E6%94%B9%E5%9B%BE%E7%89%87%E5%B0%BA%E5%AF%B8/" title="Python 批量修改图片尺寸">Python 批量修改图片尺寸</a> 一样，用的也是PIL的库。</p><p>PIL(Python Imaging Library)是Python的第三方图像处理库，但由于其强大的功能，事实上已经被认为是图像处理标准库了。PIL功能非常强大，而且API却非常简单易用。</p><p>由于PIL仅支持到Python 2.7，加上年久失修，于是一群志愿者在PIL的基础上创建了兼容的版本，名字叫Pillow，支持最新Python 3.x，又加入了许多新特性，因此，我们可以直接安装使用Pillow。</p><a id="more"></a><h2 id="安装Pillow库"><a href="#安装Pillow库" class="headerlink" title="安装Pillow库"></a>安装Pillow库</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install Pillow</span><br></pre></td></tr></table></figure><p>官方文档上有提供Pillow支持的Python 版本。基本上Python3.7+版本对Pillow新版都是支持的。<br>（<a class="link"   href="https://pillow.readthedocs.io/en/latest/installation.html" >https://pillow.readthedocs.io/en/latest/installation.html<i class="fas fa-external-link-alt"></i></a> ）<br><img                       lazyload                     src="/images/loading.svg"                     data-src="/img/Python_image_resize_1.png"                                     ></p><h2 id="批量转换图片格式"><a href="#批量转换图片格式" class="headerlink" title="批量转换图片格式"></a>批量转换图片格式</h2><p><strong>解决思路</strong>：</p><ul><li>第一步，新建一个新的目录，用来存放转换好格式的图片（比如直接在目录后面加个格式类型）</li><li>第二步，用os.listdir(path) 方法获取path目录下所有的图片文件名，返回一个List；</li><li>第三步，遍历列表，处理每一张图片，把文件名原来的后缀去掉，保存的时候把新的后缀（格式类型）加上。</li></ul><p><strong>完整代码实现</strong>如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> PIL <span class="keyword">import</span> Image</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"></span><br><span class="line"><span class="comment"># 批量转换图片格式为pic_type格式</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">convert_image_format</span>(<span class="params">path, pic_type</span>):</span></span><br><span class="line">    outdir = path + <span class="string">&#x27;_&#x27;</span> + pic_type <span class="comment"># &#x27;C:\pictest_jpg&#x27;</span></span><br><span class="line">    mkdir(outdir)</span><br><span class="line">    file_list = os.listdir(path)</span><br><span class="line">    <span class="comment"># print(file_list)</span></span><br><span class="line">    <span class="keyword">for</span> file <span class="keyword">in</span> file_list:</span><br><span class="line">        <span class="keyword">with</span> Image.<span class="built_in">open</span>(path+<span class="string">&#x27;\\&#x27;</span>+file) <span class="keyword">as</span> image:</span><br><span class="line">            filename = os.path.splitext(file)[<span class="number">0</span>]</span><br><span class="line">            <span class="keyword">if</span>(image.mode != <span class="string">&#x27;RGB&#x27;</span>):</span><br><span class="line">                image = image.convert(<span class="string">&#x27;RGB&#x27;</span>)</span><br><span class="line">            image.save(outdir+<span class="string">&#x27;\\&#x27;</span>+filename+<span class="string">&#x27;.&#x27;</span>+pic_type)</span><br><span class="line"></span><br><span class="line">convert_image_format(path=<span class="string">r&#x27;C:\pictest&#x27;</span>, pic_type=<span class="string">&#x27;jpg&#x27;</span>) <span class="comment"># 把图片都转成jpg格式</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Python中with - as用法</title>
      <link href="/2022/05/20/Python%E4%B8%ADwith-as%E7%94%A8%E6%B3%95/"/>
      <url>/2022/05/20/Python%E4%B8%ADwith-as%E7%94%A8%E6%B3%95/</url>
      
        <content type="html"><![CDATA[<p>最常见到的用到with as的地方，比如打开文件的时候：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&quot;1.txt&quot;</span>) <span class="keyword">as</span> file:</span><br><span class="line">    data = file.read()</span><br><span class="line">    <span class="built_in">print</span>(data)</span><br></pre></td></tr></table></figure><p>为什么要用with as，可以理解为是简化版的 try except语句，可以处理异常。</p><a id="more"></a><h2 id="为什么要用with-as"><a href="#为什么要用with-as" class="headerlink" title="为什么要用with as"></a>为什么要用with as</h2><p>比如，上面的代码，不用with as 写法，一般这样写：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">file = <span class="built_in">open</span>(<span class="string">&quot;1.txt&quot;</span>)</span><br><span class="line">data = file.read()</span><br><span class="line"><span class="built_in">print</span>(data)</span><br><span class="line">file.close</span><br></pre></td></tr></table></figure><p>这样就会有个问题：当”1.txt”文件不存在的时候，就会报异常，就需要处理异常，或者先判断文件是否存在。你就可能需要这样写：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    file = <span class="built_in">open</span>(<span class="string">&#x27;1.txt&#x27;</span>)</span><br><span class="line">    data = file.read()</span><br><span class="line">    <span class="built_in">print</span>(data)</span><br><span class="line"><span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">    <span class="built_in">print</span>(e)</span><br><span class="line"><span class="keyword">finally</span>:</span><br><span class="line">    file.close()</span><br></pre></td></tr></table></figure><p>而用with as就不需要这么麻烦了，能自动处理异常。</p><p><strong>with as</strong>语句结构如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">with</span> expression <span class="keyword">as</span> [variable]:</span><br><span class="line">    <span class="comment"># 代码块，对[variable]的操作等</span></span><br></pre></td></tr></table></figure><h2 id="with-工作原理"><a href="#with-工作原理" class="headerlink" title="with 工作原理"></a>with 工作原理</h2><p>with所求值的对象必须有一个enter()方法，一个exit()方法。</p><ul><li>1.紧跟with后面的语句被求值后，返回对象的<code>__enter__()</code>方法被调用，这个方法的返回值将被赋值给as后面的变量；</li><li>2.当with后面的代码块全部被执行完之后，将调用前面返回对象的<code>__exit__()</code>方法。所以也不用close()了。</li></ul><p>比如下面的代码：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Sample</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__enter__</span>(<span class="params">self</span>):</span> <span class="comment"># 3</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;In __enter__()&quot;</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;Foo&quot;</span></span><br><span class="line"> </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__exit__</span>(<span class="params">self, exc_type, exc_value, exc_trace</span>):</span> <span class="comment"># 5</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;In __exit__()&quot;</span>)</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_sample</span>():</span><span class="comment"># 2</span></span><br><span class="line">    <span class="keyword">return</span> Sample()</span><br><span class="line"> </span><br><span class="line"><span class="keyword">with</span> get_sample() <span class="keyword">as</span> sample: <span class="comment"># 1</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;sample:&quot;</span>, sample) <span class="comment"># 4</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>代码输出结果如下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">In __enter__()</span><br><span class="line">sample: Foo</span><br><span class="line">In __exit__()</span><br></pre></td></tr></table></figure><p>代码执行过程：</p><ul><li>1.with as语句中sample=get_sample()，调用get_sample()方法；</li><li>2.返回一个Sample()对象；</li><li>3.调用Sample()对象的<code>__enter__()</code>方法，输出<code>In __enter__()</code>，并return “Foo”；</li><li>4.执行with下面代码块的语句，<code>print(&quot;sample:&quot;, sample)</code>；</li><li>5.with执行完后，调用Sample()对象的<code>__exit__()</code>方法，输出<code>In __exit__()</code>。</li></ul><p>exit()方法中有3个参数：<code>exc_type</code>，<code>exc_value</code>，<code>exc_trace</code>，是在异常处理中用的。</p><blockquote><p><code>exc_type</code>：错误的类型<br><code>exc_value</code>：错误类型对应的值<br><code>exc_trace</code>：代码中错误发生的位置<br>可以在exit()方法中print打印出来。</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Python文件操作 shutil库使用举例</title>
      <link href="/2022/05/15/Python%E6%96%87%E4%BB%B6%E6%93%8D%E4%BD%9C-shutil%E5%BA%93%E4%BD%BF%E7%94%A8%E4%B8%BE%E4%BE%8B/"/>
      <url>/2022/05/15/Python%E6%96%87%E4%BB%B6%E6%93%8D%E4%BD%9C-shutil%E5%BA%93%E4%BD%BF%E7%94%A8%E4%B8%BE%E4%BE%8B/</url>
      
        <content type="html"><![CDATA[<p>本文用shutil库，实现对文件的操作（复制、移动）和对文件夹的操作（复制、移动、删除）的使用举例。</p><p>官方文档：<a class="link"   href="https://docs.python.org/3.9/library/shutil.html" >https://docs.python.org/3.9/library/shutil.html<i class="fas fa-external-link-alt"></i></a></p><a id="more"></a><h2 id="一、复制文件"><a href="#一、复制文件" class="headerlink" title="一、复制文件"></a>一、复制文件</h2><h3 id="1-copy-src-dst"><a href="#1-copy-src-dst" class="headerlink" title="1.copy(src, dst)"></a>1.copy(src, dst)</h3><ul><li>src是文件，dst可以是文件或目录</li><li>把src文件复制到目录dst目录中（前提是存在dst目录）</li><li>如果不存在dst目录，会复制内容保存成一个test文件，相当于复制文件了。</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> shutil</span><br><span class="line"></span><br><span class="line">src = <span class="string">r&#x27;D:\a.txt&#x27;</span></span><br><span class="line">dst = <span class="string">r&#x27;D:\test&#x27;</span></span><br><span class="line">shutil.copy(src, dst) <span class="comment"># return dst</span></span><br></pre></td></tr></table></figure><h3 id="2-copy2-src-dst"><a href="#2-copy2-src-dst" class="headerlink" title="2.copy2(src, dst)"></a>2.copy2(src, dst)</h3><ul><li>src是文件，dst可以是文件或目录</li><li>把src文件复制到dst目录中，并保留源文件元数据（前提是存在dst目录）</li><li>这个和copy的区别就是复制出来的src文件的元数据能保留，比如src文件的修改日期这些会不变化。</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> shutil</span><br><span class="line"></span><br><span class="line">src = <span class="string">r&#x27;D:\a.txt&#x27;</span></span><br><span class="line">dst = <span class="string">r&#x27;D:\test2&#x27;</span></span><br><span class="line">shutil.copy2(src, dst) <span class="comment"># return dst，如果不存在dst目录，会复制内容保存成一个test2文件</span></span><br></pre></td></tr></table></figure><h3 id="3-copyfileobj-fsrc-fdst"><a href="#3-copyfileobj-fsrc-fdst" class="headerlink" title="3.copyfileobj(fsrc, fdst)"></a>3.copyfileobj(fsrc, fdst)</h3><ul><li>src，dst都是文件</li><li>把src文件内容复制到dst文件中，如果原文件存在，会覆盖原内容</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> shutil</span><br><span class="line"></span><br><span class="line">src = <span class="string">r&#x27;D:\b.txt&#x27;</span></span><br><span class="line">dst = <span class="string">r&#x27;D:\test\a.txt&#x27;</span></span><br><span class="line">shutil.copyfileobj(<span class="built_in">open</span>(src,<span class="string">&#x27;r&#x27;</span>), <span class="built_in">open</span>(dst,<span class="string">&#x27;w&#x27;</span>))</span><br></pre></td></tr></table></figure><h3 id="4-copyfile-src-dst"><a href="#4-copyfile-src-dst" class="headerlink" title="4.copyfile(src, dst)"></a>4.copyfile(src, dst)</h3><ul><li>src，dst都是文件</li><li>把src文件内容复制到dst文件中，如果原文件存在，会覆盖原内容</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> shutil</span><br><span class="line"></span><br><span class="line">src = <span class="string">r&#x27;D:\b.txt&#x27;</span></span><br><span class="line">dst = <span class="string">r&#x27;D:\test\a.txt&#x27;</span></span><br><span class="line">shutil.copyfile(src, dst)</span><br></pre></td></tr></table></figure><p><strong>所以，感觉copyfileobj、copyfile这2个方法也用不着，一般直接用copy()就可以实现。</strong></p><h2 id="二、复制文件夹"><a href="#二、复制文件夹" class="headerlink" title="二、复制文件夹"></a>二、复制文件夹</h2><h3 id="5-copytree-src-dst"><a href="#5-copytree-src-dst" class="headerlink" title="5.copytree(src, dst)"></a>5.copytree(src, dst)</h3><ul><li>src，dst都是目录</li><li>把src文件夹复制到dst文件夹（dst文件夹不能已存在）</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> shutil</span><br><span class="line"></span><br><span class="line">src = <span class="string">r&#x27;D:\test&#x27;</span></span><br><span class="line">dst = <span class="string">r&#x27;D:\test3&#x27;</span></span><br><span class="line">shutil.copytree(src, dst)</span><br></pre></td></tr></table></figure><h2 id="三、删除目录"><a href="#三、删除目录" class="headerlink" title="三、删除目录"></a>三、删除目录</h2><h3 id="6-rmtree-path"><a href="#6-rmtree-path" class="headerlink" title="6.rmtree(path)"></a>6.rmtree(path)</h3><ul><li>删除path目录，path不能是文件</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> shutil</span><br><span class="line"></span><br><span class="line">path= <span class="string">r&#x27;D:\test3&#x27;</span></span><br><span class="line">shutil.rmtree(path)</span><br></pre></td></tr></table></figure><h2 id="四、移动文件或目录"><a href="#四、移动文件或目录" class="headerlink" title="四、移动文件或目录"></a>四、移动文件或目录</h2><h3 id="7-move-src-dst"><a href="#7-move-src-dst" class="headerlink" title="7.move(src, dst)"></a>7.move(src, dst)</h3><ul><li>把src文件或目录移动到dst目录</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> shutil</span><br><span class="line"></span><br><span class="line">src = <span class="string">r&#x27;D:\test&#x27;</span></span><br><span class="line">src2 = <span class="string">r&#x27;D:\test2\b.txt&#x27;</span></span><br><span class="line">dst = <span class="string">r&#x27;D:\test3&#x27;</span></span><br><span class="line">shutil.move(src, dst)</span><br><span class="line">shutil.move(src2, dst)</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【行政办公系列】Python批量创建文件夹</title>
      <link href="/2022/05/14/%E3%80%90%E8%A1%8C%E6%94%BF%E5%8A%9E%E5%85%AC%E7%B3%BB%E5%88%97%E3%80%91Python%E6%89%B9%E9%87%8F%E5%88%9B%E5%BB%BA%E6%96%87%E4%BB%B6%E5%A4%B9/"/>
      <url>/2022/05/14/%E3%80%90%E8%A1%8C%E6%94%BF%E5%8A%9E%E5%85%AC%E7%B3%BB%E5%88%97%E3%80%91Python%E6%89%B9%E9%87%8F%E5%88%9B%E5%BB%BA%E6%96%87%E4%BB%B6%E5%A4%B9/</url>
      
        <content type="html"><![CDATA[<p><strong>问题描述</strong>：</p><p>比如我需要收集公司全部员工的一些资料（比如健康码等公开资料），现在手上有个名单列表。</p><p>如果每个人都私发给我，还得自己保存、整理（重命名等）。<br>为了方便整理，于是，我就可以建个文件夹，在里面给每个人建个单独的文件夹，当然这些文件夹都是空的。</p><p>然后把整个文件夹上传到钉钉群就可以了。群成员找到文件夹里自己名字的文件夹，对应上传资料就行了。</p><a id="more"></a><p>当然，上面只是举个例子，而且是用钉钉的，为了方便上传人员直接手机操作。</p><p>此文主要介绍用Python读取Excel中姓名列表，再批量创建姓名为名的文件夹的方法。</p><p><strong>实现思路</strong>：</p><ul><li>读取Excel表中姓名列的数据</li><li>循环一下姓名列表（List），依次创建文件夹</li></ul><h2 id="一、用openpyxl库读取Excel表格"><a href="#一、用openpyxl库读取Excel表格" class="headerlink" title="一、用openpyxl库读取Excel表格"></a>一、用openpyxl库读取Excel表格</h2><p>openpyxl 库是Python用来操作Excel表格（.xlsx）一个库。这里只简单介绍怎么读取一列数据，不作详细介绍。</p><p>比如有这样一张表：A号是序号，B列是姓名。<br>然后我想要的文件夹名是序号+姓名。</p><p>就可以先在C列中用公式<code>A1&amp;B1</code>把A列和B列的字符串拼起来。<br>因为Python读取Excel不确定是读取到本质的公式，还是值；所以把C列再复制一列D列出来（只复制值）。如下图所示：<br><img                       lazyload                     src="/images/loading.svg"                     data-src="/img/OfficeSeries_Python_create_directorys_1.png"                                     ></p><p>所以，我们只需要把D列的数据读出来就可以了。</p><h3 id="1-安装openpyxl-库"><a href="#1-安装openpyxl-库" class="headerlink" title="1.安装openpyxl 库"></a>1.安装openpyxl 库</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install openpyxl</span><br></pre></td></tr></table></figure><h3 id="2-读取Excel一列（D列）数据"><a href="#2-读取Excel一列（D列）数据" class="headerlink" title="2.读取Excel一列（D列）数据"></a>2.读取Excel一列（D列）数据</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> openpyxl</span><br><span class="line"></span><br><span class="line"><span class="comment"># 从 Excel文件中读取 指定列(col_name) 的数据返回List</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">read_from_excel_by_col_name</span>(<span class="params">ex_file, sheet_name, col_name</span>):</span></span><br><span class="line">    <span class="keyword">if</span>(os.path.exists(ex_file)):</span><br><span class="line">        book = openpyxl.load_workbook(ex_file)</span><br><span class="line">        sheet = book[sheet_name]</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line"></span><br><span class="line">    value_list = []</span><br><span class="line">    <span class="keyword">for</span> col_num <span class="keyword">in</span> sheet[col_name]:</span><br><span class="line">        value_list.append(col_num.value)</span><br><span class="line">    book.close()</span><br><span class="line">    <span class="keyword">return</span> value_list</span><br><span class="line"></span><br><span class="line"><span class="comment"># name_list 即获取到的姓名列表 e.g [&#x27;1荀彧&#x27;,&#x27;2荀攸&#x27;]</span></span><br><span class="line">name_list = read_from_excel_by_col_name(<span class="string">&#x27;信息表.xlsx&#x27;</span>, <span class="string">&#x27;Sheet1&#x27;</span>, <span class="string">&#x27;D&#x27;</span>)</span><br></pre></td></tr></table></figure><h2 id="二、创建文件夹"><a href="#二、创建文件夹" class="headerlink" title="二、创建文件夹"></a>二、创建文件夹</h2><p>这个简单，直接用Python自带的os库的makedirs()方法就行。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> os</span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建一个文件夹</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">mkdir</span>(<span class="params">path</span>):</span></span><br><span class="line">    outdir = os.path.exists(path)</span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> outdir:</span><br><span class="line">        os.makedirs(path)</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="三、完整代码举例"><a href="#三、完整代码举例" class="headerlink" title="三、完整代码举例"></a>三、完整代码举例</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> openpyxl</span><br><span class="line"></span><br><span class="line"><span class="comment"># 从 Excel文件中读取 指定列(col_name) 的数据返回List</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">read_from_excel_by_col_name</span>(<span class="params">ex_file, sheet_name, col_name</span>):</span></span><br><span class="line">    <span class="keyword">if</span>(os.path.exists(ex_file)):</span><br><span class="line">        book = openpyxl.load_workbook(ex_file)</span><br><span class="line">        sheet = book[sheet_name]</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line"></span><br><span class="line">    value_list = []</span><br><span class="line">    <span class="keyword">for</span> col_num <span class="keyword">in</span> sheet[col_name]:</span><br><span class="line">        value_list.append(col_num.value)</span><br><span class="line">    book.close()</span><br><span class="line">    <span class="keyword">return</span> value_list</span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建文件夹</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">mkdir</span>(<span class="params">path</span>):</span></span><br><span class="line">    outdir = os.path.exists(path)</span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> outdir:</span><br><span class="line">        os.makedirs(path)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span>():</span></span><br><span class="line">    ex_file = <span class="string">r&#x27;.\ex\信息表.xlsx&#x27;</span></span><br><span class="line">    collect_path = <span class="string">r&#x27;D:\test信息收集&#x27;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 获取姓名列表</span></span><br><span class="line">    name_list = read_from_excel_by_col_name(ex_file, <span class="string">&#x27;Sheet1&#x27;</span>, <span class="string">&#x27;D&#x27;</span>)</span><br><span class="line">    <span class="comment"># print(name_list)</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 批量创建文件夹</span></span><br><span class="line">    <span class="keyword">for</span> name <span class="keyword">in</span> name_list:</span><br><span class="line">        mkdir(collect_path + <span class="string">&#x27;\\&#x27;</span> + name) <span class="comment"># 创建文件夹</span></span><br><span class="line"></span><br><span class="line">main()</span><br><span class="line"><span class="comment"># print(os.getcwd()) # 查看当前工作目录路径</span></span><br></pre></td></tr></table></figure><p>运行后结果如图所示：<br><img                       lazyload                     src="/images/loading.svg"                     data-src="/img/OfficeSeries_Python_create_directorys_2.png"                                     ></p>]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
            <tag> Office </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hexo创建sitemap站点地图向搜索引擎提交</title>
      <link href="/2022/05/14/Hexo%E5%88%9B%E5%BB%BAsitemap%E7%AB%99%E7%82%B9%E5%9C%B0%E5%9B%BE%E5%90%91%E6%90%9C%E7%B4%A2%E5%BC%95%E6%93%8E%E6%8F%90%E4%BA%A4/"/>
      <url>/2022/05/14/Hexo%E5%88%9B%E5%BB%BAsitemap%E7%AB%99%E7%82%B9%E5%9C%B0%E5%9B%BE%E5%90%91%E6%90%9C%E7%B4%A2%E5%BC%95%E6%93%8E%E6%8F%90%E4%BA%A4/</url>
      
        <content type="html"><![CDATA[<p>站点地图是一种xml文件，可以通过该文件列出网站上的网页，从而将网站内容的组织架构告知Google和其他搜索引擎。Sitemap 可方便管理员通知搜索引擎他们网站上有哪些可供抓取的网页。搜索引擎网页抓取工具会读取此文件，以便更加智能地抓取您的网站。</p><p>向搜索引擎提交自己hexo博客的sitemap，有助于让别人更好地通过搜索引擎搜索到自己的博客。</p><a id="more"></a><h2 id="一、生成Hexo博客的sitemap文件"><a href="#一、生成Hexo博客的sitemap文件" class="headerlink" title="一、生成Hexo博客的sitemap文件"></a>一、生成Hexo博客的sitemap文件</h2><p>Hexo有提供2个插件，用来自动生成sitemap文件。用以下命令安装：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-generator-sitemap --save</span><br><span class="line">npm install hexo-generator-baidu-sitemap --save</span><br></pre></td></tr></table></figure><p>安装完后，每当执行 <code>hexo generate</code>命令后，就会在Hexo下的public目录下生成两个文件。</p><ul><li>sitemap.xml 这个用来提交给Google、Bing等搜索引擎</li><li>baidusitemap.xml 这个是百度专用的</li></ul><p>运行 <code>hexo deploy</code>命令后，打开访问：<code>域名/sitemap.xml</code>，<code>域名/baidusitemap.xml</code>这两个文件都能访问，就没问题了。</p><p>访问结果如下图所示：<br><img                       lazyload                     src="/images/loading.svg"                     data-src="/img/Hexo_sitemap_1.png"                                     ></p><h2 id="二、提交站点地图-sitemap-给搜索引擎"><a href="#二、提交站点地图-sitemap-给搜索引擎" class="headerlink" title="二、提交站点地图(sitemap)给搜索引擎"></a>二、提交站点地图(sitemap)给搜索引擎</h2><h3 id="1-提交给Google"><a href="#1-提交给Google" class="headerlink" title="1.提交给Google"></a>1.提交给Google</h3><p>网址：<a class="link"   href="https://search.google.com/search-console/" >https://search.google.com/search-console/<i class="fas fa-external-link-alt"></i></a><br>当然，前提是你能访问Google，并注册了Google的账号了。</p><p>1).需要有个先验证你对网站的所有权</p><ul><li><p>首先，按操作提示下载提供的HTML验证文件（google2342fweklrljlj235423.html类型这样的文件）；</p></li><li><p>然后，要把这个文件放网站首页；</p><p>（就直接放<code>Hexo/source</code>目录下，按<a href="/2022/05/12/Hexo%E8%87%AA%E5%AE%9A%E4%B9%89%E9%A1%B5%E9%9D%A2%E8%B7%B3%E8%BF%87%E6%B8%B2%E6%9F%93/" title="Hexo 自定义页面 跳过渲染">Hexo 自定义页面 跳过渲染</a>这篇文章的跳过渲染方法，<code>hexo g</code>后就会生成在public目录下了）</p></li><li><p>最后，添加站点地图</p><p>有两种方式，可以自己都试下。提交完后如下图所示就行了，回头再看：</p><img                       lazyload                     src="/images/loading.svg"                     data-src="/img/Hexo_sitemap_2.png"                                     ></li></ul><h3 id="2-提交给Bing"><a href="#2-提交给Bing" class="headerlink" title="2.提交给Bing"></a>2.提交给Bing</h3><p>如果能提交给Google的话，先提交给Google后，再提交给Bing就很简单。因为可以直接授权通过。</p><p>网址：<a class="link"   href="https://www.bing.com/webmasters" >https://www.bing.com/webmasters<i class="fas fa-external-link-alt"></i></a></p><p>然后我就直接添加了下【网站地图】，就用sitemap.xml文件就行，把http和https的直接添加试了下。<br><img                       lazyload                     src="/images/loading.svg"                     data-src="/img/Hexo_sitemap_3.png"                                     ></p><h3 id="3-提交给百度"><a href="#3-提交给百度" class="headerlink" title="3.提交给百度"></a>3.提交给百度</h3><p>百度原来叫站长平台吧，现在好像改名叫什么资源了。<br>网址：<a class="link"   href="https://ziyuan.baidu.com/linksubmit/index" >https://ziyuan.baidu.com/linksubmit/index<i class="fas fa-external-link-alt"></i></a></p><p>百度是我最搞不懂的，明明<code>域名/baidusitemap.xml</code>文件都能访问，反正提交还是失败。<br>提示“主域校验失败”。<br><img                       lazyload                     src="/images/loading.svg"                     data-src="/img/Hexo_sitemap_4.png"                                     ></p><p>难道文章里还不能出现别的站点了？？太奇怪了，什么玩意~ 遂放弃。</p><p><strong>最后，顺便说一下可以怎么在搜索引擎上看结果</strong>：<br>可以过一两天，然后打开搜索引擎，直接搜索 <code>site:域名</code>或者前面再加个关键词，（比如我的搜索 <code>hexo site:hduzn.cn</code>）就可以看收录了多少了。<br>在搜索引擎中搜索时 ，加上site:域名，本来就可以搜索指定站点中的内容。</p>]]></content>
      
      
      <categories>
          
          <category> Hexo </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Hexo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Python 备份 豆瓣 读过的书的记录</title>
      <link href="/2022/05/13/Python-%E5%A4%87%E4%BB%BD-%E8%B1%86%E7%93%A3-%E8%AF%BB%E8%BF%87%E7%9A%84%E4%B9%A6%E7%9A%84%E8%AE%B0%E5%BD%95/"/>
      <url>/2022/05/13/Python-%E5%A4%87%E4%BB%BD-%E8%B1%86%E7%93%A3-%E8%AF%BB%E8%BF%87%E7%9A%84%E4%B9%A6%E7%9A%84%E8%AE%B0%E5%BD%95/</url>
      
        <content type="html"><![CDATA[<blockquote><p>原文章写于：2021年02月20日<br>本来想升级下 selenium，原来用的3，现在准备改代码换成4的版本。结果发现现在都会检测是selenium webdriver，不让代码登录了。<br>于是，又重新折腾了下。</p></blockquote><p>之前总是担心某一天豆瓣撑不下去了会倒闭。于是，总想着把自己在豆瓣标记的读过的书，看过的电影都备份存下来，主要还有一些看完当时的短评记录。</p><p>电影的页面和读书的页面差不多的，所以这里就介绍一下备份读过的书的方法。<br>最终存到Excel表格中和数据库（sqlite）表中。</p><a id="more"></a><p>此项目所有代码开源放在Github上了，文章下面有地址，所以此文只是记录这个实现、使用的过程。</p><h2 id="一、准备工作"><a href="#一、准备工作" class="headerlink" title="一、准备工作"></a>一、准备工作</h2><h3 id="1-安装Selenium-测试环境"><a href="#1-安装Selenium-测试环境" class="headerlink" title="1.安装Selenium 测试环境"></a>1.安装Selenium 测试环境</h3><p>用来自动化操作豆瓣的页面，爬取数据。<br>之前有篇笔记写了：<a href="/2022/05/04/Python-Selenium%E4%BD%BF%E7%94%A8%E4%B8%BE%E4%BE%8B/" title="Python Selenium使用举例">Python Selenium使用举例</a></p><p>如果是Windows环境也是一样的，主要就是3步。</p><ul><li>安装Chrome浏览器；</li><li>安装浏览器驱动（要对应浏览器的版本，就是一个chromedriver.exe这样的可执行文件）</li><li>安装Selenium包（现在装的版本都是4）</li></ul><p>安装Selenium包Windows下命令为：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install selenium</span><br></pre></td></tr></table></figure><h3 id="2-安装-openpyxl-包"><a href="#2-安装-openpyxl-包" class="headerlink" title="2.安装 openpyxl 包"></a>2.安装 openpyxl 包</h3><p>这个是用来操作Excel表的，把数据写入到Excel表里需要用到。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install openpyxl</span><br></pre></td></tr></table></figure><p>自己简单的数据库，就直接用Python自带的sqlite3了，很喜欢就这样一个数据库(.db)文件。</p><h2 id="二、代码实现"><a href="#二、代码实现" class="headerlink" title="二、代码实现"></a>二、代码实现</h2><p><strong>思路</strong>：</p><ul><li>1).登录进豆瓣账号，点开【读过的书】的页面；</li><li>2).获取最大的页面数 max_page_num；</li><li>3).获取每个页面的链接，得到一个所有链接的List：page_site_list；</li><li>4).写一个获取一个页面信息的方法/函数：get_one_page，存成一个List；</li><li>4).循环page_site_list，读取每个页面的数据信息List存到全部数据的List中：all_page_data_list；</li><li>5).最后把全部数据 all_page_data_list 写入到Excel表中和存到数据库中。</li></ul><h3 id="1-建立数据库、表"><a href="#1-建立数据库、表" class="headerlink" title="1.建立数据库、表"></a>1.建立数据库、表</h3><p>建立一个数据库文件 <strong>douban.db</strong>，然后建一张存书信息的 <strong>books</strong>表。</p><p>里面有书籍的name(名称)，site(豆瓣链接)，author(作者)，tags(标签)，date(已读日期)，comments(评论)，<code>rating_num</code>(评分数字等级), rating(评分,星级)，pic(书籍图片链接)</p><p>存了书籍的图片链接，主要为了以后别的地方也可以用。<br>所以如果你不需要的信息，可以不存。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> &quot;books&quot; (</span><br><span class="line">&quot;id&quot;<span class="type">INTEGER</span> <span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="keyword">PRIMARY</span> KEY AUTOINCREMENT <span class="keyword">UNIQUE</span>,</span><br><span class="line">&quot;name&quot;TEXT <span class="keyword">NOT</span> <span class="keyword">NULL</span>,</span><br><span class="line">&quot;site&quot;TEXT,</span><br><span class="line">&quot;author&quot;TEXT,</span><br><span class="line">&quot;tags&quot;TEXT,</span><br><span class="line">&quot;date&quot;TEXT,</span><br><span class="line">&quot;comments&quot;TEXT,</span><br><span class="line">&quot;rating_num&quot;<span class="type">INTEGER</span>,</span><br><span class="line">&quot;rating&quot;TEXT,</span><br><span class="line">&quot;pic&quot;TEXT</span><br><span class="line">);</span><br></pre></td></tr></table></figure><h3 id="2-获取所有页面的链接List-的方法"><a href="#2-获取所有页面的链接List-的方法" class="headerlink" title="2.获取所有页面的链接List 的方法"></a>2.获取所有页面的链接List 的方法</h3><p>思路：<br>获取最大页面数的时候，把对应的链接存下来，这就是一个模板链接，model_site 如下：<br>其中<code>[id]</code>为每个人自己的豆瓣用户id。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https:&#x2F;&#x2F;book.douban.com&#x2F;people&#x2F;[id]&#x2F;collect?start&#x3D;285&amp;sort&#x3D;time&amp;rating&#x3D;all&amp;filter&#x3D;all&amp;mode&#x3D;grid</span><br></pre></td></tr></table></figure><p>可以看到，<code>start=</code>后面的数字即是每个页面不同的地方。</p><ul><li>第1页：没写，其实是0；</li><li>第2页：15；</li><li>第3页：30；</li><li>第4页：45；</li><li>第n页：(n-1)*15</li></ul><p>所以可以把 model_site 切分成3段，数字前面是第一段，中间是页面相关的数字，第三段是 <code>&amp;sort</code>开始的后面这段。</p><p>第一段和第三段是固定的，通过一个循环就可以了。</p><p>代码实现如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 获取所有页数的链接List</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_page_site_list</span>(<span class="params">max_page_num, model_site</span>):</span></span><br><span class="line">    <span class="comment"># model_site: https://book.douban.com/people/[id]/collect?start=300&amp;sort=time&amp;rating=all&amp;filter=all&amp;mode=grid</span></span><br><span class="line">    cop = <span class="string">&#x27;[0-9]&#x27;</span></span><br><span class="line">    site_part2 = <span class="string">&#x27;&#x27;</span>.join(re.findall(cop, model_site)) <span class="comment"># 用正则取出数字&#x27;300&#x27;</span></span><br><span class="line">    site_part1 = model_site.split(site_part2)[<span class="number">0</span>] <span class="comment"># https://book.douban.com/people/[id]/collect?start=</span></span><br><span class="line">    site_part3 = model_site.split(site_part2)[<span class="number">1</span>] <span class="comment"># &amp;sort=time&amp;rating=all&amp;filter=all&amp;mode=grid</span></span><br><span class="line"></span><br><span class="line">    site_list = []</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(max_page_num):</span><br><span class="line">        site_part2_num = <span class="built_in">str</span>(i * <span class="number">15</span>)</span><br><span class="line">        page_site = site_part1 + site_part2_num + site_part3</span><br><span class="line">        site_list.append(page_site)</span><br><span class="line">    <span class="keyword">return</span> site_list</span><br></pre></td></tr></table></figure><h3 id="3-获取一页的内容方法"><a href="#3-获取一页的内容方法" class="headerlink" title="3.获取一页的内容方法"></a>3.获取一页的内容方法</h3><p>获取一页的内容，最后返回一个data_list。<br>data_list中每一项包括：书籍名、书籍链接、书籍作者信息、书籍标签、阅读日期、评论、评分(数字)、评分、书籍图片链接。</p><p>代码实现：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 获取一页的数据内容</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_one_page</span>(<span class="params">wd, page_site</span>):</span></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        wd.get(page_site)</span><br><span class="line">        time.sleep(<span class="number">2</span>)</span><br><span class="line">    <span class="keyword">except</span> selenium.common.exceptions.TimeoutException:</span><br><span class="line">        time.sleep(<span class="number">5</span>)</span><br><span class="line">        wd.get(page_site)</span><br><span class="line"></span><br><span class="line">    pic_list = [] <span class="comment"># 图书图片List</span></span><br><span class="line">    pic_values = wd.find_elements(By.XPATH, <span class="string">&#x27;//li[@class=&quot;subject-item&quot;]//img&#x27;</span>) <span class="comment"># 图书图片</span></span><br><span class="line">    <span class="keyword">for</span> value <span class="keyword">in</span> pic_values:</span><br><span class="line">        pic_site = value.get_attribute(<span class="string">&#x27;src&#x27;</span>)</span><br><span class="line">        pic_list.append(pic_site)</span><br><span class="line">    <span class="comment"># print(pic_list)</span></span><br><span class="line"></span><br><span class="line">    book_site_list = [] <span class="comment"># 图片链接List</span></span><br><span class="line">    book_name_list = [] <span class="comment"># 图书名称List</span></span><br><span class="line">    book_values = wd.find_elements(By.XPATH, <span class="string">&#x27;//li[@class=&quot;subject-item&quot;]//div[@class=&quot;info&quot;]//h2//a&#x27;</span>)</span><br><span class="line">    <span class="keyword">for</span> value <span class="keyword">in</span> book_values:</span><br><span class="line">        book_site = value.get_attribute(<span class="string">&#x27;href&#x27;</span>)</span><br><span class="line">        book_site_list.append(book_site)</span><br><span class="line">        book_name = value.text</span><br><span class="line">        book_name_list.append(book_name)</span><br><span class="line">    <span class="comment"># print(book_site_list)</span></span><br><span class="line">    <span class="comment"># print(book_name_list)</span></span><br><span class="line"></span><br><span class="line">    author_list = [] <span class="comment"># 作者信息List</span></span><br><span class="line">    author_info = wd.find_elements(By.XPATH, <span class="string">&#x27;//li[@class=&quot;subject-item&quot;]//div[@class=&quot;info&quot;]//div[@class=&quot;pub&quot;]&#x27;</span>)</span><br><span class="line">    <span class="keyword">for</span> value <span class="keyword">in</span> author_info:</span><br><span class="line">        author_list.append(value.text)</span><br><span class="line">    <span class="comment"># print(author_list)</span></span><br><span class="line"></span><br><span class="line">    tags_list = [] <span class="comment"># 标签List</span></span><br><span class="line">    tag_values = wd.find_elements(By.XPATH, <span class="string">&#x27;//li[@class=&quot;subject-item&quot;]//div[@class=&quot;info&quot;]//div[@class=&quot;short-note&quot;]//span[@class=&quot;tags&quot;]&#x27;</span>)</span><br><span class="line">    <span class="keyword">for</span> value <span class="keyword">in</span> tag_values:</span><br><span class="line">        tags_list.append(value.text.split(<span class="string">&#x27;:&#x27;</span>)[<span class="number">1</span>].strip())</span><br><span class="line">    <span class="comment"># print(tags_list)</span></span><br><span class="line"></span><br><span class="line">    date_list = [] <span class="comment"># 读过日期List</span></span><br><span class="line">    date_values = wd.find_elements(By.XPATH, <span class="string">&#x27;//li[@class=&quot;subject-item&quot;]//div[@class=&quot;info&quot;]//div[@class=&quot;short-note&quot;]//span[@class=&quot;date&quot;]&#x27;</span>)</span><br><span class="line">    <span class="keyword">for</span> value <span class="keyword">in</span> date_values:</span><br><span class="line">        date_list.append(value.text.split()[<span class="number">0</span>])</span><br><span class="line">    <span class="comment"># print(date_list)</span></span><br><span class="line"></span><br><span class="line">    rating_list = [] <span class="comment"># 评分List（星星）</span></span><br><span class="line">    rating_num_list = [] <span class="comment"># 评分List（数字）</span></span><br><span class="line">    rating_values = wd.find_elements(By.XPATH, <span class="string">&#x27;//li[@class=&quot;subject-item&quot;]//div[@class=&quot;info&quot;]//div[@class=&quot;short-note&quot;]//span[1]&#x27;</span>)</span><br><span class="line">    <span class="keyword">for</span> value <span class="keyword">in</span> rating_values:</span><br><span class="line">        rate = value.get_attribute(<span class="string">&#x27;class&#x27;</span>)[<span class="number">6</span>] <span class="comment"># str 5/4/3/2/1</span></span><br><span class="line">        rating_num_list.append(<span class="built_in">int</span>(rate))</span><br><span class="line">        rating_list.append(douban_config.rating_dict[rate])</span><br><span class="line">    <span class="comment"># print(rating_list)</span></span><br><span class="line">    <span class="comment"># print(rating_num_list)</span></span><br><span class="line"></span><br><span class="line">    comment_list = [] <span class="comment"># 短评List</span></span><br><span class="line">    comment_values =  wd.find_elements(By.XPATH, <span class="string">&#x27;//li[@class=&quot;subject-item&quot;]//div[@class=&quot;info&quot;]//div[@class=&quot;short-note&quot;]//p[@class=&quot;comment&quot;]&#x27;</span>)</span><br><span class="line">    <span class="keyword">for</span> value <span class="keyword">in</span> comment_values:</span><br><span class="line">        comment_list.append(value.text)</span><br><span class="line">    <span class="comment"># print(comment_list)</span></span><br><span class="line"></span><br><span class="line">    num = <span class="built_in">len</span>(book_name_list)</span><br><span class="line">    data_list = []</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(num):</span><br><span class="line">        data_list.append([book_name_list[i], book_site_list[i], author_list[i], tags_list[i], date_list[i], comment_list[i], rating_num_list[i], rating_list[i], pic_list[i]])</span><br><span class="line">    <span class="keyword">return</span> data_list</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><strong>注意</strong>：<br>因为每一页中是每一项取一个List、最后合成的。<br><strong>所以如果书籍标记的时候，没有标签、没有评分(打星)的话，会报错，获取不到信息。</strong></p><h3 id="4-用selenium登录前提设置"><a href="#4-用selenium登录前提设置" class="headerlink" title="4.用selenium登录前提设置"></a>4.用selenium登录前提设置</h3><p>为了跳过selenium的webdriver检测，所以使用的是本地debugger模式登录。<br>使用方法看后面的<strong>使用说明</strong>，代码如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">option = webdriver.ChromeOptions()</span><br><span class="line"><span class="comment"># 使用本地debugger模式，可以提前登录</span></span><br><span class="line">option.add_experimental_option(<span class="string">&#x27;debuggerAddress&#x27;</span>,<span class="string">&#x27;127.0.0.1:9222&#x27;</span>)</span><br><span class="line">wd = webdriver.Chrome(options=option)</span><br><span class="line">wd.implicitly_wait(<span class="number">10</span>)</span><br><span class="line">wd.get(site)</span><br></pre></td></tr></table></figure><h2 id="三、整个项目打包"><a href="#三、整个项目打包" class="headerlink" title="三、整个项目打包"></a>三、整个项目打包</h2><p>整个项目放在 Github上了。链接： <a class="link"   href="https://github.com/hduzn/own_douban_backup" >own_douban_backup<i class="fas fa-external-link-alt"></i></a></p><p>看README.md文档即可。</p><p><strong>项目文件说明：</strong>：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">douban_backup</span><br><span class="line">- db</span><br><span class="line">  - douban.db</span><br><span class="line">- ex</span><br><span class="line">  - douban.xlsx</span><br><span class="line">- books.py</span><br><span class="line">- douban.sql</span><br><span class="line">- douban_config.py</span><br><span class="line">- main.py</span><br><span class="line">- z_db.py</span><br></pre></td></tr></table></figure><blockquote><p>db/douban.db : sqlite数据库文件，最后保存的数据都在这里<br>ex/douban.xlsx : Excel文件，最后保存的数据同步保存在这里<br>books.py ：调用 main()方法，将Douban 读过的书的记录保存到数据库books表中和douban.xlsx 文件中<br>douban.sql : 表创建的sql语句（books表）<br>douban_config.py ：配置文件<br>main.py ：主文件<br>z_db.py ：数据库操作文件</p></blockquote><h2 id="四、使用说明"><a href="#四、使用说明" class="headerlink" title="四、使用说明"></a>四、使用说明</h2><p>运行main.py中的方法</p><p>1.先运行<code>init_create_table()</code>方法初始化，创建数据库中的表</p><p>2.备份看过的书<br>去掉 <code>#books.main()</code>前面的 #注释，再 注释<code>init_create_table()</code>方法即可运行。</p><p>3.<strong>怎么运行</strong></p><p>1).第一步，用Windows PowerShell或命令提示符运行chrome.exe</p><p>找到Chrome浏览器的安装路径，比如我的在：<code>C:\Program Files (x86)\Google\Chrome\Application</code>，里面就有chrome.exe程序。</p><p>运行以下命令：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> <span class="string">&quot;C:\Program Files (x86)\Google\Chrome\Application&quot;</span></span><br><span class="line"></span><br><span class="line">.\chrome.exe --remote-debugging-port=9222 --user-data-dir=D:\cdsf</span><br></pre></td></tr></table></figure><blockquote><p>remote-debugging-port：是代码中指定的端口debuggerAddress；<br>user-data-dir：随便指定一个目录就行（真实没有这个目录也没关系，名字随便取）</p></blockquote><p>如图所示：<br><img                       lazyload                     src="/images/loading.svg"                     data-src="/img/Python_douban_backup_1.png"                                     ></p><p>运行完后会打开Chrome浏览器。</p><p>2).第二步，运行 main.py</p><p>在main.py中运行程序。就会在打开的Chrome浏览器中正常运行了。</p><p>PS.如果自己提前登录过，还能记住密码。再登录的时候可以不需要登录了。（所以登录部分的代码做了这个判断）</p>]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
            <tag> Selenium </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hexo 自定义页面 跳过渲染</title>
      <link href="/2022/05/12/Hexo%E8%87%AA%E5%AE%9A%E4%B9%89%E9%A1%B5%E9%9D%A2%E8%B7%B3%E8%BF%87%E6%B8%B2%E6%9F%93/"/>
      <url>/2022/05/12/Hexo%E8%87%AA%E5%AE%9A%E4%B9%89%E9%A1%B5%E9%9D%A2%E8%B7%B3%E8%BF%87%E6%B8%B2%E6%9F%93/</url>
      
        <content type="html"><![CDATA[<p>Hexo博客中所有的文章都是经过渲染的静态网页。</p><p>所以，当我有个自定义的页面（比如a.html要放在根目录下），想跳过渲染，就需要设置下。</p><p><strong>Hexo跳过渲染 方法：</strong></p><p><strong>修改Hexo目录的配置文件（<code>_config.yml</code>）</strong><br>搜索找到 <code>skip_render</code>这一项进行配置即可。</p><a id="more"></a><p><strong>举例</strong></p><p>1.根目录下的a.html文件跳过渲染 配置：</p><p>把a.html文件放在Hexo/source 目录下。</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">skip_render:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">&quot;a.html&quot;</span></span><br></pre></td></tr></table></figure><p>再通过<code>hexo generate</code>命令后，在public目录下就有a.html文件了，而且没有渲染，没改变文件内容。</p><p>2.source/test 文件夹内所有文件跳过渲染：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">skip_render:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">&quot;test/*&quot;</span></span><br></pre></td></tr></table></figure><p>3.source/test 文件夹内所有文件以及子文件夹内所有文件跳过渲染：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">skip_render:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">&quot;test/**&quot;</span></span><br></pre></td></tr></table></figure><p>4.跳过多个：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">skip_render:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">&quot;a.html&quot;</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">&quot;test/*&quot;</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Hexo </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Hexo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hexo博客同步部署到Github Pages</title>
      <link href="/2022/05/12/Hexo%E5%8D%9A%E5%AE%A2%E5%90%8C%E6%AD%A5%E9%83%A8%E7%BD%B2%E5%88%B0Github-Pages/"/>
      <url>/2022/05/12/Hexo%E5%8D%9A%E5%AE%A2%E5%90%8C%E6%AD%A5%E9%83%A8%E7%BD%B2%E5%88%B0Github-Pages/</url>
      
        <content type="html"><![CDATA[<p>我的Hexo博客已经部署到云服务器上了，部署过程看此文：<a href="/2022/05/01/Hexo%E5%8D%9A%E5%AE%A2%E9%83%A8%E7%BD%B2%E5%88%B0%E4%BA%91%E6%9C%8D%E5%8A%A1%E5%99%A8%EF%BC%88Ubuntu%EF%BC%89/" title="Hexo博客部署到云服务器（Ubuntu）上">Hexo博客部署到云服务器（Ubuntu）上</a></p><p>然后，因为原来是用的Github Pages，就想着顺便同步到Github Pages上吧。</p><a id="more"></a><h2 id="一、创建Github-Pages"><a href="#一、创建Github-Pages" class="headerlink" title="一、创建Github Pages"></a>一、创建Github Pages</h2><p>如果还没创建的，看此文 <a href="/2022/04/09/%E3%80%90%E5%B0%8F%E7%99%BD%E6%95%99%E7%A8%8B%E3%80%91%E5%85%8D%E8%B4%B9%E5%BB%BA%E7%AB%8B%E9%9D%99%E6%80%81%E5%8D%9A%E5%AE%A2%E7%BD%91%E7%AB%99%EF%BC%88Github+Hexo%EF%BC%89/" title="【小白教程】免费建立静态博客网站（Github+Hexo）">【小白教程】免费建立静态博客网站（Github+Hexo）</a> 中第三步“部署到Github Pages上”的部分。</p><p>如果原来已经在创建的，那就先不用管了。直接下一步，创建SSH密钥。</p><h2 id="二、创建专用的SSH密钥"><a href="#二、创建专用的SSH密钥" class="headerlink" title="二、创建专用的SSH密钥"></a>二、创建专用的SSH密钥</h2><p>原来部署到云服务器上也是用的git，所以这里也是用的git，就方便了。</p><p><strong>步骤：</strong></p><ul><li>进入本机SSH目录，创建一对新的SSH密钥</li><li>把SSH公钥添加到Github中</li><li>本机SSH配置文件（config）修改</li><li>ssh测试</li></ul><h3 id="1-创建一对新的SSH密钥"><a href="#1-创建一对新的SSH密钥" class="headerlink" title="1.创建一对新的SSH密钥"></a>1.创建一对新的SSH密钥</h3><p>打开【Git Bash】，运行命令进入ssh目录：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> ~/.ssh</span><br><span class="line"></span><br><span class="line">ssh -keygen -t rsa -C <span class="string">&quot;your_email@example.com&quot;</span></span><br></pre></td></tr></table></figure><p>上面的邮箱是自己的邮箱地址，按这个邮箱地址会创建一对密钥。</p><p><strong>注意：回车后，有以下信息提示，让你输入一个key的file名称，要记得输入一个名称，不要用默认的。</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Generating public&#x2F;private rsa key pair.</span><br><span class="line">Enter file in which to save the key (&#x2F;c&#x2F;Users&#x2F;yourusername&#x2F;.ssh&#x2F;id_rsa): [Press enter]</span><br></pre></td></tr></table></figure><p>比如我输入<code>github2022_rsa</code>（文件名可以加上<code>_rsa</code>好识别）后回车，然后是输入密码，直接回车、回车，就表示用的空密码。</p><p>完成后，会显示如下的信息：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">Your identification has been saved <span class="keyword">in</span> github2022_rsa</span><br><span class="line">Your public key has been saved <span class="keyword">in</span> github2022_rsa.pub</span><br><span class="line">The key fingerprint is:</span><br><span class="line">SHA256:B***********t/9i*************s your_email@example.com</span><br><span class="line">The key<span class="string">&#x27;s randomart image is:</span></span><br><span class="line"><span class="string"></span></span><br></pre></td></tr></table></figure><p>这样，新的SSH密钥就创建好了。</p><h3 id="2-把SSH公钥添加到Github中"><a href="#2-把SSH公钥添加到Github中" class="headerlink" title="2.把SSH公钥添加到Github中"></a>2.把SSH公钥添加到Github中</h3><p>在【Git Bash】中，用以下命令把公钥内容复制到系统粘贴板（clipboard）中：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">clip &lt; ~/.ssh/id_rsa.pub</span><br></pre></td></tr></table></figure><ul><li>登陆GitHub，进入Account 【Settings】；</li><li>选择【SSH and GPG keys】；</li><li>【New SSH key】，直接把复制好的公钥粘贴到Key的内容里，Title标题自己取，点击添加即可。</li></ul><h3 id="3-本机SSH配置文件修改"><a href="#3-本机SSH配置文件修改" class="headerlink" title="3.本机SSH配置文件修改"></a>3.本机SSH配置文件修改</h3><p>这个时候，你直接测试ssh是不通的，提示：“<a class="link"   href="mailto:&#103;&#x69;&#x74;&#x40;&#x67;&#105;&#x74;&#x68;&#117;&#98;&#46;&#x63;&#111;&#x6d;" >&#103;&#x69;&#x74;&#x40;&#x67;&#105;&#x74;&#x68;&#117;&#98;&#46;&#x63;&#111;&#x6d;<i class="fas fa-external-link-alt"></i></a>: Permission denied (publickey).”<br>然后因为以前也用过github pages的，所以就有这个提示。</p><p>本机~/.ssh 目录有2个文件需要改动。</p><ul><li>known_hosts 文件</li><li>config 文件</li></ul><p><strong>known_hosts</strong>文件用于验证远程登陆系统的身份。ssh可以自动将密钥添加到用户文件，也可以手动添加。该文件包含用户已连接过所有主机的公共密钥列表。一般，初次登陆，ssh会自动将远程主机的公钥添加到用户的known_hosts文件。</p><p>1).修改<strong>known_hosts 文件</strong></p><p>要解决上面那个问题，就需要修改<strong>known_hosts 文件</strong>。<br>用记事本类软件打开，把github.com开头的一行删除，再保存文件就行了。</p><p>2).修改<strong>config</strong>文件</p><p>修改完上面的文件，继续ssh测试，还是有上面的问题，还有一个提醒：<br><code>Warning: Permanently added &#39;github.com,140.82.113.3&#39; (ECDSA) to the list of known hosts.</code></p><p>所以，我们把相关的配置添加到config配置文件中。（关于SSH密钥配置，config文件的介绍，这篇文章里有：<a href="/2022/05/01/Hexo-SSH%E5%AF%86%E9%92%A5%E9%85%8D%E7%BD%AE/" title="Hexo SSH密钥配置">Hexo SSH密钥配置</a>）</p><p>用记事本类软件打开config文件，添加下面2段配置：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">Host github.com</span><br><span class="line">  HostName github.com</span><br><span class="line">  IdentityFile ~/.ssh/github2022_rsa</span><br><span class="line">  PreferredAuthentications publickey</span><br><span class="line"></span><br><span class="line">Host 140.82.113.3</span><br><span class="line">  HostName 140.82.113.3</span><br><span class="line">  IdentityFile ~/.ssh/github2022_rsa</span><br><span class="line">  PreferredAuthentications publickey</span><br></pre></td></tr></table></figure><p>140.82.113.3是通过<code>ping github.com</code>得到的ip地址。</p><h3 id="4-ssh测试"><a href="#4-ssh测试" class="headerlink" title="4.ssh测试"></a>4.ssh测试</h3><p>配置完后在【Git Bash】中运行以下命令进行测试：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh -T git@github.com</span><br></pre></td></tr></table></figure><p>看到最后一句<code>Hi youname! You&#39;ve successfully authenticated</code>就OK了。</p><h2 id="三、修改Hexo配置文件（-config-yml）"><a href="#三、修改Hexo配置文件（-config-yml）" class="headerlink" title="三、修改Hexo配置文件（_config.yml）"></a>三、修改Hexo配置文件（<code>_config.yml</code>）</h2><p>在最后的 deploy模块下添加github项。</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">deploy:</span></span><br><span class="line">  <span class="attr">type:</span> <span class="string">git</span></span><br><span class="line">  <span class="attr">repo:</span> </span><br><span class="line">    <span class="attr">hexo:</span> <span class="string">git@111.4.22.313:/var/repo/hexo_static.git</span></span><br><span class="line">    <span class="attr">github:</span> <span class="string">git@github.com:hduzn/hduzn.github.io.git</span></span><br><span class="line">  <span class="attr">branch:</span> <span class="string">master</span></span><br></pre></td></tr></table></figure><p>注：上面的111.4.22.313 为你自己服务器的ip（这里只是随便写的ip）</p><p><a class="link"   href="mailto:&#x67;&#x69;&#x74;&#x40;&#x67;&#105;&#x74;&#104;&#117;&#98;&#46;&#99;&#x6f;&#x6d;" >&#x67;&#x69;&#x74;&#x40;&#x67;&#105;&#x74;&#104;&#117;&#98;&#46;&#99;&#x6f;&#x6d;<i class="fas fa-external-link-alt"></i></a>后面的地址是你的 <code>github用户名/github pages地址.git</code>。<br>这个在你的github pages仓库上，直接复制【Code】中的SSH地址是一样的。</p><p>这样就可以了。每次<code>hexo deploy</code>后，也会同步部署到Github Pages上了。</p>]]></content>
      
      
      <categories>
          
          <category> Hexo </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Github </tag>
            
            <tag> Hexo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Ubuntu Nginx服务器SSL证书安装部署</title>
      <link href="/2022/05/11/Ubuntu-Nginx%E6%9C%8D%E5%8A%A1%E5%99%A8SSL%E8%AF%81%E4%B9%A6%E5%AE%89%E8%A3%85%E9%83%A8%E7%BD%B2/"/>
      <url>/2022/05/11/Ubuntu-Nginx%E6%9C%8D%E5%8A%A1%E5%99%A8SSL%E8%AF%81%E4%B9%A6%E5%AE%89%E8%A3%85%E9%83%A8%E7%BD%B2/</url>
      
        <content type="html"><![CDATA[<p>为什么要安装SSL证书，如果没有SSL证书，访问网站的时候，前面会有个小叹号，是用 <code>http://www.hduzn.cn</code>这样的域名访问的。如果部署了SSL，访问的时候、域名前面就有个安全锁的小图标了。是用 <code>https://www.hduzn.cn</code>这样的地址访问的。</p><p>反正都可以免费申请SSL证书的，就申请了下。</p><a id="more"></a><p><strong>前言</strong>：<br>已经把Hexo博客部署到Ubuntu服务器上了，可以通过http访问了。<br>部署的文章参考此篇：<a href="/2022/05/01/Hexo%E5%8D%9A%E5%AE%A2%E9%83%A8%E7%BD%B2%E5%88%B0%E4%BA%91%E6%9C%8D%E5%8A%A1%E5%99%A8%EF%BC%88Ubuntu%EF%BC%89/" title="Hexo博客部署到云服务器（Ubuntu）上">Hexo博客部署到云服务器（Ubuntu）上</a></p><h2 id="一、下载SSL证书（本地）"><a href="#一、下载SSL证书（本地）" class="headerlink" title="一、下载SSL证书（本地）"></a>一、下载SSL证书（本地）</h2><p>在腾讯云买的域名，在DNSPod中直接点击SSL的图标，点【点此管理】即可跳转到腾讯云上SSL证书管理的页面。</p><p><strong>1.申请证书</strong></p><p>点击【申请证书】，就能申请免费的证书。</p><p><strong>2.下载证书</strong></p><p>点击【下载证书】，会提供各种服务器类型的证书下载。（比如Tomcat、Apache、Nginx、IIS等）</p><p>如果配置好DNS了，系统会检测，会提示你推荐下载哪一类证书。</p><p>腾讯云的SSL证书管理控制台：<a class="link"   href="https://console.cloud.tencent.com/ssl" >https://console.cloud.tencent.com/ssl<i class="fas fa-external-link-alt"></i></a></p><p>我这里用的Nginx服务器，就下载Nginx的证书。</p><p>下载后，解压出来一个 hduzn.cn_nginx 文件夹，里面一共4个文件：</p><blockquote><p>hduzn.cn_bundle.crt 证书文件<br>hduzn.cn.key 私钥文件<br>hduzn.cn.csr 没用到<br>hduzn.cn_bundle.pem 没用到</p></blockquote><p>就用到前两个文件，后两个没用到。</p><h2 id="二、部署SSL证书（服务器）"><a href="#二、部署SSL证书（服务器）" class="headerlink" title="二、部署SSL证书（服务器）"></a>二、部署SSL证书（服务器）</h2><p>腾讯云提供的Nginx服务器SSL证书安装部署的文档：<a class="link"   href="https://cloud.tencent.com/document/product/400/35244" >https://cloud.tencent.com/document/product/400/35244<i class="fas fa-external-link-alt"></i></a></p><h3 id="1-上传证书到服务器"><a href="#1-上传证书到服务器" class="headerlink" title="1.上传证书到服务器"></a>1.上传证书到服务器</h3><p>直接用Xftp上传。因为用Xshell，所以对应也装了Xftp用，很方便传文件。</p><p>因为可能涉及权限问题，所以准备分两步走：</p><ul><li>1).先把文件上传到用户的home目录；</li><li>2).再把文件复制到Nginx配置的目录里。</li></ul><p>先建个ssl/nginx_ssl目录，然后把<code>hduzn.cn_bundle.crt</code>和<code>hduzn.cn.key</code>两个文件用Xftp上传到目录：<code>/home/ubuntu/ssl/nginx_ssl</code>。</p><p>再到服务器中运行命令：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo cp hduzn.cn_bundle.crt /etc/nginx/sites-available</span><br><span class="line">sudo cp hduzn.cn.key /etc/nginx/sites-available</span><br></pre></td></tr></table></figure><p>直接把两个文件放 /etc/nginx/目录下，我索性跟配置文件放一起了。</p><h3 id="2-修改站点Nginx配置文件"><a href="#2-修改站点Nginx配置文件" class="headerlink" title="2.修改站点Nginx配置文件"></a>2.修改站点Nginx配置文件</h3><p>根据之前Hexo部署到Ubuntu的内容，我的站点的Nginx配置文件是：<code>/etc/nginx/sites-available/default</code></p><blockquote><p>如果你不想直接用vim命令写这么多行，也可以跟我一样，把这个default文件先通过Xftp下载到本地。改完了再上传上去。通过命令强制覆盖原文件就行了。</p></blockquote><p>原修改好的文件（用http访问）：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">...</span><br><span class="line"></span><br><span class="line">server &#123;</span><br><span class="line">    listen 80 default_server;</span><br><span class="line">    listen [::]:80 default_server ipv6only&#x3D;on;</span><br><span class="line"></span><br><span class="line">    root &#x2F;var&#x2F;www&#x2F;hexo; # 需要修改的部分</span><br><span class="line">    index index.html index.htm;</span><br><span class="line"></span><br><span class="line">...</span><br></pre></td></tr></table></figure><p>行数说明：</p><ul><li>4：监听80端口，default_server 即设为默认虚拟主机，无效访问会转到该站点</li><li>5：对应 ipv6</li><li>7：nginx托管的hexo目录路径</li></ul><h4 id="https访问配置"><a href="#https访问配置" class="headerlink" title="https访问配置"></a>https访问配置</h4><p>加上https访问配置后（主要添加了HTTPS server部分），文件主要部分改为：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"># Default server configuration</span><br><span class="line">#</span><br><span class="line">server &#123;</span><br><span class="line">listen 80 default_server;</span><br><span class="line">listen [::]:80 default_server;</span><br><span class="line">server_name www.hduzn.cn # 写上域名</span><br><span class="line"></span><br><span class="line">#root &#x2F;var&#x2F;www&#x2F;hexo; # nginx托管的hexo目录路径</span><br><span class="line">#server_name _;</span><br><span class="line"></span><br><span class="line">location &#x2F; &#123;</span><br><span class="line"># First attempt to serve request as file, then</span><br><span class="line"># as directory, then fall back to displaying a 404.</span><br><span class="line">try_files $uri $uri&#x2F; &#x3D;404;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">rewrite ^(.*) https:&#x2F;&#x2F;www.hduzn.cn$1 permanent; # 将http访问重定向为https访问</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"># HTTPS server</span><br><span class="line">#</span><br><span class="line">server &#123;</span><br><span class="line"># SSL configuration</span><br><span class="line">#</span><br><span class="line">listen 443 ssl; # ssl的端口</span><br><span class="line">listen [::]:443 ssl;</span><br><span class="line">server_name www.hduzn.cn; # 写上域名</span><br><span class="line">ssl_certificate &#x2F;etc&#x2F;nginx&#x2F;sites-available&#x2F;hduzn.cn_bundle.crt;</span><br><span class="line">    ssl_certificate_key &#x2F;etc&#x2F;nginx&#x2F;sites-available&#x2F;hduzn.cn.key;</span><br><span class="line">ssl_session_cache shared:SSL:1m;</span><br><span class="line">ssl_session_timeout 5m;</span><br><span class="line">ssl_protocols SSLv3 TLSv1 TLSv1.1 TLSv1.2;</span><br><span class="line">    ssl_ciphers RC4:HIGH:!aNULL:!MD5;</span><br><span class="line">    ssl_prefer_server_ciphers on;</span><br><span class="line"></span><br><span class="line">root &#x2F;var&#x2F;www&#x2F;hexo; # nginx托管的hexo目录路径</span><br><span class="line">#server_name _;</span><br><span class="line"></span><br><span class="line">location &#x2F; &#123;</span><br><span class="line"># First attempt to serve request as file, then</span><br><span class="line"># as directory, then fall back to displaying a 404.</span><br><span class="line">try_files $uri $uri&#x2F; &#x3D;404;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>行数说明：</p><ul><li>18：将http访问重定向为https访问，即定向到第二个 server 块，需要注意ssl证书到期时间</li><li>26：监听SSL的443端口</li><li>27：对应 ipv6</li><li>29：证书文件</li><li>30：私钥文件</li><li>33：协议配置</li><li>34：加密套件</li><li>37：nginx托管的hexo目录路径</li></ul><p>修改完后，重启Nginx。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo service nginx restart</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Hexo </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
            <tag> Hexo </tag>
            
            <tag> Ubuntu </tag>
            
            <tag> Nginx </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Python 批量修改图片尺寸</title>
      <link href="/2022/05/10/Python-%E6%89%B9%E9%87%8F%E4%BF%AE%E6%94%B9%E5%9B%BE%E7%89%87%E5%B0%BA%E5%AF%B8/"/>
      <url>/2022/05/10/Python-%E6%89%B9%E9%87%8F%E4%BF%AE%E6%94%B9%E5%9B%BE%E7%89%87%E5%B0%BA%E5%AF%B8/</url>
      
        <content type="html"><![CDATA[<p>PIL(Python Imaging Library)是Python的第三方图像处理库，但由于其强大的功能，事实上已经被认为是图像处理标准库了。PIL功能非常强大，而且API却非常简单易用。</p><p>由于PIL仅支持到Python 2.7，加上年久失修，于是一群志愿者在PIL的基础上创建了兼容的版本，名字叫Pillow，支持最新Python 3.x，又加入了许多新特性，因此，我们可以直接安装使用Pillow。</p><a id="more"></a><h2 id="安装Pillow库"><a href="#安装Pillow库" class="headerlink" title="安装Pillow库"></a>安装Pillow库</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install Pillow</span><br></pre></td></tr></table></figure><p>官方文档上有提供Pillow支持的Python 版本。基本上Python3.7+版本对Pillow新版都是支持的。<br>（<a class="link"   href="https://pillow.readthedocs.io/en/latest/installation.html" >https://pillow.readthedocs.io/en/latest/installation.html<i class="fas fa-external-link-alt"></i></a> ）<br><img                       lazyload                     src="/images/loading.svg"                     data-src="/img/Python_image_resize_1.png"                                     ></p><h2 id="批量修改图片尺寸"><a href="#批量修改图片尺寸" class="headerlink" title="批量修改图片尺寸"></a>批量修改图片尺寸</h2><p>在网上下载了一溜的avatar的头像图，大小都是<code>800*800</code>的，在博客中用，发现太大了，还占多的空间，想批量全部把大小修改成 <code>80*80</code>的，这样占的空间也小，反正够用。</p><p>原来<code>800*800</code>大小的图片，一张就要75KB左右，改成<code>80*80</code>大小后，就只有7KB左右了。</p><p>比如当前存放原图片的目录为：<code>C:\a</code></p><p><strong>解决思路</strong>：</p><ul><li>第一步，新建一个新的目录，用来存放新的尺寸的图片；（比如直接在目录后面加个 <code>_new</code>）</li><li>第二步，用glob.glob() 方法把目录下所有的图片路径获取出来，返回一个List；</li><li>第三步，遍历列表，处理每一张图片尺寸，把新的图片保存到新的目录中</li></ul><p><strong>修改图片尺寸代码：</strong></p><p>这个很简单，就这么三步：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> PIL <span class="keyword">import</span> Image</span><br><span class="line"></span><br><span class="line">img = Image.<span class="built_in">open</span>(<span class="string">&quot;abc.jpg&quot;</span>) <span class="comment"># 打开图片</span></span><br><span class="line">new_img = img.resize((<span class="number">80</span>, <span class="number">80</span>), Image.BILINEAR) <span class="comment"># 修改图片尺寸</span></span><br><span class="line">new_img.save(<span class="string">&quot;new_abc.jpg&quot;</span>) <span class="comment"># 保存图片</span></span><br></pre></td></tr></table></figure><p><strong>完整代码实现</strong>如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> PIL <span class="keyword">import</span> Image</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> glob</span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建目录</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">mkdir</span>(<span class="params">path</span>):</span></span><br><span class="line">    outdir = os.path.exists(path)</span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> outdir:</span><br><span class="line">        os.makedirs(path)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 修改所有图片尺寸</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">change_pic_size</span>(<span class="params">path, width, height</span>):</span></span><br><span class="line">    out_dir = path + <span class="string">&#x27;_new&#x27;</span> <span class="comment"># 改好尺寸后的新文件夹</span></span><br><span class="line">    mkdir(out_dir)</span><br><span class="line">    </span><br><span class="line">    path_files = path + <span class="string">&#x27;\\&#x27;</span> + <span class="string">&#x27;*.*&#x27;</span> <span class="comment"># 需要修改的图片文件夹中所有图片文件</span></span><br><span class="line">    path_list = glob.glob(path_files)</span><br><span class="line">    <span class="comment"># print(path_list)</span></span><br><span class="line">    <span class="keyword">for</span> picfile <span class="keyword">in</span> path_list:</span><br><span class="line">        img = Image.<span class="built_in">open</span>(picfile)</span><br><span class="line">        <span class="comment"># img.show()</span></span><br><span class="line">        <span class="comment"># print(img.mode)</span></span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            new_img = img.resize((width, height), Image.BILINEAR)</span><br><span class="line">            <span class="comment"># print(new_img.mode)</span></span><br><span class="line">            new_img.save(os.path.join(out_dir, os.path.basename(picfile)))</span><br><span class="line">        <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">            <span class="built_in">print</span>(e)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 批量修改图片尺寸</span></span><br><span class="line">change_pic_size(path=<span class="string">r&#x27;C:\a&#x27;</span>, width=<span class="number">80</span>, height=<span class="number">80</span>)</span><br></pre></td></tr></table></figure><p>执行完代码后，就得到了一个新的图片目录（’C:\a_new’），里面都是<code>80*80</code>的图片，图片文件名都没变。</p>]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Docker常用命令</title>
      <link href="/2022/05/09/Docker%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/"/>
      <url>/2022/05/09/Docker%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/</url>
      
        <content type="html"><![CDATA[<p>Docker 是一个开源的应用容器引擎。<br>也可以把它理解为一个轻量的虚拟机，它只虚拟你软件需要的运行环境，多余的一点都不要；而普通虚拟机则是一个完整而庞大的系统，包含各种不管你要不要的软件。</p><p>Docker 入门教程：<br><a class="link"   href="https://www.runoob.com/docker/docker-tutorial.html" >https://www.runoob.com/docker/docker-tutorial.html<i class="fas fa-external-link-alt"></i></a><br><a class="link"   href="https://docker.easydoc.net/doc/81170005/cCewZWoN/lTKfePfP" >https://docker.easydoc.net/doc/81170005/cCewZWoN/lTKfePfP<i class="fas fa-external-link-alt"></i></a></p><a id="more"></a><p><strong>Docker使用也很简单，一般步骤</strong>：</p><ul><li>拉取一个镜像（<code>docker pull</code>）</li><li>创建一个容器（<code>docker run</code>）</li><li>在容器中运行命令（<code>docker exec</code>）</li></ul><p>简单说，比如我（Centos系统）安装了Docker，可以下载一个ubuntu镜像（image）；<br>然后根据这个镜像，我可以创建容器叫 ubuntu1，ubuntu2，ubuntu3，这样就创建了3个容器；<br>然后进入容器ubuntu1，可以在容器里操作，比如安装mysql；<br>进入ubuntu2，安装sqlserver；<br>……<br>在不同的容器里可以做不同的测试。当不需要第1个容器，就删除第1个就行。</p><h2 id="docker-常用命令"><a href="#docker-常用命令" class="headerlink" title="docker 常用命令"></a>docker 常用命令</h2><p><code>docker [command] --help</code>可以查看command命令的使用方法</p><p>比如：<code>docker ps --help</code>：就可以查看<code>docker ps</code>这个命令的options（参数选项）。</p><h3 id="1-镜像"><a href="#1-镜像" class="headerlink" title="1.镜像"></a>1.镜像</h3><table><thead><tr><th>docker 命令</th><th>含义</th></tr></thead><tbody><tr><td>docker pull</td><td>拉取（下载）镜像</td></tr><tr><td>docker images</td><td>列出镜像</td></tr><tr><td>docker rmi</td><td>删除镜像</td></tr><tr><td>docker image prune</td><td>删除未被容器使用的镜像</td></tr><tr><td>docker build</td><td>创建新镜像（需要Dockerfile）</td></tr><tr><td>docker tag</td><td>标记镜像</td></tr><tr><td>docker save/load</td><td>镜像保存</td></tr></tbody></table><p><strong>查找镜像</strong>两种方法：</p><ul><li>方法一：官方镜像：<a class="link"   href="https://hub.docker.com/search?image_filter=official&amp;q=" >https://hub.docker.com/search?image_filter=official&amp;q=<i class="fas fa-external-link-alt"></i></a> 直接找到对应版本</li><li>方法二：<code>docker search [镜像名称]</code> # <code>docker search mysql</code>，搜索ubuntu镜像，搜索出来OFFICIAL标[OK]的表示官方发布的</li></ul><p><strong>最常用的命令：</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">docker pull [image name] <span class="comment"># docker pull mysql:8.0 拉取mysql:8.0版本的镜像</span></span><br><span class="line">docker images <span class="comment"># 列出镜像列表</span></span><br><span class="line">docker rmi -f [image name] <span class="comment"># docker rmi -f mysql 强制删除mysql镜像</span></span><br></pre></td></tr></table></figure><h3 id="2-容器"><a href="#2-容器" class="headerlink" title="2.容器"></a>2.容器</h3><table><thead><tr><th>docker 命令</th><th>含义</th></tr></thead><tbody><tr><td>docker run</td><td>创建容器</td></tr><tr><td>docker ps</td><td>列出运行中的容器</td></tr><tr><td>docker start/stop</td><td>启动/停止</td></tr><tr><td>docker rm</td><td>删除容器</td></tr><tr><td>docker rename</td><td>重命名</td></tr><tr><td>docker cp</td><td>复制</td></tr><tr><td>docker container prune</td><td>删除停止的容器</td></tr><tr><td>docker exec</td><td>运行命令</td></tr><tr><td>docker commit</td><td>从容器创建新镜像</td></tr></tbody></table><p><strong>最常用的命令：</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">docker run -it ubuntu /bin/bash <span class="comment"># 创建容器后，进入容器，输入`exit`回车退出</span></span><br><span class="line">docker run -itd --name u-test ubuntu /bin/bash <span class="comment"># -d表示后台运行 --name添加名称</span></span><br><span class="line"></span><br><span class="line">docker ps <span class="comment"># 列出运行中的容器</span></span><br><span class="line">docker ps -a <span class="comment"># 列出所有容器（包括停止的容器）</span></span><br><span class="line">docker stop &lt;container ID&gt; <span class="comment"># 停止容器（根据容器ID）</span></span><br><span class="line">docker start &lt;container ID&gt; <span class="comment"># 启动容器（根据容器ID）</span></span><br><span class="line">docker restart &lt;container ID&gt; <span class="comment"># 重启容器（根据容器ID）</span></span><br><span class="line">docker rm -f &lt;container ID&gt; <span class="comment"># 强制（-f参数）删除容器（根据容器ID）</span></span><br><span class="line"></span><br><span class="line">docker <span class="built_in">exec</span> -it &lt;container ID&gt; /bin/bash <span class="comment"># 进入容器（根据容器ID），`exit`退出</span></span><br></pre></td></tr></table></figure><p>Easy提供的一张Docker命令集的图：<br><img                       lazyload                     src="/images/loading.svg"                     data-src="/img/docker_command_1.png"                      style="zoom: 50%;"                ></p><h2 id="docker-常用举例"><a href="#docker-常用举例" class="headerlink" title="docker 常用举例"></a>docker 常用举例</h2><h3 id="1-创建mysql容器"><a href="#1-创建mysql容器" class="headerlink" title="1.创建mysql容器"></a>1.创建mysql容器</h3><p>步骤：</p><ul><li>拉取 mysql8.0版本镜像</li><li>创建mysql容器（-p 把mysql3306的端口映射到主机的3308端口上，root password设置）</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">docker pull mysql:8.0</span><br><span class="line">docker run -p 3308:3306 --name mysql -e MYSQL_ROOT_PASSWORD=123MYSQL -d mysql:8.0</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Docker </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Docker </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Python 正则表达式</title>
      <link href="/2022/05/06/Python-%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F/"/>
      <url>/2022/05/06/Python-%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F/</url>
      
        <content type="html"><![CDATA[<p>正则表达式是什么？</p><p>正则表达式(regular expression) 描述了一种字符串匹配的模式（pattern），可以用来检查一个串是否含有某种子串、将匹配的子串替换或者从某个串中取出符合某个条件的子串等。</p><p>比如：</p><ul><li><code>col+r</code>：可以匹配 color、colour、colouur 等，+ 号代表前面的字符至少出现一次1次或多次；</li><li><code>col*r</code>：可以匹配 colr、color、colour 等，<code>*</code> 号代表前面的字符可以0次或多次；</li><li><code>col?r</code>： 可以匹配 colr 或者 color，? 问号代表前面的字符可以出现0次或1次。</li></ul><a id="more"></a><h2 id="基础1"><a href="#基础1" class="headerlink" title="基础1"></a>基础1</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">\n 匹配换行符</span><br><span class="line">\t 匹配制表符</span><br><span class="line">\w 匹配字母、数字、下划线</span><br><span class="line">\W 匹配除字母、数字、下划线（与\w相反）</span><br><span class="line">\d 匹配十进制数字，等价于[0-9]</span><br><span class="line">\D 匹配除十进制数字（与\D相反）</span><br><span class="line">\b 匹配空字符串，仅用于单词的首尾。</span><br><span class="line">\B 匹配空字符串，但不能用于单词的首尾。</span><br><span class="line">\s 匹配空白字符</span><br><span class="line">\S 匹配除空白字符（与\s相反）</span><br><span class="line">[aeiou] 原子表，匹配aeiou中的任意一个</span><br><span class="line">[^ab89x] 原子表，匹配除ab89x以外的任意一个字符</span><br><span class="line">[a-z0-9] 使用减号指定字符区间。这里表示一个字符，必须是小写字母或数字</span><br><span class="line">[^A-Za-z] 第一个字符是^，表示反向逻辑。这里匹配除了大小写字符之外的其他任意字符</span><br></pre></td></tr></table></figure><h3 id="正则实例1"><a href="#正则实例1" class="headerlink" title="正则实例1"></a>正则实例1</h3><h2 id="基础2"><a href="#基础2" class="headerlink" title="基础2"></a>基础2</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">^ 匹配字符串的开头</span><br><span class="line">$ 匹配字符串的结尾</span><br><span class="line">. 匹配任一字符（一个通配符）</span><br><span class="line">? 表示前接字符出现0次或1次</span><br><span class="line">* 表示前接字符出现0次或多次</span><br><span class="line">+ 表示前接字符出现1次或多次</span><br><span class="line">&#123;n&#125; 表示前接字符恰好出现n次</span><br><span class="line">&#123;n,&#125; 表示前接字符至少出现n次</span><br><span class="line">&#123;n,m&#125; 表示前接字符至少出现n次，至多m次</span><br><span class="line">| 表示选择符或</span><br><span class="line">( ) 添加括号，括号内容会丧失匹配功能，但在findall()中可以用于抽取特定部分的字符串，而不是整个字符串。</span><br></pre></td></tr></table></figure><h3 id="正则实例2"><a href="#正则实例2" class="headerlink" title="正则实例2"></a>正则实例2</h3><h2 id="基础3：贪婪模式与非贪婪模式"><a href="#基础3：贪婪模式与非贪婪模式" class="headerlink" title="基础3：贪婪模式与非贪婪模式"></a>基础3：贪婪模式与非贪婪模式</h2><blockquote><p>贪婪模式：尽可能多的进行匹配（默认是贪婪模式）<br>非贪婪模式：尽可能少的匹配，精准匹配</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">*? 以非贪婪模式，表示前接字符出现0次或多次</span><br><span class="line">+? 以非贪婪模式，表示前接字符的1次或多次</span><br></pre></td></tr></table></figure><h3 id="正则实例3"><a href="#正则实例3" class="headerlink" title="正则实例3"></a>正则实例3</h3><h2 id="基础4：模式修正符"><a href="#基础4：模式修正符" class="headerlink" title="基础4：模式修正符"></a>基础4：模式修正符</h2><p>模式修正符：在不改变正则表达式的情况下通过模式修正符使匹配结果发生更改</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">re.s 让 . 也可以匹配多行</span><br><span class="line">re.l 让匹配时忽略大小写</span><br></pre></td></tr></table></figure><h3 id="正则实例4"><a href="#正则实例4" class="headerlink" title="正则实例4"></a>正则实例4</h3>]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Python Selenium查找元素方法汇总</title>
      <link href="/2022/05/04/Python-Selenium%E6%9F%A5%E6%89%BE%E5%85%83%E7%B4%A0%E6%96%B9%E6%B3%95%E6%B1%87%E6%80%BB/"/>
      <url>/2022/05/04/Python-Selenium%E6%9F%A5%E6%89%BE%E5%85%83%E7%B4%A0%E6%96%B9%E6%B3%95%E6%B1%87%E6%80%BB/</url>
      
        <content type="html"><![CDATA[<p>关于怎么安装使用Selenium，看这篇文章： <a href="/2022/05/04/Python-Selenium%E4%BD%BF%E7%94%A8%E4%B8%BE%E4%BE%8B/" title="Python Selenium使用举例">Python Selenium使用举例</a></p><p><strong>Selenium用法</strong> 主要就4步：</p><ul><li>1.创建WebDriver对象；</li><li>2.用WebDriver对象的<strong>get方法</strong>打开网址；</li><li>3.用WebDriver对象的<strong>find_element方法</strong>去找到网页上你需要的元素，返回WebElement对象（找到对象是重点）；</li><li>4.对WebElement对象进行操作，一般就是获取对象的内容、填写入内容或者click操作。</li></ul><p>这篇文章主要针对第3步，列举一些查找元素的方法。（文章代码中使用selenium4版本）</p><a id="more"></a><p>在浏览器中查找网页元素，直接按F12，打开开发者模式，在【元素】（Elements）选项中就可以查看网页源码。</p><p>查找网页元素时，有两个情况：</p><ul><li>webdriver.find_element：只查找1个元素（返回WebElement对象）；</li><li>webdriver.find_elements：查找多个元素（返回一个List的WebElement对象）</li></ul><h2 id="一、只查找一个元素（find-element方法）"><a href="#一、只查找一个元素（find-element方法）" class="headerlink" title="一、只查找一个元素（find_element方法）"></a>一、只查找一个元素（find_element方法）</h2><h3 id="1-简单的直接查找"><a href="#1-简单的直接查找" class="headerlink" title="1.简单的直接查找"></a>1.简单的直接查找</h3><ul><li>By.ID：通过HTML标签的id属性（id属性在HTML文档中具体唯一性，所以有id优先通过这个查找）</li><li>By.CLASS_NAME：通过HTML标签的class属性（class属性并没有唯一性，如果有多个元素的话，只会返回第1个；当然有些class在站点中唯一的话，也是可以用来查找的）</li><li>By.TAG_NAME：通过HTML标签（多个元素的话，也是返回第1个）</li></ul><p>对应代码为：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> selenium.webdriver.common.by <span class="keyword">import</span> By</span><br><span class="line"><span class="comment"># 初始化代码 ...</span></span><br><span class="line">wd = webdriver.Chrome(options=option)</span><br><span class="line">wd.get(<span class="string">&#x27;https://cn.bing.com/&#x27;</span>)</span><br><span class="line"><span class="comment"># ...</span></span><br><span class="line"></span><br><span class="line">e1 = wd.find_element(By.ID, <span class="string">&#x27;sb_form_q&#x27;</span>) <span class="comment"># 搜索框</span></span><br><span class="line">e2 = wd.find_element(By.CLASS_NAME, <span class="string">&#x27;sb_form_q&#x27;</span>)</span><br><span class="line">e3 = wd.find_element(By.TAG_NAME, <span class="string">&#x27;input&#x27;</span>)</span><br></pre></td></tr></table></figure><p>在F12打开的开发者工具中，按 <code>Ctrl+F</code>键，打开搜索。<br>如果是id，搜索id名前面加上<code>#</code>号，直接就能搜索id。如图所示：<br><img                       lazyload                     src="/images/loading.svg"                     data-src="/img/Python_Selenium_find_element_1.png"                       style="zoom: 50%;"                ></p><p>可以用 <code>WebElement.send_keys(&#39;搜索内容&#39;)</code>测试是否找到了这个元素，或者直接print一下。</p><p>如果找不到元素，或者有这个元素、网站响应速度比代码执行速度慢点，find_element 方法就会抛出 selenium.common.exceptions.NoSuchElementException 异常。</p><h3 id="2-处理-NoSuchElementException-的异常"><a href="#2-处理-NoSuchElementException-的异常" class="headerlink" title="2.处理 NoSuchElementException 的异常"></a>2.处理 NoSuchElementException 的异常</h3><p>因为有2种情况，都会有有这个异常：</p><ul><li>情况一：找不到此元素</li><li>情况二：代码执行速度比网站响应快</li></ul><p>1).如果是第二种情况</p><p>虽然用了 <code>wd.implicitly_wait(10)</code> ，但有时候还是会有这个问题。</p><p>我一般这样处理这个异常，get方法之后sleep一下（时间不是固定，看网络和站点的响应情况），然后如果报这个异常，就再sleep多等待一下再查找这个元素。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">wd.get(site_url)</span><br><span class="line">time.sleep(<span class="number">2</span>) <span class="comment"># 等待2秒</span></span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    element = wd.find_element(By.ID,<span class="string">&#x27;search_icon&#x27;</span>)</span><br><span class="line"><span class="keyword">except</span> selenium.common.exceptions.NoSuchElementException:</span><br><span class="line">    time.sleep(<span class="number">5</span>) <span class="comment"># 等待5秒</span></span><br><span class="line">    element = wd.find_element(By.ID,<span class="string">&#x27;search_icon&#x27;</span>)</span><br></pre></td></tr></table></figure><p>2).如果是第一种情况</p><p>就直接在语句后面加个 if(element)的判断好了，看看false的时候（没找到元素）需要做什么处理或者提示。</p><h3 id="3-通过CSS-SELECTOR-复杂一点的查找（全能查找）"><a href="#3-通过CSS-SELECTOR-复杂一点的查找（全能查找）" class="headerlink" title="3.通过CSS_SELECTOR 复杂一点的查找（全能查找）"></a>3.通过CSS_SELECTOR 复杂一点的查找（全能查找）</h3><p><strong>By.CSS_SELECTOR</strong>就比较全能了，用这个也可以根据ID、CLASS_NAME来查找的。</p><p>1).普通查找</p><ul><li>(By.CSS_SELECTOR,’#sb_form_q’)：# 根据id查找，= (By.ID, ‘sb_form_q’)</li><li>(By.CSS_SELECTOR,’.sb_form_q’)：# 根据class name查找，=(By.CLASS_NAME, ‘sb_form_q’)</li></ul><p>2).子元素、后代元素查找（这个经常会用到）</p><p>比如有如下一段html代码：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&#x27;container&#x27;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&#x27;layer1&#x27;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&#x27;inner11&#x27;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">span</span>&gt;</span>内层11<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&#x27;inner12&#x27;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">span</span>&gt;</span>内层12<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&#x27;container&#x27;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&#x27;layer1&#x27;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&#x27;inner33&#x27;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">span</span>&gt;</span>内层33<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&#x27;inner44&#x27;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">span</span>&gt;</span>内层12<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><p>我要查找“内层33”这个内容，那我们可以这样找：</p><ul><li><code>(By.CSS_SELECTOR, &#39;.container &gt; .layer1 &gt; .inner33&#39;)</code>：# 如果用大于号，表示子元素，必须一层一层，中间不能少个</li><li><code>(By.CSS_SELECTOR, &#39;.container .layer1 .inner33&#39;)</code>： # 如果没用大于号，表示后代元素</li><li><code>(By.CSS_SELECTOR, &#39;.container .inner33&#39;)</code>： # 后代元素中间每一层就不是必须了</li></ul><p>3).根据属性查找（这个也常用）</p><ul><li><code>(By.CSS_SELECTOR,&#39;div[class=&quot;inner44&quot;]&#39;)</code>：# 查找tag是div，且class属性是inner44的</li><li><code>(By.CSS_SELECTOR,&#39;button[type=submit]&#39;)</code>：# 查找tag是button且type属性是submit的</li><li> <code>(By.CSS_SELECTOR,&#39;[href=&quot;www.test.com&quot;]&#39;)</code>：# 查找对应的href属性值</li><li><code>(By.CSS_SELECTOR,&#39;div[class=&quot;inner44&quot;][ctype=&quot;test&quot;]&#39;)</code>：# 查找tag是div，且class属性是inner44、ctype属性是test的（可以多个属性）</li><li><code>(By.CSS_SELECTOR,&#39;a[href*=&quot;http&quot;]&#39;)</code>：# 还可以用正则，查找a标签href属性包含http的</li><li><code>(By.CSS_SELECTOR,&#39;a[href^=&quot;http&quot;]&#39;)</code>：# 查找a标签href属性以http开头的</li><li><code>(By.CSS_SELECTOR,&#39;a[href$=&quot;.cn&quot;]&#39;)</code>：# 查找a标签href属性以.cn结尾的</li></ul><p>用的最多的感觉除了偶尔能用直接查找外，就是后代元素（多个class_name定位）和根据属性查找。</p><h3 id="4-Xpath选择器（全能查找）"><a href="#4-Xpath选择器（全能查找）" class="headerlink" title="4.Xpath选择器（全能查找）"></a>4.Xpath选择器（全能查找）</h3><p>用css查找基本上很方便、强大了，只是有些场景用 css 查找元素会比较麻烦，而xpath比较方便。<br>另外 Xpath 还有其他领域会使用到，比如爬虫框架 Scrapy，手机App框架 Appium。</p><p>用Xpath的时候，代码就用By.XPATH，类似这样： <code>wd.find_element(By.XPATH,&#39;/html/body/div&#39;)</code></p><p>等回头研究用爬虫的时候，用的例子多一些，再单独写一篇。此篇略。</p><h2 id="二、查找多个元素（find-elements方法）"><a href="#二、查找多个元素（find-elements方法）" class="headerlink" title="二、查找多个元素（find_elements方法）"></a>二、查找多个元素（find_elements方法）</h2><p>比如有时候一个class_name会有很多地方在用 ，就可以查多个元素。</p><p>find_elements方法返回是一个List的列表，所以用for循环一下就能得到每一个。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">elements = wd.find_elements(By.CLASS_NAME, <span class="string">&#x27;sb_form_q&#x27;</span>)</span><br><span class="line"><span class="keyword">for</span> element <span class="keyword">in</span> elements:</span><br><span class="line">    <span class="built_in">print</span>(element.text)</span><br></pre></td></tr></table></figure><p>所以CSS_SELECTOR中还有子节点的写法，我一般也不用，直接find_elements后，取列表中第几个。</p><p><strong>find_element 和 find_elements 的区别</strong></p><ul><li>find_elements：找出符合条件的所有元素， 如果没有，返回空列表</li><li>find_element：找出符合条件的第一个元素，如果没有，抛出NoSuchElementException 异常</li></ul>]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
            <tag> Selenium </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Python Selenium使用举例</title>
      <link href="/2022/05/04/Python-Selenium%E4%BD%BF%E7%94%A8%E4%B8%BE%E4%BE%8B/"/>
      <url>/2022/05/04/Python-Selenium%E4%BD%BF%E7%94%A8%E4%B8%BE%E4%BE%8B/</url>
      
        <content type="html"><![CDATA[<p>Selenium是一个用于Web应用程序测试的开源工具。Selenium测试直接运行在浏览器中，就像真正的用户在操作一样，实现自动化测试。说白了，就是个Web应用的自动化测试工具。</p><p>Web的自动化测试，因为是模拟用户操作一样，自然而然也可以把测试过程中需要的数据、信息等保存下来。所以我也用这个来下载一些公开数据（不用担心对爬虫的限制啥的）。</p><a id="more"></a><p>Selenium with Python中文文档：<a class="link"   href="https://selenium-python-zh.readthedocs.io/en/latest/index.html" >https://selenium-python-zh.readthedocs.io/en/latest/index.html<i class="fas fa-external-link-alt"></i></a></p><h2 id="一、安装Selenium包"><a href="#一、安装Selenium包" class="headerlink" title="一、安装Selenium包"></a>一、安装Selenium包</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install selenium</span><br></pre></td></tr></table></figure><p>如果不知道自己是否安装过，可以用以下命令：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install -U selenium</span><br></pre></td></tr></table></figure><blockquote><p>-U：就是 –upgrade，表示如果已安装就升级到最新版。</p></blockquote><h2 id="二、安装浏览器驱动"><a href="#二、安装浏览器驱动" class="headerlink" title="二、安装浏览器驱动"></a>二、安装浏览器驱动</h2><p>需要找你自己的浏览器版本对应的驱动下载。<br>（浏览器一般会自动更新，需要及时更换）</p><h3 id="1-下载-WebDriver"><a href="#1-下载-WebDriver" class="headerlink" title="1.下载 WebDriver"></a>1.下载 WebDriver</h3><p>1).Chrome WebDriver下载：<br><a class="link"   href="https://chromedriver.storage.googleapis.com/index.html" >https://chromedriver.storage.googleapis.com/index.html<i class="fas fa-external-link-alt"></i></a></p><p><a class="link"   href="https://sites.google.com/a/chromium.org/chromedriver/downloads" >https://sites.google.com/a/chromium.org/chromedriver/downloads<i class="fas fa-external-link-alt"></i></a></p><p>如果用的是<mark> Chrome115</mark>以上的版本，下载地址：<br><a class="link"   href="https://googlechromelabs.github.io/chrome-for-testing/" >https://googlechromelabs.github.io/chrome-for-testing/<i class="fas fa-external-link-alt"></i></a></p><p>2).Edge WebDriver下载：<br><a class="link"   href="https://developer.microsoft.com/en-us/microsoft-edge/tools/webdriver/" >https://developer.microsoft.com/en-us/microsoft-edge/tools/webdriver/<i class="fas fa-external-link-alt"></i></a></p><p>3).Firefox WebDriver下载：<br><a class="link"   href="https://github.com/mozilla/geckodriver/releases" >https://github.com/mozilla/geckodriver/releases<i class="fas fa-external-link-alt"></i></a></p><p>4).Safari WebDriver下载：<br><a class="link"   href="https://webkit.org/blog/6900/webdriver-support-in-safari-10/" >https://webkit.org/blog/6900/webdriver-support-in-safari-10/<i class="fas fa-external-link-alt"></i></a></p><p><strong>Chrome WebDriver下载举例</strong></p><p>第2个下载不了（需要梯子），就用1个下载地址。</p><p>比如我用的Chrome版本是：101.0.4951.54<br>那就直接在页面上搜 101.0.4951，然后最后一位找个小一点最接近的，比如 101.0.4951.41 这个目录点进去。</p><p>会提供 Linux、Mac、Windows系统对应的版本，比如我这是Windows系统的，就下载对应的 chromedriver_win32.zip。<br>解压后得到一个 chromedriver.exe 文件，随便找地方放一下（回头需要用到这个文件的路径）。</p><p><strong>Edge WebDriver下载举例</strong></p><p>比如我用的Edge版本是：101.0.1210.32 (正式版本) (64 位)<br>打开下载页后，直接看到这个版本对应有：x86、x64、Mac、Linux等系统下载。<br>x86是32位的，所以下载x64的版本。<br>把压缩包里的 msedgedriver.exe 文件解压出来就行。（回头需要用到这个文件的路径）</p><h3 id="2-添加到系统环境变量"><a href="#2-添加到系统环境变量" class="headerlink" title="2.添加到系统环境变量"></a>2.添加到系统环境变量</h3><p>建个目录，把两个WebDriver文件放一起，就放在：</p><ul><li>G:\Python\software\webdriver\chromedriver.exe、</li><li>G:\Python\software\webdriver\msedgedriver.exe</li></ul><p>放好之后，将这个webdriver目录添加到系统环境变量中。<br>注：现在新的selenium4好像已经不支持在参数中用这个webdriver的路径了，selenium3原来是可以用的。所以建议还是添加到环境变量。</p><h2 id="三、代码示例"><a href="#三、代码示例" class="headerlink" title="三、代码示例"></a>三、代码示例</h2><p><strong>Selenium用法</strong> 主要就4步：</p><ul><li>1.创建WebDriver对象 webdriver.Chrome()；</li><li>2.用WebDriver对象的<strong>get方法</strong>打开网址；</li><li>3.用WebDriver对象的<strong>find_element方法</strong>去找到网页上你需要的元素，返回WebElement对象（找到对象是重点）；</li><li>4.对WebElement对象进行操作，一般就是获取对象的内容、填写入内容或者click操作。</li></ul><p>以下代码示例用的Chrome浏览器测试，webdriver文件已添加到环境变量；如果没添加的，把driver_path 变量启用一下就行。</p><p>这种做搜索引擎站点做测试效果一般，建议用别的站点。反正一开始用的百度，还会有验证出来，所以用 time.sleep()等待了几秒。</p><p>注意：以下代码中用的Selenium为<strong>Selenium4</strong>新版用法。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> selenium <span class="keyword">import</span> webdriver</span><br><span class="line"><span class="keyword">from</span> selenium.webdriver.common.by <span class="keyword">import</span> By</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line">option = webdriver.ChromeOptions() <span class="comment"># Edge浏览器没有option参数，比较麻烦</span></span><br><span class="line">option.add_experimental_option(<span class="string">&quot;detach&quot;</span>, <span class="literal">True</span>) <span class="comment"># 不自动关闭浏览器</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建 WebDriver 对象，指明使用chrome浏览器驱动</span></span><br><span class="line"><span class="comment"># 两种模式，第一种：打开浏览器模式（默认为第一种，建议测试时用第一种模式，可以看到效果）</span></span><br><span class="line"><span class="comment"># 第二种：不打开浏览器模式（给option添加以下代码就行）</span></span><br><span class="line"><span class="comment"># option.add_argument(&#x27;headless&#x27;)</span></span><br><span class="line"></span><br><span class="line">wd = webdriver.Chrome(options=option)</span><br><span class="line"></span><br><span class="line">wd.implicitly_wait(<span class="number">10</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 调用WebDriver 对象的get方法 可以让浏览器打开指定网址</span></span><br><span class="line">wd.get(<span class="string">&#x27;https://cn.bing.com/&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(wd.title) <span class="comment"># 打印网页标题</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 根据id选择元素，返回的就是该元素对应的WebElement对象</span></span><br><span class="line"><span class="comment"># element = wd.find_element_by_id(&#x27;c&#x27;) # selenium3写法</span></span><br><span class="line">element = wd.find_element(By.ID,<span class="string">&#x27;sb_form_q&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 通过该 WebElement对象，就可以对页面元素进行操作了</span></span><br><span class="line"><span class="comment"># 比如输入字符串到 这个 输入框里</span></span><br><span class="line"><span class="comment"># element.send_keys(&#x27;五四青年节\n&#x27;)</span></span><br><span class="line">element.send_keys(<span class="string">&#x27;五四青年节&#x27;</span>)</span><br><span class="line"></span><br><span class="line">time.sleep(<span class="number">5</span>)</span><br><span class="line"></span><br><span class="line">element2 = wd.find_element(By.ID, <span class="string">&#x27;search_icon&#x27;</span>)</span><br><span class="line">element2.click()</span><br><span class="line">time.sleep(<span class="number">5</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># wd.quit()</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
            <tag> Selenium </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>用FFmpeg下载m3u8格式视频</title>
      <link href="/2022/05/03/%E7%94%A8ffmpeg%E4%B8%8B%E8%BD%BDm3u8%E6%A0%BC%E5%BC%8F%E8%A7%86%E9%A2%91/"/>
      <url>/2022/05/03/%E7%94%A8ffmpeg%E4%B8%8B%E8%BD%BDm3u8%E6%A0%BC%E5%BC%8F%E8%A7%86%E9%A2%91/</url>
      
        <content type="html"><![CDATA[<p>FFmpeg 是一个开源软件，可以执行音频和视频多种格式的录影、转换、串流功能，包含了libavcodec——这是一个用于多个项目中音频和视频的解码器库，以及libavformat——一个音频与视频格式转换库。</p><p>反正FFmpeg很强大的，功能也很多。这篇文章，主要介绍下载m3u8视频。</p><a id="more"></a><p>之前有两篇文章介绍了下载视频的工具，即：</p><ul><li><a href="/2022/04/09/youtube-dl%20%E4%BD%BF%E7%94%A8%E6%95%99%E7%A8%8B/" title="youtube-dl 使用教程">youtube-dl 使用教程</a></li><li><a href="/2022/04/09/you-get%20%E4%BD%BF%E7%94%A8%E6%95%99%E7%A8%8B/" title="you-get 使用教程">you-get 使用教程</a></li></ul><p>you-get 和 youtube-dl 这两差不多，youtube-dl 能下载包括油管视频在内的不少视频了。这两都是一款采用Python 编写的免费、开源、命令行程序，主要是用来下载视频的。而且也都用到了FFmpeg的功能，所以都已经安装了。</p><h2 id="一、下载FFmpeg"><a href="#一、下载FFmpeg" class="headerlink" title="一、下载FFmpeg"></a>一、下载FFmpeg</h2><h3 id="1-下载FFmpeg"><a href="#1-下载FFmpeg" class="headerlink" title="1.下载FFmpeg"></a>1.下载FFmpeg</h3><p>官网就可以下载 FFmpeg：（<a class="link"   href="http://ffmpeg.org/download.html" >http://ffmpeg.org/download.html<i class="fas fa-external-link-alt"></i></a> ）</p><p>Windows系统的话，选择【Windows EXE Files】-&gt;【Windows builds from gyan.dev】。</p><p>页面上的都可以下载，比如我这直接下载【release builds】中的 ffmpeg-release-essentials.7z，目前最新的版本。如下图所示：<br><img                       lazyload                     src="/images/loading.svg"                     data-src="/img/ffmpeg_download_m3u8_1.png"                      style="zoom: 50%;"                ></p><h3 id="2-添加到环境变量"><a href="#2-添加到环境变量" class="headerlink" title="2.添加到环境变量"></a>2.添加到环境变量</h3><p>下载后是个压缩包，直接解压出来。比如我这解压出来是个 ffmpeg-5.0.1-essentials_build 目录，然后直接把这个目录下的<strong>bin目录</strong>添加到系统环境变量就行。（怎么添加环境变量，百度一下就有）</p><p>因为bin目录下有 ffmpeg.exe 可执行程序，我们在命令行里用 ffmpeg命令时，用的就是这个。</p><h2 id="二、下载m3u8格式视频"><a href="#二、下载m3u8格式视频" class="headerlink" title="二、下载m3u8格式视频"></a>二、下载m3u8格式视频</h2><p>比如，有如下视频想要下载：<br><a class="link"   href="https://www.zxx.edu.cn/syncClassroom/classActivity?activityId=4cb86b98-b253-4884-b015-fe674f1c0c8a" >https://www.zxx.edu.cn/syncClassroom/classActivity?activityId=4cb86b98-b253-4884-b015-fe674f1c0c8a<i class="fas fa-external-link-alt"></i></a></p><p>用别的插件一看就能看到是m3u8的。</p><p>这个站点的，先试了下，用 VLC media player 这个播放器软件也可以下载，以前碰到过m3u8格式的无法用这个下载的。<br>如果你没装ffmpeg的话，也可以搜一下“<strong>VLC media player 下载m3u8视频方式</strong>”，这个也简单的。</p><p>不管是用VLC media player 下载，还是用ffmpeg下载，首先都需要找到这个视频的m3u8的地址。</p><h3 id="1-找到视频对应的m3u8地址"><a href="#1-找到视频对应的m3u8地址" class="headerlink" title="1.找到视频对应的m3u8地址"></a>1.找到视频对应的m3u8地址</h3><p>1).直接用浏览器F12开发者工具找m3u8地址</p><p>这个不管Chrome浏览器，还是Edge、Firefox这些基本上所有浏览器都有了。操作如下：</p><ul><li>按<strong>F12</strong>打开浏览器的开发者工具，选择【网络】项；</li><li>在【Name】中找到.m3u8后单击（按Name排序一下，很容易找到的）；</li><li>复制右侧的【请求网址】，网址最后应该都是 .m3u8。</li></ul><img                       lazyload                     src="/images/loading.svg"                     data-src="/img/ffmpeg_download_m3u8_2.png"                      style="zoom: 50%;"                ><p>比如我复制出来为：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https:&#x2F;&#x2F;r1-ndr.ykt.cbern.com.cn&#x2F;edu_product&#x2F;65&#x2F;video&#x2F;17b9d867547a11eb96b8fa20200c3759&#x2F;e6d5486a49d609bfca30e0f3a328f031.1280.720.false&#x2F;e6d5486a49d609bfca30e0f3a328f031.1280.720.m3u8</span><br></pre></td></tr></table></figure><p>2).直接用浏览器插件找m3u8地址</p><p>比如这里直接用“猫抓”的插件：</p><ul><li>播放视频，点击猫抓插件；</li><li>直接复制最上面的m3u8地址。</li></ul><img                       lazyload                     src="/images/loading.svg"                     data-src="/img/ffmpeg_download_m3u8_3.png"                      style="zoom: 50%;"                ><p>复制出来和上面的方法是一样的。</p><h3 id="2-用ffmpeg下载m3u8视频"><a href="#2-用ffmpeg下载m3u8视频" class="headerlink" title="2.用ffmpeg下载m3u8视频"></a>2.用ffmpeg下载m3u8视频</h3><p>添加好环境变量后，直接打开个命令提示符/Windows PowerShell，就可以用ffmpeg了。</p><p>输入命令如下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ffmpeg -i 你要下载的m3u8地址 -c copy -bsf:a aac_adtstoasc ./保存视频的名字.mp4</span><br></pre></td></tr></table></figure><p>比如我要下载上面的视频，就输入以下命令后，回车：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ffmpeg -i https://r1-ndr.ykt.cbern.com.cn/edu_product/65/video/17b9d867547a11eb96b8fa20200c3759/e6d5486a49d609bfca30e0f3a328f031.1280.720.false/e6d5486a49d609bfca30e0f3a328f031.1280.720.m3u8 -c copy -bsf:a aac_adtstoasc ./1234.mp4</span><br></pre></td></tr></table></figure><p>等完成后，这个目录下就有了下载好的名为 1234.mp4的视频了。</p><img                       lazyload                     src="/images/loading.svg"                     data-src="/img/ffmpeg_download_m3u8_4.png"                      style="zoom: 50%;"                >]]></content>
      
      
      <categories>
          
          <category> Software </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Software </tag>
            
            <tag> ffmpeg </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hexo Keep主题添加归档页和标签页</title>
      <link href="/2022/05/03/Hexo-Keep%E4%B8%BB%E9%A2%98%E6%B7%BB%E5%8A%A0%E5%BD%92%E6%A1%A3%E9%A1%B5%E5%92%8C%E6%A0%87%E7%AD%BE%E9%A1%B5/"/>
      <url>/2022/05/03/Hexo-Keep%E4%B8%BB%E9%A2%98%E6%B7%BB%E5%8A%A0%E5%BD%92%E6%A1%A3%E9%A1%B5%E5%92%8C%E6%A0%87%E7%AD%BE%E9%A1%B5/</url>
      
        <content type="html"><![CDATA[<p>Keep主题官方文档：<a class="link"   href="https://keep-docs.xpoet.cn/" >https://keep-docs.xpoet.cn/<i class="fas fa-external-link-alt"></i></a></p><p>Keep主题配置指南：<a class="link"   href="https://keep-docs.xpoet.cn/usage-tutorial/configuration-guide.html" >https://keep-docs.xpoet.cn/usage-tutorial/configuration-guide.html<i class="fas fa-external-link-alt"></i></a></p><p>Keep主题默认导航菜单上没有【归档】和【标签】菜单。所以需要自己开启。</p><a id="more"></a><h3 id="1-修改主题配置文件（-config-yml）"><a href="#1-修改主题配置文件（-config-yml）" class="headerlink" title="1.修改主题配置文件（_config.yml）"></a>1.修改主题配置文件（<code>_config.yml</code>）</h3><p>主题的配置文件（<code>_config.yml</code>）中导航菜单中归档页（Categories）和标签页（Tags）默认是注释了的。</p><p>所以，只要去掉注释，就可以启用了。如下所示：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">menu:</span></span><br><span class="line">  <span class="attr">Home:</span> <span class="string">/</span></span><br><span class="line">  <span class="attr">Archives:</span> <span class="string">/archives</span></span><br><span class="line">  <span class="attr">Categories:</span> <span class="string">/categories</span></span><br><span class="line">  <span class="attr">Tags:</span> <span class="string">/tags</span></span><br><span class="line">  <span class="comment"># Links: /links</span></span><br><span class="line">  <span class="comment"># About: /about</span></span><br><span class="line">  <span class="comment"># Changelog: /changelog</span></span><br><span class="line">  <span class="comment"># ......</span></span><br></pre></td></tr></table></figure><p>去掉注释后，首页导航菜单中有了【归档】和【标签】菜单，但打开并没有内容。</p><h3 id="2-添加【归档】和【标签】对应的页面文件"><a href="#2-添加【归档】和【标签】对应的页面文件" class="headerlink" title="2.添加【归档】和【标签】对应的页面文件"></a>2.添加【归档】和【标签】对应的页面文件</h3><p>直接用 hexo命令新建页面。<br>在Hexo目录下，打开【Git Bash】，依次执行以下两条语句：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">hexo new <span class="string">&quot;categories&quot;</span></span><br><span class="line">hexo new <span class="string">&quot;tags&quot;</span></span><br></pre></td></tr></table></figure><p>执行完两条命令后，会有Hexo的source目录下新建出 <code>categories\index.md</code> 文件和<code>tages\index.md</code> 文件。</p><p>当然新建完后，发现首页导航菜单中【归档】和【标签】菜单打开也有了内容。</p><p>但是，有一个问题，就是当你继续更新博客文章后，这两个菜单中的内容并不会更新。所以还需要修改这两个文件的内容。</p><h3 id="3-修改index-md文件中的内容。"><a href="#3-修改index-md文件中的内容。" class="headerlink" title="3.修改index.md文件中的内容。"></a>3.修改index.md文件中的内容。</h3><p>1).修改 <code>source\categories\index.md</code> 文件</p><p>在Front-matter部分增加后面2行内容，修改为：</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">title: categories</span><br><span class="line">date: 2022-04-30 21:55:36</span><br><span class="line">type: &quot;categories&quot;</span><br><span class="line">comment: false</span><br></pre></td></tr></table></figure><p>2).修改 <code>source\tags\index.md</code> 文件</p><p>在Front-matter部分增加后面2行内容，修改为：</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">title: tags</span><br><span class="line">date: 2022-04-30 21:54:07</span><br><span class="line">type: &quot;tags&quot;</span><br><span class="line">comment: false</span><br></pre></td></tr></table></figure><p>主要是增加type参数，comments设为false表示该页面不允许评论。</p><p>至此，再更新博客文章后，【归档】和【标签】菜单中也会跟着更新了。</p>]]></content>
      
      
      <categories>
          
          <category> Hexo </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Hexo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【不断更新系列】Linux命令小记</title>
      <link href="/2022/05/02/%E3%80%90%E4%B8%8D%E6%96%AD%E6%9B%B4%E6%96%B0%E7%B3%BB%E5%88%97%E3%80%91Linux%E5%91%BD%E4%BB%A4%E5%B0%8F%E8%AE%B0/"/>
      <url>/2022/05/02/%E3%80%90%E4%B8%8D%E6%96%AD%E6%9B%B4%E6%96%B0%E7%B3%BB%E5%88%97%E3%80%91Linux%E5%91%BD%E4%BB%A4%E5%B0%8F%E8%AE%B0/</url>
      
        <content type="html"><![CDATA[<p>Linux的命令，主要在服务器上用的比较多。一般用的最多的就是CentOS和Ubuntu这两系统的。</p><p>这篇文章主要：</p><ul><li>总结一些常用的Linux命令</li><li>整理博客中具体介绍Linux命令的文章</li></ul><a id="more"></a><h2 id="一、常用的Linux命令"><a href="#一、常用的Linux命令" class="headerlink" title="一、常用的Linux命令"></a>一、常用的Linux命令</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">pwd</span> <span class="comment"># print work directory 显示当前目录的绝对路径</span></span><br><span class="line">whoami <span class="comment"># 显示当前用户的用户名</span></span><br><span class="line">ls <span class="comment"># list 列出当前目录的列表</span></span><br><span class="line">ls -l <span class="comment"># 列出当前目录的列表，包括文件形态、权限、拥有者、文件大小、日期等。</span></span><br><span class="line">ifconfig <span class="comment"># 显示网络情况，对应Windows下ipconfig</span></span><br><span class="line">top <span class="comment"># 显示系统中进程资源占用情况，相当于Windows下任务管理器</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">cd</span> ~ <span class="comment"># change directory 切换目录，~ 表示当前用户的home目录</span></span><br><span class="line"><span class="built_in">which</span> python <span class="comment"># 在系统变量中，搜索命令python的路径</span></span><br><span class="line">su root <span class="comment"># su 切换用户，切换到root用户</span></span><br><span class="line">chmod 755 a.txt <span class="comment"># 修改文件权限，把a.txt权限设为755</span></span><br><span class="line">chown testuser a.txt <span class="comment"># 修改文件所有者，把a.txt所有者设为testuser用户</span></span><br><span class="line">chown -R testuser:testuser /home/abc/ <span class="comment"># 把abc目录以及其子目录下所有文件所有权限给用户testuser，群体使用者testuser</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 目录</span></span><br><span class="line">mkdir dir1 <span class="comment"># 创建目录dir1</span></span><br><span class="line">rm -rf dir1 <span class="comment"># 删除，强制删除目录dir1</span></span><br><span class="line">cp -r dir1 dir2 <span class="comment"># 复制，把dir1目录复制一个dir2目录</span></span><br><span class="line">mv dir1 dir2 <span class="comment"># 移动，把dir1目录移动到dir2目录</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 文件</span></span><br><span class="line">vi a.txt <span class="comment"># 用vi编辑器打开a.txt文件</span></span><br><span class="line">vim a.txt <span class="comment"># 用vim编辑器打开a.txt文件</span></span><br><span class="line">cat a.txt <span class="comment"># 用cat读取文件，显示内容</span></span><br><span class="line">mv a.txt b.txt <span class="comment"># 移动重命名，把a.txt文件移动到b.txt上</span></span><br><span class="line">rm a.txt <span class="comment"># 删除，删除a.txt，加-rf参数 强制删除</span></span><br></pre></td></tr></table></figure><p><strong>Ubuntu</strong>与<strong>CentOS</strong>命令有的区别</p><table><thead><tr><th>任务</th><th>Ubuntu命令</th><th>CentOS命令</th></tr></thead><tbody><tr><td>安装软件</td><td><code>apt-get install package</code></td><td><code>yum install package</code></td></tr><tr><td>删除/卸载软件</td><td><code>apt-get remove package</code></td><td><code>yum remove package</code></td></tr><tr><td>升级软件包</td><td><code>apt-get upgrade</code></td><td><code>yum update</code></td></tr><tr><td>软件包后缀</td><td>*.deb</td><td>*.rpm</td></tr><tr><td>安装已下载的软件包</td><td><code>dpkg -i package.deb</code></td><td><code>rpm -i package.rpm</code>或<code>yum install package.rpm</code></td></tr></tbody></table><h2 id="二、其他有用的Linux命令"><a href="#二、其他有用的Linux命令" class="headerlink" title="二、其他有用的Linux命令"></a>二、其他有用的Linux命令</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">id <span class="comment"># 显示真实以及有效的用户和所在组的信息</span></span><br><span class="line">crontab -e <span class="comment"># 进入当前用户定时任务工作表编辑</span></span><br><span class="line"></span><br><span class="line">ps -aux | grep <span class="string">&quot;app.py&quot;</span> <span class="comment"># process status 查找列出&quot;app.py&quot;进程、带进程PID</span></span><br><span class="line"><span class="built_in">kill</span> -9 11111 <span class="comment"># 结束进程PID=11111，加-9参数 彻底杀死进程</span></span><br><span class="line">netstat -ntulp | grep 3306   <span class="comment"># 查看所有3306端口使用情况</span></span><br><span class="line">lsof -i 3306 <span class="comment"># 查看所有3306端口使用情况</span></span><br><span class="line">systemctl restart nginx <span class="comment"># 重启nginx服务</span></span><br><span class="line">service nginx restart <span class="comment"># 重启nginx服务</span></span><br><span class="line">whatis <span class="built_in">pwd</span> <span class="comment"># 查询命令执行什么功能，查询pwd命令的功能</span></span><br></pre></td></tr></table></figure><h2 id="三、Linux命令具体使用文章集合"><a href="#三、Linux命令具体使用文章集合" class="headerlink" title="三、Linux命令具体使用文章集合"></a>三、Linux命令具体使用文章集合</h2><ul><li><a href="/2021/02/05/Ubuntu%E5%8D%87%E7%BA%A7OpenSSL%E6%95%99%E7%A8%8B/" title="Ubuntu 升级OpenSSL教程">Ubuntu 升级OpenSSL教程</a></li><li><a href="/2021/02/08/Ubuntu%E5%AE%89%E8%A3%85Chrome%E6%B5%8F%E8%A7%88%E5%99%A8/" title="Ubuntu 命令行安装Chrome浏览器">Ubuntu 命令行安装Chrome浏览器</a></li><li><a href="/2021/02/08/Ubuntu%E5%AE%89%E8%A3%85Selenium%E8%87%AA%E5%8A%A8%E5%8C%96%E6%B5%8B%E8%AF%95/" title="Ubuntu 安装Selenium自动化测试">Ubuntu 安装Selenium自动化测试</a></li><li><a href="/2021/02/08/Ubuntu%E6%9F%A5%E7%9C%8BCPU%E5%8D%A0%E7%94%A8%E5%92%8C%E4%BD%BF%E7%94%A8%E6%83%85%E5%86%B5/" title="Ubuntu 查看CPU占用和使用情况">Ubuntu 查看CPU占用和使用情况</a></li><li><a href="/2021/02/08/Linux%20%E4%BF%AE%E6%94%B9%E6%96%87%E4%BB%B6%E6%9D%83%E9%99%90/" title="Linux 修改文件权限">Linux 修改文件权限</a></li><li><a href="/2021/02/08/Linux%20vim%E5%91%BD%E4%BB%A4%E7%AE%80%E5%8D%95%E4%BD%BF%E7%94%A8/" title="Linux vim&#x2F;vi 命令简单使用">Linux vim&#x2F;vi 命令简单使用</a></li><li><a href="/2021/02/08/Linux%E5%AE%9A%E6%97%B6%E6%89%A7%E8%A1%8Cpython%E8%84%9A%E6%9C%AC/" title="Linux 定时执行 python脚本">Linux 定时执行 python脚本</a></li><li><a href="/2022/05/02/Ubuntu-ufw%E5%91%BD%E4%BB%A4%E8%AF%A6%E8%A7%A3/" title="Ubuntu ufw命令详解">Ubuntu ufw命令详解</a></li><li><a href="/2022/05/02/Linux-nohup-%E5%90%8E%E5%8F%B0%E8%BF%90%E8%A1%8C-%E5%91%BD%E4%BB%A4%E8%AF%A6%E8%A7%A3/" title="Linux nohup 后台运行 命令详解">Linux nohup 后台运行 命令详解</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Linux nohup 后台运行 命令详解</title>
      <link href="/2022/05/02/Linux-nohup-%E5%90%8E%E5%8F%B0%E8%BF%90%E8%A1%8C-%E5%91%BD%E4%BB%A4%E8%AF%A6%E8%A7%A3/"/>
      <url>/2022/05/02/Linux-nohup-%E5%90%8E%E5%8F%B0%E8%BF%90%E8%A1%8C-%E5%91%BD%E4%BB%A4%E8%AF%A6%E8%A7%A3/</url>
      
        <content type="html"><![CDATA[<p>nohup 英文全称 no hang up（不挂起），用于在系统后台不挂断地运行命令，退出终端不会影响程序的运行。</p><p>nohup 命令，在默认情况下（非重定向时），会输出一个名叫 nohup.out 的文件到当前目录下，如果当前目录的 nohup.out 文件不可写，输出重定向到 $HOME/nohup.out 文件中。</p><a id="more"></a><h2 id="命令语法格式："><a href="#命令语法格式：" class="headerlink" title="命令语法格式："></a>命令语法格式：</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nohup Command [Arg ... ] [ &amp; ]</span><br></pre></td></tr></table></figure><p><strong>参数说明：</strong><br>Command：要执行的命令。<br>Arg：一些参数，可以指定输出文件。<br>&amp;：让命令在后台执行，终端退出后命令仍旧执行。</p><h2 id="举例后台运行"><a href="#举例后台运行" class="headerlink" title="举例后台运行"></a>举例后台运行</h2><p><strong>例1.执行root目录下的runoob.sh脚本，并重定向输入到runoob.log文件中</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nohup /root/runoob.sh &gt; runoob.log 2&gt;&amp;1 &amp;</span><br></pre></td></tr></table></figure><p>运行后，会显示进程的PID。</p><p>关于 <strong>2&gt;&amp;1</strong>解释：</p><blockquote><p>将标准错误 2 重定向到标准输出 &amp;1 ，标准输出 &amp;1 再被重定向输入到 runoob.log 文件中。<br>0 – stdin (standard input，标准输入)<br>1 – stdout (standard output，标准输出)<br>2 – stderr (standard error，标准错误输出)</p></blockquote><p><strong>例2.用Python后台运行app.py</strong></p><p>用这种方法，就可以把Python Flask的应用在服务器的后台运行了。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nohup python -u app.py &gt; /dev/null 2&gt;&amp;1 &amp;</span><br></pre></td></tr></table></figure><p>运行后，会显示进程的PID。</p><p><strong>命令详解</strong>：</p><blockquote><p>1.最后一个“&amp;”：表示后台运行程序<br>2.“nohup” ：表示程序不被挂起<br>3.“python”：即python.exe，执行python代码<br>4.“-u”：表示不启用缓存，实时输出打印信息到日志文件（如果不加-u，则会导致日志文件不会实时刷新代码中的print函数的信息）<br>5.“app.py”：表示python的源代码文件<br>6.“&gt;”：表示将打印信息重定向到日志文件<br>7.“/dev/null”：我这里就不要日志文件了<br>8.“2&gt;&amp;1”：表示将标准错误输出转变化标准输出，可以将错误信息也输出到日志文件中（0-&gt; stdin, 1-&gt;stdout, 2-&gt;stderr）</p></blockquote><h2 id="结束后台运行进程"><a href="#结束后台运行进程" class="headerlink" title="结束后台运行进程"></a>结束后台运行进程</h2><p>进程在后台运行，想要关闭就要查看进程的PID。</p><p>运行<code>nohup</code>命令后也会得到进程的PID。<br>也可以通过搜索查找这个命令的PID。</p><p><strong>1.用命令查找进程的PID</strong></p><p>比如上面例2运行后，我们通过以下命令查找：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ps -aux | grep <span class="string">&quot;app.py&quot;</span></span><br></pre></td></tr></table></figure><p>结果如图：<br><img                       lazyload                     src="/images/loading.svg"                     data-src="/img/linux_nohup_1.png"                                      ></p><p>用户名后面一项就是PID，可以看到PID=471。</p><p>还可以用 <code>top -p 471</code>命令确认下471进程是不是这个app.py的进程（可以看到COMMAND是python）。</p><p><strong>2.结束进程</strong></p><p>运行命令：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">kill</span> [PID]</span><br></pre></td></tr></table></figure><p>比如上面的进程就是<code>kill 471</code></p>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Ubuntu ufw命令详解</title>
      <link href="/2022/05/02/Ubuntu-ufw%E5%91%BD%E4%BB%A4%E8%AF%A6%E8%A7%A3/"/>
      <url>/2022/05/02/Ubuntu-ufw%E5%91%BD%E4%BB%A4%E8%AF%A6%E8%A7%A3/</url>
      
        <content type="html"><![CDATA[<p>UFW是一个简单的防火墙，全称Uncomplicated Firewall。iptables 的前端，旨在简化防火墙的配置。是 <strong>Ubuntu 系统</strong>上默认的防火墙组件。 </p><p>UFW 是为轻量化配置 iptables 而开发的一款工具。 UFW 提供一个非常友好的界面用于创建基于 IPV4，IPV6 的防火墙规则。 UFW 在 Ubuntu 8.04 LTS 后的所有发行版中默认可用。</p><a id="more"></a><h2 id="一、ufw常用命令"><a href="#一、ufw常用命令" class="headerlink" title="一、ufw常用命令"></a>一、ufw常用命令</h2><p>记得在命令前面都加上<code>sudo</code>。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 1.启用ufw</span></span><br><span class="line">ufw <span class="built_in">enable</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 2.禁用ufw</span></span><br><span class="line">ufw <span class="built_in">disable</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 3.查看防火墙状态及规则列表</span></span><br><span class="line">ufw status</span><br><span class="line"></span><br><span class="line"><span class="comment"># 4.查看防火墙状态及规则列表及其编号</span></span><br><span class="line">ufw status numbered</span><br><span class="line"></span><br><span class="line"><span class="comment"># 5.重置防火墙</span></span><br><span class="line">ufw reset</span><br><span class="line"></span><br><span class="line"><span class="comment"># 6.拒绝其他设备连接到本机的80端口</span></span><br><span class="line">ufw deny 80</span><br><span class="line"></span><br><span class="line"><span class="comment"># 7.查看ufw命令帮助</span></span><br><span class="line">ufw -h</span><br></pre></td></tr></table></figure><h2 id="二、添加防火墙规则命令"><a href="#二、添加防火墙规则命令" class="headerlink" title="二、添加防火墙规则命令"></a>二、添加防火墙规则命令</h2><p>记得在命令前面都加上<code>sudo</code>。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">ufw allow port</span><br><span class="line">ufw allow protocol</span><br><span class="line">ufw allow port/protocol</span><br></pre></td></tr></table></figure><p>举例：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 1.开启22端口，SSH用</span></span><br><span class="line">ufw allow 22</span><br><span class="line"><span class="comment"># 2.开启http、https</span></span><br><span class="line">ufw allow http</span><br><span class="line">ufw allow https</span><br></pre></td></tr></table></figure><p><strong>运行<code>ufw status</code>后输出：</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">Status: active</span><br><span class="line"></span><br><span class="line">To                         Action      From</span><br><span class="line">--                         ------      ----</span><br><span class="line">80/tcp                     ALLOW       Anywhere                  </span><br><span class="line">443/tcp                    ALLOW       Anywhere                  </span><br><span class="line">22                         ALLOW       Anywhere                  </span><br><span class="line">80/tcp (v6)                ALLOW       Anywhere (v6)             </span><br><span class="line">443/tcp (v6)               ALLOW       Anywhere (v6)             </span><br><span class="line">22 (v6)                    ALLOW       Anywhere (v6)   </span><br></pre></td></tr></table></figure><h2 id="三、删除防火墙规则命令"><a href="#三、删除防火墙规则命令" class="headerlink" title="三、删除防火墙规则命令"></a>三、删除防火墙规则命令</h2><p>记得在命令前面都加上<code>sudo</code>。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 1.查看防火墙状态及规则列表及其编号</span></span><br><span class="line">ufw status numbered</span><br><span class="line"><span class="comment"># 2.删除规则对应的编号</span></span><br><span class="line">ufw delete rule_number</span><br></pre></td></tr></table></figure><h2 id="四、Linux系统安装ufw命令"><a href="#四、Linux系统安装ufw命令" class="headerlink" title="四、Linux系统安装ufw命令"></a>四、Linux系统安装ufw命令</h2><p>如果是其它的Linux系统，想用ufw命令的，安装一下就行。</p><p>用 <code>ufw --verion</code>查看ufw安装的版本号。</p><p>各Linux系统安装命令如下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#CentOS</span></span><br><span class="line">sudo yum -y install ufw</span><br><span class="line"></span><br><span class="line"><span class="comment">#Ubuntu</span></span><br><span class="line">sudo apt-get install ufw</span><br><span class="line"></span><br><span class="line"><span class="comment">#Debian</span></span><br><span class="line">sudo apt-get install ufw</span><br><span class="line"></span><br><span class="line"><span class="comment">#Fedora</span></span><br><span class="line">sudo dnf install ufw</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
            <tag> Ubuntu </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hexo SSH密钥配置</title>
      <link href="/2022/05/01/Hexo-SSH%E5%AF%86%E9%92%A5%E9%85%8D%E7%BD%AE/"/>
      <url>/2022/05/01/Hexo-SSH%E5%AF%86%E9%92%A5%E9%85%8D%E7%BD%AE/</url>
      
        <content type="html"><![CDATA[<p>配置SSH密钥，可以让本地Git项目与远程的服务器建立联系，让我们在本地写了代码之后直接通过Git操作就可以实现本地代码库与服务器上的代码库同步。</p><p>简单的说，就是每次运行 <code>hexo deploy</code>部署Hexo到服务器上的时候<strong>不需要再输入密码</strong>了。</p><a id="more"></a><h2 id="第一步、在本机创建一对新的SSH密钥-keys"><a href="#第一步、在本机创建一对新的SSH密钥-keys" class="headerlink" title="第一步、在本机创建一对新的SSH密钥(keys)"></a>第一步、在本机创建一对新的SSH密钥(keys)</h2><h3 id="1-查看本机是否存在SSH-keys"><a href="#1-查看本机是否存在SSH-keys" class="headerlink" title="1.查看本机是否存在SSH keys"></a>1.查看本机是否存在SSH keys</h3><p>打开【Git Bash】，并运行：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> ~/.ssh</span><br></pre></td></tr></table></figure><p>如果本机已经存在ssh公钥和私钥，可以略过这一步，直接进入第二步操作（默认的公钥文件是id_rsa.pub）。当然也可以再创建一对新的SSH密钥专用来用给Hexo用的。</p><h3 id="2-创建新的SSH密钥"><a href="#2-创建新的SSH密钥" class="headerlink" title="2.创建新的SSH密钥"></a>2.创建新的SSH密钥</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh-keygen -t rsa -C <span class="string">&quot;your_email@example.com&quot;</span></span><br></pre></td></tr></table></figure><p>注意上面的邮箱是自己的邮箱地址，按这个邮箱地址会创建一对密钥。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Generating public/private rsa key pair.</span><br><span class="line">Enter file <span class="keyword">in</span> <span class="built_in">which</span> to save the key (/c/Users/yourusername/.ssh/id_rsa): [Press enter]</span><br></pre></td></tr></table></figure><p><strong>直接回车</strong>，则将密钥按默认文件进行存储。<br>此时提示输入特定的文件名，比如：hexo_rsa<br><strong>（注：建议还是输入特定的名字，不然就是默认的id_rsa文件，如果你有多个SSH需要管理的，就比较麻烦了。）</strong></p><p>接着，根据提示，你<strong>需要输入密码和确认密码</strong></p><p>说到这里，如果你很放心，其实可以不用密码，就是到输密码的地方，都直接回车确认密码，继续直接回车。(所谓的最安全的密码，就是没有密码 哈哈）。<br>相关提示如下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Enter passphrase (empty <span class="keyword">for</span> no passphrase): [Type a passphrase]</span><br><span class="line">Enter same passphrase again: [Type passphrase again]</span><br></pre></td></tr></table></figure><p>输入密码完成之后，屏幕会显示如下信息：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Your identification has been saved <span class="keyword">in</span> /c/Users/yourusername/.ssh/hexo_rsa.</span><br><span class="line">Your public key has been saved <span class="keyword">in</span> /c/Users/yourusername/.ssh/hexo_rsa.pub.</span><br><span class="line">The key fingerprint is:</span><br><span class="line">SHA256:GI************************U your_email@example.com</span><br></pre></td></tr></table></figure><p>可以看到在目录：C:\Users\yourusername.ssh 中已经有hexo_rsa 和 hexo_rsa.pub 文件了。<br>如果没有自定义名字，则会在当前目录下生成 id_rsa.pub(公钥)和 id_rsa(私钥)文件。</p><h3 id="3-SSH密钥配置"><a href="#3-SSH密钥配置" class="headerlink" title="3.SSH密钥配置"></a>3.SSH密钥配置</h3><p>如果你的服务器上只用一个，那就忽略此步。<br>如果服务器上有多个SSH的，需要在本机的配置文件中配置一下。<br>用记事本程序打开 <code>~/.ssh</code> 目录（C:\Users\yourusername.ssh）中的config文件。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">Host 111.**.**.333</span><br><span class="line">  HostName 111.**.**.333</span><br><span class="line">  User root</span><br><span class="line"></span><br><span class="line">Host code_rsa</span><br><span class="line">  HostName 122.44.21.213</span><br><span class="line">  IdentityFile ~&#x2F;.ssh&#x2F;code_rsa</span><br><span class="line">  PreferredAuthentications publickey</span><br><span class="line">  User root</span><br><span class="line">Host 122.44.21.213</span><br><span class="line">  HostName 122.44.21.213</span><br><span class="line">  IdentityFile ~&#x2F;.ssh&#x2F;hexo_rsa</span><br><span class="line">  PreferredAuthentications publickey</span><br><span class="line">  User ubuntu</span><br></pre></td></tr></table></figure><blockquote><p>Host：站点别名，方便命令行使用<br>HostName：站点名（服务器ip或域名）<br>PreferredAuthentications：优先使用公钥连接<br>IdentityFile：私钥路径</p></blockquote><p>命令行测试以上两个SSH：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ssh -t git@code_rsa</span><br><span class="line">ssh -t git@122.44.21.213</span><br></pre></td></tr></table></figure><p>以上ip地址换成你自己服务器的ip地址。</p><h2 id="第二步、在服务器上添加公钥"><a href="#第二步、在服务器上添加公钥" class="headerlink" title="第二步、在服务器上添加公钥"></a>第二步、在服务器上添加公钥</h2><p>如果你是Github pages的，直接看这篇文章 <a href="/2022/04/09/%E3%80%90%E5%B0%8F%E7%99%BD%E6%95%99%E7%A8%8B%E3%80%91%E5%85%8D%E8%B4%B9%E5%BB%BA%E7%AB%8B%E9%9D%99%E6%80%81%E5%8D%9A%E5%AE%A2%E7%BD%91%E7%AB%99%EF%BC%88Github+Hexo%EF%BC%89/" title="【小白教程】免费建立静态博客网站（Github+Hexo）">【小白教程】免费建立静态博客网站（Github+Hexo）</a> 中配置SSH密钥的部分就行。</p><p>如果是用别的云服务器的，在云服务器上建了Git仓库和Nginx托管文件目录的（参考这篇文章 <a href="/2022/05/01/Hexo%E5%8D%9A%E5%AE%A2%E9%83%A8%E7%BD%B2%E5%88%B0%E4%BA%91%E6%9C%8D%E5%8A%A1%E5%99%A8%EF%BC%88Ubuntu%EF%BC%89/" title="Hexo博客部署到云服务器（Ubuntu）上">Hexo博客部署到云服务器（Ubuntu）上</a> ），但又没在服务器上新建用户的话，建议新建一个用户，专门给Hexo博客用。（如果你这个服务器只做一个博客用，那就用不着新建用户了）</p><p>如果前面创建Git仓库和Nginx托管文件目录时没建新用户，也没关系，只需要创建个新用户，然后把这两个目录的所有权权限给这个新用户就行。</p><h3 id="1-新建一个git用户"><a href="#1-新建一个git用户" class="headerlink" title="1.新建一个git用户"></a>1.新建一个git用户</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo useradd -m git</span><br><span class="line">sudo passwd git</span><br></pre></td></tr></table></figure><p>ubuntu加上<code>-m</code>参数，会在 /home 目录中建出对应的用户目录，即会有/home/git目录；否则没有。</p><h3 id="2-把Git仓库和Nginx托管文件目录权限都给git用户"><a href="#2-把Git仓库和Nginx托管文件目录权限都给git用户" class="headerlink" title="2.把Git仓库和Nginx托管文件目录权限都给git用户"></a>2.把Git仓库和Nginx托管文件目录权限都给git用户</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo chown -R git:git /var/repo/</span><br><span class="line">sudo chown -R git:git /var/www/hexo</span><br></pre></td></tr></table></figure><h3 id="3-把本机上的hexo-rsa-pub-公钥文件上传到服务器上（-home-git）"><a href="#3-把本机上的hexo-rsa-pub-公钥文件上传到服务器上（-home-git）" class="headerlink" title="3.把本机上的hexo_rsa.pub 公钥文件上传到服务器上（/home/git）"></a>3.把本机上的hexo_rsa.pub 公钥文件上传到服务器上（/home/git）</h3><p>用什么方法上传，都可以。我的本机是windows的，有xshell和xftp，直接就用git用户登录后，上传至/home/git目录。（即有了文件 /home/git/hexo_rsa.pub）</p><h3 id="4-创建-ssh-目录（git用户"><a href="#4-创建-ssh-目录（git用户" class="headerlink" title="4.创建~/.ssh 目录（git用户)"></a>4.创建~/.ssh 目录（git用户)</h3><p>在服务器中创建ssh，是为了把本机的 hexo_rsa.pub 中的文件内容全部添加到 authorized_keys 文件中。（即 <code>~/.ssh/authorized_keys</code> 文件）</p><p>1).服务器上切换到 git用户</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">su git</span><br></pre></td></tr></table></figure><p>输入密码后登录。（输入<code>exit</code>命令即可退出git用户）</p><p>2).创建~/.ssh 目录</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> ~</span><br><span class="line">mkdir .ssh</span><br></pre></td></tr></table></figure><h3 id="5-在-ssh目录下创建authorized-keys文件"><a href="#5-在-ssh目录下创建authorized-keys文件" class="headerlink" title="5.在.ssh目录下创建authorized_keys文件"></a>5.在.ssh目录下创建authorized_keys文件</h3><p>这里并不直接创建文件，直接把 hexo_rsa.pub 移动到 .ssh目录后，重命名为authorized_keys就行了。并用 chmod修改目录的权限。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">mv hexo_rsa.pub .ssh/authorized_keys</span><br><span class="line"></span><br><span class="line">chmod 600 ~/.ssh/authorized_keys</span><br><span class="line">chmod 700 ~/.ssh</span><br></pre></td></tr></table></figure><h3 id="6-测试"><a href="#6-测试" class="headerlink" title="6.测试"></a>6.测试</h3><p>在本地输入下面的命令，： </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh -t git@122.44.21.213</span><br></pre></td></tr></table></figure><p>以上ip地址换成你自己服务器的ip地址。<br>能登录进去，说明已成功完成SSH配置。</p><h2 id="第三步、修改本机Hexo配置文件"><a href="#第三步、修改本机Hexo配置文件" class="headerlink" title="第三步、修改本机Hexo配置文件"></a>第三步、修改本机Hexo配置文件</h2><p>打开Hexo目录下 <code>_config.yml</code>配置文件。<br>把deploy配置内容改为（repo中原来的用户名改为git）：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">deploy:</span></span><br><span class="line">  <span class="attr">type:</span> <span class="string">git</span></span><br><span class="line">  <span class="attr">repo:</span> <span class="string">git@122.44.21.213:/var/repo/hexo_static.git</span></span><br><span class="line">  <span class="attr">branch:</span> <span class="string">master</span></span><br></pre></td></tr></table></figure><p>以上ip地址换成你自己服务器的ip地址。</p><p>再用 <code>hexo deploy</code>时，就不需要再输入用户的密码了。</p>]]></content>
      
      
      <categories>
          
          <category> Hexo </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Hexo </tag>
            
            <tag> Ubuntu </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hexo链接站内文章方法</title>
      <link href="/2022/05/01/Hexo%E9%93%BE%E6%8E%A5%E7%AB%99%E5%86%85%E6%96%87%E7%AB%A0%E6%96%B9%E6%B3%95/"/>
      <url>/2022/05/01/Hexo%E9%93%BE%E6%8E%A5%E7%AB%99%E5%86%85%E6%96%87%E7%AB%A0%E6%96%B9%E6%B3%95/</url>
      
        <content type="html"><![CDATA[<p>在写文章、写博客的时候，有时候文章中会需要链接到其它的文章。怎么写？</p><p><strong>方法一</strong>：当然可以直接写链接地址，跟所有网址一样。<br>这样就需要链接的这篇文章先deploy出来，再复制文章的网址过来用。</p><p>这个方法还有一个问题，当我博客换了域名，那就完了 ，所有的地址还需要手动再替换一遍。</p><p>这里介绍第二个方法，采用 Hexo 的一种写法。</p><a id="more"></a><p><strong>方法二</strong>：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">使用 &#123;% post_link &#39;需要链接的文章名&#39; %&#125;</span><br></pre></td></tr></table></figure><p>举个例子，比如这篇文章中，我想链接到站内另一篇文章：“本博客使用的Hexo主题为Keep”这篇文章，怎么做。</p><p>这篇文章对应的md文件为：<code>本博客使用的Hexo主题为Keep.md</code></p><p>那在需要引用的地方就写上：<a href="/2022/04/30/%E6%9C%AC%E5%8D%9A%E5%AE%A2%E4%BD%BF%E7%94%A8%E7%9A%84Hexo%E4%B8%BB%E9%A2%98%E4%B8%BAKeep/" title="本博客使用的Hexo主题为：Keep">本博客使用的Hexo主题为：Keep</a></p>]]></content>
      
      
      <categories>
          
          <category> Hexo </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Hexo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hexo博客部署到云服务器（Ubuntu）上</title>
      <link href="/2022/05/01/Hexo%E5%8D%9A%E5%AE%A2%E9%83%A8%E7%BD%B2%E5%88%B0%E4%BA%91%E6%9C%8D%E5%8A%A1%E5%99%A8%EF%BC%88Ubuntu%EF%BC%89/"/>
      <url>/2022/05/01/Hexo%E5%8D%9A%E5%AE%A2%E9%83%A8%E7%BD%B2%E5%88%B0%E4%BA%91%E6%9C%8D%E5%8A%A1%E5%99%A8%EF%BC%88Ubuntu%EF%BC%89/</url>
      
        <content type="html"><![CDATA[<p>Hexo 是一个快速、简洁且高效的博客框架。Hexo 使用 Markdown（或其他渲染引擎）解析文章，在几秒内，即可利用靓丽的主题生成静态网页。</p><h2 id="一、我的环境"><a href="#一、我的环境" class="headerlink" title="一、我的环境"></a>一、我的环境</h2><p>1、Ubuntu服务器（腾讯云 Ubuntu Server 18.04系统，管理员用户：ubuntu）</p><p>2、本地Win10系统</p><a id="more"></a><h2 id="二、Ubuntu服务器环境"><a href="#二、Ubuntu服务器环境" class="headerlink" title="二、Ubuntu服务器环境"></a>二、Ubuntu服务器环境</h2><h3 id="1-安装-Git-和-Nginx"><a href="#1-安装-Git-和-Nginx" class="headerlink" title="1.安装 Git 和 Nginx"></a>1.安装 Git 和 Nginx</h3><p><strong>Git 用于版本管理和部署</strong>，<strong>Nginx 作服务器用于静态博客托管</strong>。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get update</span><br><span class="line">sudo apt-get install git nginx -y</span><br></pre></td></tr></table></figure><h3 id="2-创建-Git仓库"><a href="#2-创建-Git仓库" class="headerlink" title="2.创建 Git仓库"></a>2.创建 Git仓库</h3><p>在 <code>/var/repo</code> 下创建 hexo_static 的裸仓库。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">sudo mkdir /var/repo/</span><br><span class="line">sudo chown -R <span class="variable">$USER</span>:<span class="variable">$USER</span> /var/repo/</span><br><span class="line">sudo chmod -R 755 /var/repo/</span><br><span class="line"></span><br><span class="line"><span class="built_in">cd</span> /var/repo/</span><br><span class="line">git init --bare hexo_static.git</span><br></pre></td></tr></table></figure><blockquote><p>sudo mkdir /var/repo/ 表示：创建 repo目录<br>sudo chown -R  表示：修改目录的所有权<br>sudo chmod -R 755 表示：修改目录的用户权限，至此 ubuntu用户拥有所有的权限</p></blockquote><h3 id="3-配置Nginx托管文件目录"><a href="#3-配置Nginx托管文件目录" class="headerlink" title="3.配置Nginx托管文件目录"></a>3.配置Nginx托管文件目录</h3><p>1).创建 <code>/var/www/hexo</code> 目录，用于Nginx托管，修改目录所有权和权限。<br>本地 <code>hexo deploy</code>之后的内容都在这里。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">sudo mkdir -p /var/www/hexo</span><br><span class="line"></span><br><span class="line">sudo chown -R <span class="variable">$USER</span>:<span class="variable">$USER</span> /var/www/hexo</span><br><span class="line">sudo chmod -R 755 /var/www/hexo</span><br></pre></td></tr></table></figure><p>2).修改Nginx的 <strong>default</strong> 设置，使 root指向 hexo目录。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo vim /etc/nginx/sites-available/default</span><br></pre></td></tr></table></figure><p>注意：不加 sudo，会提醒 <strong>default</strong> 是只读文件。</p><p><strong>关于 vim</strong></p><p>Linux系统一般自带 vi 编辑工具，vim 是vi的升级版本。<br>如果没有 vim 可以用命令安装一下：<code>sudo apt-get install vim</code><br>这里用 vi  也无所谓的。</p><p>关于 vim的简单使用方法，可以看这一篇文章：<a href="/2021/02/08/Linux%20vim%E5%91%BD%E4%BB%A4%E7%AE%80%E5%8D%95%E4%BD%BF%E7%94%A8/" title="Linux vim&#x2F;vi 命令简单使用">Linux vim&#x2F;vi 命令简单使用</a></p><p>打开default后，修改文件中的内容，使 root指向 hexo目录，如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">...</span><br><span class="line"></span><br><span class="line">server &#123;</span><br><span class="line">    listen 80 default_server;</span><br><span class="line">    listen [::]:80 default_server ipv6only&#x3D;on;</span><br><span class="line"></span><br><span class="line">    root &#x2F;var&#x2F;www&#x2F;hexo; # 需要修改的部分</span><br><span class="line">    index index.html index.htm;</span><br><span class="line"></span><br><span class="line">...</span><br></pre></td></tr></table></figure><p>保存并退出文件。如果以后购买并备案域名之后，可以再将配置中的 default_server 修改为你的域名。</p><p>3).重启 Nginx服务，使改动生效。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo service nginx restart</span><br></pre></td></tr></table></figure><h3 id="4-创建-Git钩子"><a href="#4-创建-Git钩子" class="headerlink" title="4.创建 Git钩子"></a>4.创建 Git钩子</h3><p>在服务器上的裸仓库 hexo_static 创建一个钩子，在满足特定条件时将静态 HTML 文件传送到 Web 服务器的目录下，即 /var/www/hexo。</p><p>1).在自动生成的 hooks 目录下创建一个新的钩子文件：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vim /var/repo/hexo_static.git/hooks/post-receive</span><br></pre></td></tr></table></figure><p>2).在该文件中添加两行代码，指定 Git 的工作树（源代码）和 Git 目录（配置文件等）。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"></span><br><span class="line">git --work-tree=/var/www/hexo --git-dir=/var/repo/hexo_static.git checkout -f</span><br></pre></td></tr></table></figure><p>3).保存并退出文件，并修改文件权限、让该文件变为可执行文件。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">chmod +x /var/repo/hexo_static.git/hooks/post-receive</span><br></pre></td></tr></table></figure><h3 id="5-配置防火墙"><a href="#5-配置防火墙" class="headerlink" title="5.配置防火墙"></a>5.配置防火墙</h3><p>第一次用，需要启用防火墙。依次执行以下命令：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 1.启用ufw</span></span><br><span class="line">sudo ufw <span class="built_in">enable</span></span><br><span class="line"><span class="comment"># 2.开启4000端口</span></span><br><span class="line">sudo ufw allow 4000</span><br><span class="line"><span class="comment"># 3.允许http、https</span></span><br><span class="line">sudo ufw allow http</span><br><span class="line">sudo ufw allow https</span><br><span class="line"><span class="comment"># 4.开22端口，要用SSH</span></span><br><span class="line">sudo uffw allow 22</span><br></pre></td></tr></table></figure><p><strong>运行<code>sudo ufw status</code>后输出：</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">Status: active</span><br><span class="line"></span><br><span class="line">To                         Action      From</span><br><span class="line">--                         ------      ----</span><br><span class="line">4000                       ALLOW       Anywhere                  </span><br><span class="line">80/tcp                     ALLOW       Anywhere                  </span><br><span class="line">443/tcp                    ALLOW       Anywhere                  </span><br><span class="line">22                         ALLOW       Anywhere                  </span><br><span class="line">4000 (v6)                  ALLOW       Anywhere (v6)             </span><br><span class="line">80/tcp (v6)                ALLOW       Anywhere (v6)             </span><br><span class="line">443/tcp (v6)               ALLOW       Anywhere (v6)             </span><br><span class="line">22 (v6)                    ALLOW       Anywhere (v6)   </span><br></pre></td></tr></table></figure><p>至此，服务端的配置结束。</p><h2 id="三、本地Win10系统"><a href="#三、本地Win10系统" class="headerlink" title="三、本地Win10系统"></a>三、本地Win10系统</h2><h3 id="1-安装Hexo"><a href="#1-安装Hexo" class="headerlink" title="1.安装Hexo"></a>1.安装Hexo</h3><p>官方文档：<a class="link"   href="https://hexo.io/zh-cn/docs/#%E5%AE%89%E8%A3%85" >https://hexo.io/zh-cn/docs/#%E5%AE%89%E8%A3%85<i class="fas fa-external-link-alt"></i></a></p><h4 id="1-下载安装-Node-js-（node-v查看版本）"><a href="#1-下载安装-Node-js-（node-v查看版本）" class="headerlink" title="1).下载安装 Node.js （node -v查看版本）"></a>1).下载安装 <strong>Node.js</strong> （<code>node -v</code>查看版本）</h4><p>官网 <a class="link"   href="https://nodejs.org/en/download/" >https://nodejs.org/en/download/<i class="fas fa-external-link-alt"></i></a> 下载对应版本安装就行</p><h4 id="2-下载安装-Git-（git-version查看版本）"><a href="#2-下载安装-Git-（git-version查看版本）" class="headerlink" title="2).下载安装 Git （git version查看版本）"></a>2).下载安装 <strong>Git</strong> （<code>git version</code>查看版本）</h4><p>官网 <a class="link"   href="https://git-scm.com/download/win" >https://git-scm.com/download/win<i class="fas fa-external-link-alt"></i></a> 会根据你电脑参数，直接跳出对应版本让你下载。</p><p>官网下载很慢，可以到以下地址中下载git安装包（速度贼快）：<br><a class="link"   href="https://npm.taobao.org/mirrors/git-for-windows/" >https://npm.taobao.org/mirrors/git-for-windows/<i class="fas fa-external-link-alt"></i></a></p><p>拉到页面最下面是最新版本，比如windows 64位的系列就下载：<br>Git-2.30.0.2-64-bit.exe</p><h4 id="3-下载安装-Hexo-（hexo-version查看版本）"><a href="#3-下载安装-Hexo-（hexo-version查看版本）" class="headerlink" title="3).下载安装 Hexo （hexo version查看版本）"></a>3).下载安装 <strong>Hexo</strong> （<code>hexo version</code>查看版本）</h4><p>安装完了Git后，在任意处、右键，选择<strong>【Git Bash Here】</strong>，输入以下命令安装。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-cli -g</span><br><span class="line">npm install hexo-deployer-git --save</span><br></pre></td></tr></table></figure><p>第一句是安装hexo；<br>第二句是安装hexo部署到git page的deployer，两个都需要安装。</p><h4 id="4-Hexo初始化（创建Hexo文件夹）"><a href="#4-Hexo初始化（创建Hexo文件夹）" class="headerlink" title="4).Hexo初始化（创建Hexo文件夹）"></a>4).Hexo初始化（创建Hexo文件夹）</h4><p>安装完成后，根据自己喜好建立目录（如<code>F:\Blog\Hexo</code>），直接进入<code>F:\Blog\Hexo</code>文件夹后，右键鼠标，点击<strong>【Git Bash Here】</strong>，进入Git命令框，输入以下命令。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo init</span><br></pre></td></tr></table></figure><p>运行完后，Hexo 将会在指定文件夹中新建所需要的文件。</p><p><strong>本地运行测试</strong></p><p>在<strong>【Git Bash】</strong> 中依次执行下面命令，执行完即可登录网页 <code>localhost:4000</code> 查看效果。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">hexo clean</span><br><span class="line">hexo generate</span><br><span class="line">hexo server</span><br></pre></td></tr></table></figure><p>按Ctrl+C 停止。</p><h3 id="2-修改-Hexo-默认配置"><a href="#2-修改-Hexo-默认配置" class="headerlink" title="2.修改 Hexo 默认配置"></a>2.修改 Hexo 默认配置</h3><p>在站点 _config.yml 配置文件中修改博客的地址 url：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># URL</span></span><br><span class="line"><span class="comment">## If your site is put in a subdirectory, set url as &#x27;http://yoursite.com/child&#x27; and root as &#x27;/child/&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="attr">url:</span> <span class="string">http://122.44.21.213/</span> <span class="comment">#没有绑定域名时填写服务器IP地址，绑定域名后填写域名</span></span><br><span class="line"><span class="attr">root:</span> <span class="string">/</span></span><br><span class="line"><span class="attr">permalink:</span> <span class="string">:year/:month/:day/:title/</span></span><br><span class="line"><span class="attr">permalink_defaults:</span></span><br></pre></td></tr></table></figure><p>关于 Hexo博客 <code>_config.yml</code>配置文件中其它的修改，可以看官方文档：<a class="link"   href="https://hexo.io/zh-cn/docs/configuration" >https://hexo.io/zh-cn/docs/configuration<i class="fas fa-external-link-alt"></i></a></p><h3 id="3-通过Git部署"><a href="#3-通过Git部署" class="headerlink" title="3.通过Git部署"></a>3.通过Git部署</h3><p>1).继续编辑Hexo的 <code>_config.yml</code>配置文件，找到 Deployment部分。按照如下情况修改：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Deployment</span></span><br><span class="line"><span class="comment">## Docs: https://hexo.io/docs/one-command-deployment</span></span><br><span class="line"><span class="attr">deploy:</span></span><br><span class="line">  <span class="attr">type:</span> <span class="string">git</span></span><br><span class="line">  <span class="attr">repo:</span> <span class="string">ubuntu@122.44.21.213:/var/repo/hexo_static.git</span></span><br><span class="line">  <span class="attr">branch:</span> <span class="string">master</span></span><br></pre></td></tr></table></figure><p>2).Hexo一键部署到服务器上</p><p>在Hexo目录（比如我的是：<code>F:\Blog\Hexo</code>）中，鼠标右键，点击<strong>【Git Bash Here】</strong>，进入Git命令框，输入以下命令一键部署到服务器上。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo deploy</span><br></pre></td></tr></table></figure><p>期间会提示输入 ubuntu 用户的登录密码（如果没有设置 SSH 登录），成功之后就可以在浏览器打开：<a class="link"   href="http://122.44.21.213/" >http://122.44.21.213/<i class="fas fa-external-link-alt"></i></a> 访问自己的博客了。 </p><p><strong>修改内容后，一般部署到服务器上需要依次执行以下3条命令：</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">hexo clean</span><br><span class="line">hexo generate</span><br><span class="line">hexo deploy</span><br></pre></td></tr></table></figure><ul><li><code>hexo clean</code>：Remove generated files and cache.</li><li><code>hexo generate</code>：Generate static files. 可以简写成 <code>hexo g</code></li><li><code>hexo deploy</code>：Deploy your website. 如果没有安装别的有影响的插件，要以简写成 <code>hexo d</code></li></ul><p><strong>Hexo的更多命令看官方文档：</strong><a class="link"   href="https://hexo.io/zh-cn/docs/commands" >https://hexo.io/zh-cn/docs/commands<i class="fas fa-external-link-alt"></i></a></p>]]></content>
      
      
      <categories>
          
          <category> Hexo </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Hexo </tag>
            
            <tag> Ubuntu </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>本博客使用的Hexo主题为：Keep</title>
      <link href="/2022/04/30/%E6%9C%AC%E5%8D%9A%E5%AE%A2%E4%BD%BF%E7%94%A8%E7%9A%84Hexo%E4%B8%BB%E9%A2%98%E4%B8%BAKeep/"/>
      <url>/2022/04/30/%E6%9C%AC%E5%8D%9A%E5%AE%A2%E4%BD%BF%E7%94%A8%E7%9A%84Hexo%E4%B8%BB%E9%A2%98%E4%B8%BAKeep/</url>
      
        <content type="html"><![CDATA[<p>—————————-更新于：2022年04月30日—————————-</p><p>本博客采用的Hexo主题为：<strong>Keep</strong></p><p>项目地址：<a class="link"   href="https://github.com/XPoet/hexo-theme-keep" >GitHub - XPoet/hexo-theme-keep<i class="fas fa-external-link-alt"></i></a></p><a id="more"></a><p>Keep主题官方文档：<a class="link"   href="https://keep-docs.xpoet.cn/" >https://keep-docs.xpoet.cn/<i class="fas fa-external-link-alt"></i></a></p><p>Keep主题配置指南：<a class="link"   href="https://keep-docs.xpoet.cn/usage-tutorial/configuration-guide.html" >https://keep-docs.xpoet.cn/usage-tutorial/configuration-guide.html<i class="fas fa-external-link-alt"></i></a></p><p><strong>选择这个主题的几个原因。</strong></p><h3 id="1-好看"><a href="#1-好看" class="headerlink" title="1.好看"></a>1.好看</h3><p>第一屏页看起来也很不错。可以自己换背景图。<br><img                       lazyload                     src="/images/loading.svg"                     data-src="/img/Hexo_theme_Keep_1.png"                      style="zoom: 50%;"                ><br>主题配置文件（<code>_config.yml</code>）中：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># First screen</span></span><br><span class="line">  <span class="attr">first_screen:</span></span><br><span class="line">    <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line">    <span class="attr">background_img:</span> <span class="string">/images/bg.svg</span> <span class="comment"># You can use local image or image external link</span></span><br><span class="line">    <span class="attr">description:</span> <span class="string">不积跬步，无以至千里；不积小流，无以成江海。</span></span><br></pre></td></tr></table></figure><h3 id="2-【目录】效果不错"><a href="#2-【目录】效果不错" class="headerlink" title="2.【目录】效果不错"></a>2.【目录】效果不错</h3><img                       lazyload                     src="/images/loading.svg"                     data-src="/img/Hexo_theme_Keep_2.png"                      style="zoom: 50%;"                >主题配置文件（`_config.yml`）中：<figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">toc:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line">  <span class="comment"># Automatically add list number to toc.</span></span><br><span class="line">  <span class="attr">number:</span> <span class="literal">false</span></span><br></pre></td></tr></table></figure>### 3.【代码高亮】不错<p>有2个样式可选，有一键复制代码功能。<br><img                       lazyload                     src="/images/loading.svg"                     data-src="/img/Hexo_theme_Keep_3.png"                      style="zoom: 70%;"                ><br>主题配置文件（<code>_config.yml</code>）中：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">code_copy:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">style:</span> <span class="string">mac</span> <span class="comment"># values: default | mac</span></span><br></pre></td></tr></table></figure><h3 id="4-【评论】功能"><a href="#4-【评论】功能" class="headerlink" title="4.【评论】功能"></a>4.【评论】功能</h3><p>有3个评论平台可选，valine、gitalk、twikoo，我正好原来用的就是valine。设置下直接就可以用了。<br><img                       lazyload                     src="/images/loading.svg"                     data-src="/img/Hexo_theme_Keep_4.png"                      style="zoom: 70%;"                ><br>主题配置文件（<code>_config.yml</code>）中（我选了valine，就只贴这几句了）：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">comment:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">use:</span> <span class="string">valine</span> <span class="comment"># values: valine | gitalk | twikoo</span></span><br><span class="line"></span><br><span class="line">  <span class="comment"># Valine</span></span><br><span class="line">  <span class="comment"># See: https://github.com/xCss/Valine</span></span><br><span class="line">  <span class="attr">valine:</span></span><br><span class="line">    <span class="attr">appid:</span> <span class="string">U****************************z</span></span><br><span class="line">    <span class="attr">appkey:</span> <span class="string">y*********************7</span></span><br><span class="line">    <span class="attr">placeholder:</span> <span class="string">请在此输入您的留言</span></span><br></pre></td></tr></table></figure><h3 id="5-【站内搜索】功能"><a href="#5-【站内搜索】功能" class="headerlink" title="5.【站内搜索】功能"></a>5.【站内搜索】功能</h3><img                       lazyload                     src="/images/loading.svg"                     data-src="/img/Hexo_theme_Keep_5.png"                      style="zoom: 50%;"                ><h3 id="6-【夜间模式】"><a href="#6-【夜间模式】" class="headerlink" title="6.【夜间模式】"></a>6.【夜间模式】</h3><img                       lazyload                     src="/images/loading.svg"                     data-src="/img/Hexo_theme_Keep_6.png"                                     >]]></content>
      
      
      <categories>
          
          <category> Hexo </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Hexo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hexo图片插入方式（兼容Typora）</title>
      <link href="/2022/04/30/Hexo%E5%9B%BE%E7%89%87%E6%8F%92%E5%85%A5%E6%96%B9%E5%BC%8F%EF%BC%88%E5%85%BC%E5%AE%B9Typora%EF%BC%89/"/>
      <url>/2022/04/30/Hexo%E5%9B%BE%E7%89%87%E6%8F%92%E5%85%A5%E6%96%B9%E5%BC%8F%EF%BC%88%E5%85%BC%E5%AE%B9Typora%EF%BC%89/</url>
      
        <content type="html"><![CDATA[<p>原来用的是 Github Pages + Hexo的博客，所以直接用 Github的图床就很方便。终于受不了Github的访问速度了，自己访问影响不大 ，主要是别人访问的时候，就算正常能看文章，图片也会动不动就加载失败，头疼~ 于是，还是把Hexo博客搬到了自己的云服务器上。（反正本来就有云服务器在用）</p><a id="more"></a><p>当把Hexo博客搬到云服务器上后，就要把文章中的图片也上传一下了。如果还是用图床，不管阿里云还是腾讯云上都有对应的对象存储器可以用，就是要收费。所以索性还是直接把文章中的图片上传到云服务器上好了。</p><p>在 Hexo文章中插入图片时，通常使用网站的相对路径。</p><h2 id="操作方法"><a href="#操作方法" class="headerlink" title="操作方法"></a>操作方法</h2><h3 id="1-新建-img-目录"><a href="#1-新建-img-目录" class="headerlink" title="1.新建 img 目录"></a>1.新建 img 目录</h3><p>在Hexo的 source 目录下新建 img 目录，用来存放文章的所有图片。<br>（Hexo的所有文章都在 source目录下的 _posts 目录中）</p><p>Hexo的source目录结构为：</p><blockquote><p>source<br>   |– _posts<br>   |– about<br>   |– categories<br>   |– img<br>   |– tags</p></blockquote><p>目录名字看你自己喜欢，也可以用images.</p><p><strong>注意</strong>：如果你用的主题目录下的source目录下也有images目录，那你可以跟我一样，避免重名，用 img 这样的名字。因为deploy后你会发现，这俩会在同一个目录下。</p><p>网上还有其它安装插件的方法，是每篇文章生成一个目录来放图片，个人不喜欢这种，图片也没多少，还是喜欢直接都放在一个目录比较方便。</p><h3 id="2-在Typora中设置图片根目录"><a href="#2-在Typora中设置图片根目录" class="headerlink" title="2.在Typora中设置图片根目录"></a>2.在Typora中设置图片根目录</h3><p>在Typora中，【格式】菜单-&gt;【图像】-&gt;【设置图片根目录】，选择刚建好的 Hexo目录下的 source/img 的目录。</p><p>选择好后，在.md的文件头部会自动生成 <code>typora-root-url: ..</code>。<br>所以在有图片的文章中，只需要在头部加上这一项就行。在文章中就可以插入图片了。</p><p>例如，此篇文章的头部即为：</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">title: Hexo图片插入方式（兼容Typora）</span><br><span class="line">date: 2022-04-30 21:30</span><br><span class="line">typora-root-url: ..</span><br><span class="line">tags: [Hexo]</span><br><span class="line">categories: </span><br><span class="line"><span class="bullet">-</span> Hexo</span><br><span class="line">toc: true</span><br></pre></td></tr></table></figure><p><code>typora-root-url: ..</code> 中的 <code>..</code>表示上一层父目录。<br>因为文章的.md文件在： <code>source/_posts/</code>中，所以 <code>..</code>即表示图片根目录为source目录。</p><h3 id="3-文章中插入图片的代码"><a href="#3-文章中插入图片的代码" class="headerlink" title="3.文章中插入图片的代码"></a>3.文章中插入图片的代码</h3><p>比如我在此篇文章要插入一张图片，图片为： <code>/source/img/test.jpg</code></p><p>那在此篇文章中只需要写上以下代码，就能在 Typora看到图片，也能在 hexo deploy后上传到服务器上。</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;/img/test.jpg&quot;</span>/&gt;</span></span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Hexo </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Hexo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Flask SQLAlchemy 浮点数类型Float 丢失精度 解决方法</title>
      <link href="/2022/04/10/Flask-SQLAlchemy%E6%B5%AE%E7%82%B9%E6%95%B0%E7%B1%BB%E5%9E%8BFloat%E4%B8%A2%E5%A4%B1%E7%B2%BE%E5%BA%A6%E8%A7%A3%E5%86%B3%E6%96%B9%E6%B3%95/"/>
      <url>/2022/04/10/Flask-SQLAlchemy%E6%B5%AE%E7%82%B9%E6%95%B0%E7%B1%BB%E5%9E%8BFloat%E4%B8%A2%E5%A4%B1%E7%B2%BE%E5%BA%A6%E8%A7%A3%E5%86%B3%E6%96%B9%E6%B3%95/</url>
      
        <content type="html"><![CDATA[<p>数据库里，用到float类型的时候，会有精度损失。</p><p>比如，用Flask的SQLAlchemy的时候，定义数据库表对应的字段的时候，如果MySQL里存的是float类型，那就定义成 SQLAlchemy的Float 类型。<br>然后，当我把一个2位小数的数存进数据库，一查看，有的变成了1位小数，有的直接无小数了，反正就奇奇怪怪的。这就是因为精度损失了。</p><a id="more"></a><p>我们一般在操作数据库的时候，可能用 decimal 或者 double 这样的字段类型来替换 float 类型，就可以解决这个问题了。</p><p>但是 SQLAlchemy 里并没有直接的 double 或者 decimal 类型。<br>然后就找到了对应的 <strong>Numeric</strong> 类型，是对应 Python中的Decimal 类型的。</p><h2 id="解决方法过程"><a href="#解决方法过程" class="headerlink" title="解决方法过程"></a>解决方法过程</h2><p>如果不想看解决的过程的，建议直接跳到看第3点【总结】部分就行。</p><h3 id="1、把字段的定义由原来的："><a href="#1、把字段的定义由原来的：" class="headerlink" title="1、把字段的定义由原来的："></a>1、把字段的定义由原来的：</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">high = db.Column(db.Float)</span><br></pre></td></tr></table></figure><p>改成：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">high = db.Column(db.Numeric)</span><br></pre></td></tr></table></figure><p>去数据库里一看表设计，这个high字段类型已经成功变成了 decimal 类型。</p><p>但是，发现直接没有小数了，直接就变成整数了。<br>一看表设计，虽然 high 字段已经变成了 decimal 类型，长度为10，但小数点位数却是空的，那就相当于0，没有小数。</p><h3 id="2、设定小数点位数"><a href="#2、设定小数点位数" class="headerlink" title="2、设定小数点位数"></a>2、设定小数点位数</h3><p>然后，查看了SQLAlchemy文档， Numeric 定义的部分。主要看一下参数有些啥。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">sqlalchemy</span>.<span class="title">types</span>.<span class="title">NUMERIC</span>(<span class="params">precision=<span class="literal">None</span>, scale=<span class="literal">None</span>, decimal_return_scale=<span class="literal">None</span>, asdecimal=<span class="literal">True</span></span>)</span></span><br></pre></td></tr></table></figure><p>第1个参数 precision：长度<br>第2个参数 scale：小数点位数</p><p>因为我看到长度默认就是10了，于是，就傻傻觉得只设一下scale参数就行。就改成了：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">high = db.Column(db.Numeric(scale=<span class="number">2</span>))</span><br></pre></td></tr></table></figure><p>结果，还是不行，压根没效果。<br>然后，一看，一想，才觉得，索性要把前面的precision 参数也设一下。就改成了：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">high = db.Column(db.Numeric(<span class="number">10</span>,<span class="number">2</span>))</span><br></pre></td></tr></table></figure><p>成功了！！！</p><h3 id="3、总结"><a href="#3、总结" class="headerlink" title="3、总结"></a>3、总结</h3><p>原来定义是 Float 类型的字段是这样定义的：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">high = db.Column(db.Float)</span><br></pre></td></tr></table></figure><p>然后改成 Numeric 类型（对应数据库中 decimal 类型）是这样的（保留2位小数）：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">high = db.Column(db.Numeric(<span class="number">10</span>,<span class="number">2</span>))</span><br></pre></td></tr></table></figure><h2 id="SQLAlchemy-常用的字段类型"><a href="#SQLAlchemy-常用的字段类型" class="headerlink" title="SQLAlchemy 常用的字段类型"></a>SQLAlchemy 常用的字段类型</h2><table><thead><tr><th>类型名</th><th>python中类型</th><th>说明</th></tr></thead><tbody><tr><td>Integer</td><td>int</td><td>普通整数，一般是32位</td></tr><tr><td>SmallInteger</td><td>int</td><td>取值范围小的整数,—般是16位</td></tr><tr><td>BigInteger</td><td>int或long</td><td>不限制精度的整数</td></tr><tr><td>Float</td><td>float</td><td>浮点数</td></tr><tr><td>Numeric</td><td>decimal.Decimal</td><td>固定精度数字的类型，例如 NUMERIC 或 DECIMAL</td></tr><tr><td>String</td><td>str</td><td>变长字符串</td></tr><tr><td>Text</td><td>str</td><td>变长字符串，对较长或不限长度的字符串做了优化</td></tr><tr><td>Boolean</td><td>bool</td><td>布尔值</td></tr><tr><td>Date</td><td>datetime.date</td><td>时间</td></tr><tr><td>Time</td><td>datetime.datetime</td><td>日期和时间</td></tr><tr><td>LargeBinary</td><td>str</td><td>二进制文件</td></tr></tbody></table>]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
            <tag> Flask </tag>
            
            <tag> SQLAlchemy </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>iphone进入DFU模式方法</title>
      <link href="/2022/04/09/iphone%E8%BF%9B%E5%85%A5DFU%E6%A8%A1%E5%BC%8F%E6%96%B9%E6%B3%95/"/>
      <url>/2022/04/09/iphone%E8%BF%9B%E5%85%A5DFU%E6%A8%A1%E5%BC%8F%E6%96%B9%E6%B3%95/</url>
      
        <content type="html"><![CDATA[<p>什么时候需要让 iphone 进入DFU模式？一般两种情况：</p><ul><li>1.比如系统升级不小心中断了导致白苹果，无法开机了；</li><li>2.重刷系统（就是重装系统，忘记appid密码也可以重刷系统）。</li></ul><a id="more"></a><h2 id="一、没有Home键的苹果手机"><a href="#一、没有Home键的苹果手机" class="headerlink" title="一、没有Home键的苹果手机"></a>一、没有Home键的苹果手机</h2><p>iphone X 开始之后的手机，全面屏，没有Home键了。</p><h3 id="进入DFU模式方法"><a href="#进入DFU模式方法" class="headerlink" title="进入DFU模式方法"></a>进入DFU模式方法</h3><ul><li>1.将手机用原装数据线连接上电脑，打开 iTunes/ Finder</li><li>2.按压一下「音量键增加（+）」（不用持续压住）</li><li>3.按压一下「音量键降低（-）」（不用持续压住）</li><li>4.长按「侧边电源键」约10秒，直到iPhone出现强制关机屏幕变黑</li><li>5.快速长按「音量键降低（-）」（电源键不要放开继续压住）约5秒后松开「侧边电源键」</li><li>6.继续长按「音量键降低（-）」约10秒会进入DFU模式，此时画面会是呈现黑色没信息画面</li><li>7.iTunes/ Finder上就会出现要为设备更新或恢复iPhone的提示画面</li></ul><h3 id="退出DFU模式方法"><a href="#退出DFU模式方法" class="headerlink" title="退出DFU模式方法"></a>退出DFU模式方法</h3><ul><li>1.按压一下「音量键增加（+）」（不用持续压住）</li><li>2.按压一下「音量键降低（-）」（不用持续压住）</li><li>3.最后长按「侧边电源键」约10秒后，直到屏幕变暗，出现Apple Logo再放开。</li></ul><h2 id="二、有Home键的苹果手机"><a href="#二、有Home键的苹果手机" class="headerlink" title="二、有Home键的苹果手机"></a>二、有Home键的苹果手机</h2><p>iphone X 之前的旧型号的苹果手机，都有 Home键。</p><h3 id="进入DFU模式方法-1"><a href="#进入DFU模式方法-1" class="headerlink" title="进入DFU模式方法"></a>进入DFU模式方法</h3><ul><li>1.将手机用原装数据线连接上电脑，打开 iTunes</li><li>2.同时按住顶部的「电源键」+「HOME键」10秒（直到屏幕变黑）</li><li>3.仅仅松开「电源键」，继续按住「HOME键」，再等待15秒</li><li>4.iTunes识别出现，DFU模式驱动成功，但是屏幕始终是黑的！这时成功进入DFU模式。</li></ul><h2 id="三、重刷系统"><a href="#三、重刷系统" class="headerlink" title="三、重刷系统"></a>三、重刷系统</h2><ul><li>1、进入DFU模式</li><li>2、打开itunes时会提示检测到一个处于恢复模式的iPhone，点击确定</li><li>3、按住shift键，并用鼠标点击“恢复”按钮，弹出选择固件的窗口后松开Shift键，选择官方固件。</li></ul><p>PS.重刷系统前把iTunes更新到最新，先下载需要刷的系统，这样比较方便。</p>]]></content>
      
      
      <categories>
          
          <category> iphone </category>
          
      </categories>
      
      
        <tags>
            
            <tag> iphone </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>U盘启动进入PE系统 快捷键</title>
      <link href="/2022/04/09/u%E7%9B%98%E5%90%AF%E5%8A%A8%E8%BF%9B%E5%85%A5PE%E7%B3%BB%E7%BB%9F%E5%BF%AB%E6%8D%B7%E9%94%AE/"/>
      <url>/2022/04/09/u%E7%9B%98%E5%90%AF%E5%8A%A8%E8%BF%9B%E5%85%A5PE%E7%B3%BB%E7%BB%9F%E5%BF%AB%E6%8D%B7%E9%94%AE/</url>
      
        <content type="html"><![CDATA[<p>用U盘装系统的时候，我们要设置为从U盘启动，可以进入BIOS后，设置成优先从U盘启动。<br>还有个比较快捷的方法，我们一般都是直接用快捷键进入，选择进入U盘PE系统。</p><a id="more"></a><h2 id="各种品牌的U盘启动的快捷键"><a href="#各种品牌的U盘启动的快捷键" class="headerlink" title="各种品牌的U盘启动的快捷键"></a>各种品牌的U盘启动的快捷键</h2><h3 id="【组装电脑主板】"><a href="#【组装电脑主板】" class="headerlink" title="【组装电脑主板】"></a>【组装电脑主板】</h3><table><thead><tr><th>主板品牌</th><th>启动按键</th></tr></thead><tbody><tr><td>华硕主板</td><td>F8</td></tr><tr><td>技嘉主板</td><td>F12</td></tr><tr><td>微星主板</td><td>F11</td></tr><tr><td>映泰主板</td><td>F9</td></tr><tr><td>梅捷主板</td><td>ESC或F12</td></tr><tr><td>七彩虹主板</td><td>ESC或F11</td></tr><tr><td>华擎主板</td><td>F11</td></tr><tr><td>斯巴达卡主板</td><td>ESC</td></tr><tr><td>昂达主板</td><td>F11</td></tr><tr><td>双敏主板</td><td>ESC</td></tr><tr><td>翔升主板</td><td>F10</td></tr><tr><td>精英主板</td><td>ESC或F12</td></tr><tr><td>冠盟主板</td><td>F11或F12</td></tr><tr><td>富士康主板</td><td>ESC或F12</td></tr><tr><td>顶星主板</td><td>F11或F12</td></tr><tr><td>铭瑄主板</td><td>ESC</td></tr><tr><td>盈通主板</td><td>F8</td></tr><tr><td>捷波主板</td><td>ESC</td></tr><tr><td>Intel主板</td><td>F12</td></tr><tr><td>杰微主板</td><td>ESC或F8</td></tr><tr><td>致铭主板</td><td>F12</td></tr><tr><td>磐英主板</td><td>ESC</td></tr><tr><td>磐正主板</td><td>ESC</td></tr><tr><td>冠铭主板</td><td>F9</td></tr></tbody></table><h3 id="【品牌笔记本电脑】"><a href="#【品牌笔记本电脑】" class="headerlink" title="【品牌笔记本电脑】"></a>【品牌笔记本电脑】</h3><table><thead><tr><th>笔记本品牌</th><th>启动按键</th></tr></thead><tbody><tr><td>苹果笔记本</td><td>开机长按“option”键</td></tr><tr><td>联想笔记本</td><td>F12</td></tr><tr><td>联想Thinkpad</td><td>F12</td></tr><tr><td><strong>华硕笔记本</strong></td><td><strong>ESC</strong></td></tr><tr><td>宏基笔记本</td><td>F12</td></tr><tr><td><strong>惠普笔记本</strong></td><td><strong>F9</strong></td></tr><tr><td><strong>戴尔笔记本</strong></td><td><strong>F12</strong></td></tr><tr><td><strong>索尼笔记本</strong></td><td><strong>ESC</strong></td></tr><tr><td>神舟笔记本</td><td>F12</td></tr><tr><td>东芝笔记本</td><td>F12</td></tr><tr><td>三星笔记本</td><td>F12</td></tr><tr><td>IBM笔记本</td><td>F12</td></tr><tr><td>富士通笔记本</td><td>F12</td></tr><tr><td>海尔笔记本</td><td>F12</td></tr><tr><td>方正笔记本</td><td>F12</td></tr><tr><td>清华同方笔记本</td><td>F12</td></tr><tr><td>微星笔记本</td><td>F11</td></tr><tr><td>明基笔记本</td><td>F9</td></tr><tr><td>技嘉笔记本</td><td>F12</td></tr><tr><td>Gateway笔记本</td><td>F12</td></tr><tr><td>eMachines笔记本</td><td>F12</td></tr></tbody></table><h3 id="【品牌台式电脑】"><a href="#【品牌台式电脑】" class="headerlink" title="【品牌台式电脑】"></a>【品牌台式电脑】</h3><table><thead><tr><th>台式电脑品牌</th><th>启动按键</th></tr></thead><tbody><tr><td>联想台式电脑</td><td>F12</td></tr><tr><td>惠普台式电脑</td><td>F12</td></tr><tr><td>宏基台式电脑</td><td>F12</td></tr><tr><td><strong>戴尔台式电脑</strong></td><td><strong>ESC</strong></td></tr><tr><td>神舟台式电脑</td><td>F12</td></tr><tr><td><strong>华硕台式电脑</strong></td><td><strong>F8</strong></td></tr><tr><td>方正台式电脑</td><td>F12</td></tr><tr><td>清华同方台式电脑</td><td>F12</td></tr><tr><td>海尔台式电脑</td><td>F12</td></tr><tr><td>明基台式电脑</td><td>F8</td></tr></tbody></table><p>PS.一般台式的默认可能都是不允许从USB启动的，所以要先在BIOS的”Advanced”选项中的”USB Configuration”选项中把USB Controller, USB 2.0 Controller这些选项从Disabled改成Enabled。<br>（只是举个例子，不同的电脑，也可能不在Advaned选项中，反正都要在BIOS中把USB的这个相关项改成 Enabled。）</p><p>然后再设置成从U盘启动，或者用热键方式直接选择从U盘启动。</p>]]></content>
      
      
      <categories>
          
          <category> Windows </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Windows </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>you-get 使用教程</title>
      <link href="/2022/04/09/you-get%20%E4%BD%BF%E7%94%A8%E6%95%99%E7%A8%8B/"/>
      <url>/2022/04/09/you-get%20%E4%BD%BF%E7%94%A8%E6%95%99%E7%A8%8B/</url>
      
        <content type="html"><![CDATA[<p>you-get 和 youtube-dl 差不多，都是一款采用Python 编写的免费、开源、命令行程序，主要是用来下载视频的。<br>youtube-dl 主要用来下载Youtube上的视频，别的能用you-get下载的就用you-get，因为用起来更方便、简单。</p><a id="more"></a><h2 id="一、安装"><a href="#一、安装" class="headerlink" title="一、安装"></a>一、安装</h2><ul><li>1、安装 python（<a class="link"   href="https://www.python.org/" >https://www.python.org/<i class="fas fa-external-link-alt"></i></a> ）</li><li>2、安装 ffmpeg （<a class="link"   href="http://ffmpeg.org/" >http://ffmpeg.org/<i class="fas fa-external-link-alt"></i></a> ）</li><li>3、安装 RTMPDump（可选）</li><li>4、安装you-get （pip3 install you-get 或从 <a class="link"   href="https://github.com/soimort/you-get/releases/latest" >https://github.com/soimort/you-get/releases/latest<i class="fas fa-external-link-alt"></i></a> 下载）</li></ul><p>因为命令行需要用到 you-get，所以把ffmpeg、you-get 都添加到系统环境变量。</p><p>you-get 项目github地址：<a class="link"   href="https://github.com/soimort/you-get" >https://github.com/soimort/you-get<i class="fas fa-external-link-alt"></i></a></p><p>you-get中文说明文档：<a class="link"   href="https://github.com/soimort/you-get/wiki/%E4%B8%AD%E6%96%87%E8%AF%B4%E6%98%8E" >https://github.com/soimort/you-get/wiki/%E4%B8%AD%E6%96%87%E8%AF%B4%E6%98%8E<i class="fas fa-external-link-alt"></i></a></p><h2 id="二、下载视频"><a href="#二、下载视频" class="headerlink" title="二、下载视频"></a>二、下载视频</h2><p>1、查看视频所有类型</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">you-get -i [url]</span><br></pre></td></tr></table></figure><p>标有 DEFAULT的为默认画质。</p><p>2、下载视频</p><p>1).下载默认画质（即DEFAULT）：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">you-get [url]</span><br></pre></td></tr></table></figure><p>2).选择画质下载（选择itag）</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">you-get --itag=137 [url]</span><br></pre></td></tr></table></figure><p>3).视频中嵌入字幕</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">you-get --embed-subs [url]</span><br></pre></td></tr></table></figure><p>4)、用代理下载</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">you-get -x 127.0.0.1:1080 [url]</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Software </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Software </tag>
            
            <tag> ffmpeg </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>youtube-dl 使用教程</title>
      <link href="/2022/04/09/youtube-dl%20%E4%BD%BF%E7%94%A8%E6%95%99%E7%A8%8B/"/>
      <url>/2022/04/09/youtube-dl%20%E4%BD%BF%E7%94%A8%E6%95%99%E7%A8%8B/</url>
      
        <content type="html"><![CDATA[<p>youtube-dl 是一款采用Python 编写的免费、开源、命令行程序，主要是用来下载视频的。<br>主要下载Youtube上的视频，还有国内外其它一些视频网站的，m3u8的好像会有点问题，下载不了。</p><a id="more"></a><h2 id="一、安装环境"><a href="#一、安装环境" class="headerlink" title="一、安装环境"></a>一、安装环境</h2><ul><li>1、安装 python（<a class="link"   href="https://www.python.org/" >https://www.python.org/<i class="fas fa-external-link-alt"></i></a> ）</li><li>2、安装 ffmpeg （<a class="link"   href="http://ffmpeg.org/" >http://ffmpeg.org/<i class="fas fa-external-link-alt"></i></a> ）</li><li>3、安装 youtube-dl （<a class="link"   href="https://github.com/ytdl-org/youtube-dl/releases" >https://github.com/ytdl-org/youtube-dl/releases<i class="fas fa-external-link-alt"></i></a> ）</li></ul><p>因为命令行需要用到 youtube-dl，所以把ffmpeg、youtube-dl.exe 都添加到系统环境变量。</p><p>youtube-dl 项目github地址：<a class="link"   href="https://github.com/rg3/youtube-dl/" >https://github.com/rg3/youtube-dl/<i class="fas fa-external-link-alt"></i></a> </p><h2 id="二、下载YouTube视频"><a href="#二、下载YouTube视频" class="headerlink" title="二、下载YouTube视频"></a>二、下载YouTube视频</h2><h4 id="1、查看视频所有类型，只看不下载"><a href="#1、查看视频所有类型，只看不下载" class="headerlink" title="1、查看视频所有类型，只看不下载"></a>1、查看视频所有类型，只看不下载</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">youtube-dl -F [url]</span><br></pre></td></tr></table></figure><img                       lazyload                     src="/images/loading.svg"                     data-src="/img/youtube-dl_1.png"                                     ><h4 id="2、下载视频和音频并主动合并"><a href="#2、下载视频和音频并主动合并" class="headerlink" title="2、下载视频和音频并主动合并"></a>2、下载视频和音频并主动合并</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">youtube-dl -f [format code] [url]    //下载指定格式的视频和音频，如 youtube-dl -f 299+140 [url]youtube-dl -f bestvideo+bestaudio [url]    //下载质量最好的视频和音频</span><br></pre></td></tr></table></figure><p>如果系统中安装了ffmpeg的话，youtube-dl会自动合并已经下载好的音频和视频，然后自动删除单独的音视频文件。</p><img                       lazyload                     src="/images/loading.svg"                     data-src="/img/youtube-dl_2.png"                                     ><p><strong>把下载的视频转换成mp4格式</strong><br>加上<code>--merge-output-format mp4</code> 参数</p><h4 id="3、下载字幕"><a href="#3、下载字幕" class="headerlink" title="3、下载字幕"></a>3、下载字幕</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">--list-subs 列出所有可以下载的字幕，包括语言以及格式</span><br><span class="line">--write-sub下载up主自己上传的字幕（非youtube自动生成）</span><br><span class="line">--write-auto-sub 下载youtube自动生成的字幕</span><br><span class="line">--sub-lang [LANGS] 选择下载字幕的语言</span><br></pre></td></tr></table></figure><p>1).查看视频支持哪些语言的字幕</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">youtube-dl --list-subs [url]</span><br></pre></td></tr></table></figure><p>2).下载字幕<br>a.只下载字幕用户上传的 zh-Hans 字幕，不下载视频</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">youtube-dl [url] --write-sub --sub-lang zh-Hans --skip-download</span><br></pre></td></tr></table></figure><p>b.把下载的vtt字幕转换成srt字幕</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">youtube-dl [url] --write-sub --sub-lang zh-Hans --sub-format vtt --convert-subs srt --skip-download</span><br></pre></td></tr></table></figure><p>3).同时下载视频和字幕（字幕嵌入视频）<br>加上参数：–embed-sub -i</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">youtube-dl.exe [url] -f 299+140 --write-sub --sub-lang zh-Hans --embed-sub -i</span><br></pre></td></tr></table></figure><p>会下载一个视频文件（内嵌字幕）。</p><img                       lazyload                     src="/images/loading.svg"                     data-src="/img/youtube-dl_3.png"                                     ><h4 id="4、总结"><a href="#4、总结" class="headerlink" title="4、总结"></a>4、总结</h4><p>1).查看视频支持哪些语言的字幕</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">youtube-dl --list-subs [url]</span><br></pre></td></tr></table></figure><p>2).下载视频（含字幕，质量最好的视频和音频）</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">youtube-dl [url] -f <span class="string">&#x27;bestvideo[ext=mp4]+bestaudio[ext=m4a]/mp4&#x27;</span> --write-sub --sub-lang zh-Hans --embed-sub -i</span><br></pre></td></tr></table></figure><h2 id="三、批量下载视频"><a href="#三、批量下载视频" class="headerlink" title="三、批量下载视频"></a>三、批量下载视频</h2><h4 id="1、下载播放列表"><a href="#1、下载播放列表" class="headerlink" title="1、下载播放列表"></a>1、下载播放列表</h4><p>参数：–yes-playlist -f -k ListURL</p><p>1).下载YouTube播放列表（-i 后面跟的即列表名）</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">youtube-dl -f <span class="string">&#x27;bestvideo[ext=mp4]+bestaudio[ext=m4a]/mp4&#x27;</span> --write-sub --sub-lang zh-Hans --embed-sub -i PLBAGcD3siRDguyYYzhVwZ3tLvOyyG5k6K</span><br></pre></td></tr></table></figure><p>2).下载播放列表</p><ul><li>要从播放列表下载第 10 个文件，可使用：youtube-dl –playlist-items 10 [playlist_url]</li><li>要下载多个指定的文件，只需用逗号分隔：youtube-dl –playlist-items 2,3,7,10 [playlist_url]</li><li>从第 10 个开始，直接下载完整个列表：youtube-dl –playlist-start 10 [playlist_url]</li><li>在播放列表中仅下载从第 2 到第 5 的文件：youtube-dl –playlist-start 2 –playlist-end 5 [playlist_url]</li></ul><h4 id="2、批量下载"><a href="#2、批量下载" class="headerlink" title="2、批量下载"></a>2、批量下载</h4><p>新建一个 list.bat 文件，文件内容为：</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">url1</span></span><br><span class="line"><span class="string">url2</span></span><br><span class="line"><span class="string">url3</span></span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">youtube-dl --batch-file list.bat</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">youtube-dl -a list.txt</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">youtube-dl -f <span class="string">&#x27;bestvideo[ext=mp4]+bestaudio[ext=m4a]/mp4&#x27;</span> --write-sub --sub-lang zh-CN --embed-sub -i -a list.txt</span><br></pre></td></tr></table></figure><h2 id="五、报错"><a href="#五、报错" class="headerlink" title="五、报错"></a>五、报错</h2><p>如果提示 HTTP Error 403: Forbidden 错误，运行一下下面的代码：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">youtube-dl --rm-cache-dir</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Software </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Software </tag>
            
            <tag> ffmpeg </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Github Pages绑定个人域名</title>
      <link href="/2022/04/09/Github%20Pages%E7%BB%91%E5%AE%9A%E4%B8%AA%E4%BA%BA%E5%9F%9F%E5%90%8D/"/>
      <url>/2022/04/09/Github%20Pages%E7%BB%91%E5%AE%9A%E4%B8%AA%E4%BA%BA%E5%9F%9F%E5%90%8D/</url>
      
        <content type="html"><![CDATA[<p>用Github Pages + Hexo搭建个人博客后，域名都是[github用户名].github.io，如果想换成自己的域名，比如我的github上的站点是：hduzn.github.io，要绑定的域名为：<a class="link"   href="http://www.i007it.com/" >www.i007it.com<i class="fas fa-external-link-alt"></i></a></p><a id="more"></a><h2 id="1-在Github上进行设置"><a href="#1-在Github上进行设置" class="headerlink" title="1.在Github上进行设置"></a>1.在Github上进行设置</h2><ul><li>打开Github上[github用户名].github.io的配置</li><li>找到<strong>【Settings】</strong>中，页面拉到最下面<strong>【Github Pages】</strong>选项，</li><li>在Custom domain项中输入域名：i007it.com后，Save保存一下。<img                       lazyload                     src="/images/loading.svg"                     data-src="/img/Github_Pages_domain_name_1.png"                                     ><img                       lazyload                     src="/images/loading.svg"                     data-src="/img/Github_Pages_domain_name_2.png"                                     ></li></ul><h2 id="2-添加CNAME文件"><a href="#2-添加CNAME文件" class="headerlink" title="2.添加CNAME文件"></a>2.添加CNAME文件</h2><p>打开Hexo\source 目录，添加一个CNAME文件，用记事本打开，内容如下（只有一行域名）：</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">i007it.com</span></span><br></pre></td></tr></table></figure><img                       lazyload                     src="/images/loading.svg"                     data-src="/img/Github_Pages_domain_name_3.png"                                     ><p>PS.域名前没有加“www”，如果加了“www”，那就必须只能用 <a class="link"   href="http://www.i007it.com/" >www.i007it.com<i class="fas fa-external-link-alt"></i></a> 访问了。</p><h2 id="3-修改DNS中对应的IP地址"><a href="#3-修改DNS中对应的IP地址" class="headerlink" title="3.修改DNS中对应的IP地址"></a>3.修改DNS中对应的IP地址</h2><p>在域名解析服务商中，将域名的A记录对应的ip地址设置为github.io对应的ip。</p><p>1).先通过<code>ping github.io</code> 命令，得到对应的ip地址为：185.199.110.153 （不固定，需要自己ping一下）<br><img                       lazyload                     src="/images/loading.svg"                     data-src="/img/Github_Pages_domain_name_4.png"                                     ></p><p>2).当域名解析(DNS)服务商中的A记录对应ip地址设置为上面ping出来的ip地址。<br><img                       lazyload                     src="/images/loading.svg"                     data-src="/img/Github_Pages_domain_name_5.png"                                     ></p><p>这样就可以了。</p>]]></content>
      
      
      <categories>
          
          <category> Hexo </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Github </tag>
            
            <tag> Hexo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【小白教程】免费建立静态博客网站（Github+Hexo）</title>
      <link href="/2022/04/09/%E3%80%90%E5%B0%8F%E7%99%BD%E6%95%99%E7%A8%8B%E3%80%91%E5%85%8D%E8%B4%B9%E5%BB%BA%E7%AB%8B%E9%9D%99%E6%80%81%E5%8D%9A%E5%AE%A2%E7%BD%91%E7%AB%99%EF%BC%88Github+Hexo%EF%BC%89/"/>
      <url>/2022/04/09/%E3%80%90%E5%B0%8F%E7%99%BD%E6%95%99%E7%A8%8B%E3%80%91%E5%85%8D%E8%B4%B9%E5%BB%BA%E7%AB%8B%E9%9D%99%E6%80%81%E5%8D%9A%E5%AE%A2%E7%BD%91%E7%AB%99%EF%BC%88Github+Hexo%EF%BC%89/</url>
      
        <content type="html"><![CDATA[<p>这是一篇有关如何使用Github Pages和Hexo搭建自己独立博客的详尽教程。里面介绍了如何使用和配置Hexo框架，如何将Hexo部署到自己的Github项目中。</p><a id="more"></a><h2 id="一、前期准备（软件安装）"><a href="#一、前期准备（软件安装）" class="headerlink" title="一、前期准备（软件安装）"></a>一、前期准备（软件安装）</h2><h3 id="1-注册Github账号"><a href="#1-注册Github账号" class="headerlink" title="1.注册Github账号"></a>1.注册Github账号</h3><p>【前提】：能上Github网站（<a class="link"   href="https://github.com/" >https://github.com/<i class="fas fa-external-link-alt"></i></a> ）</p><p>为什么要使用Github Pages？</p><p>简单快捷，使用Github Pages可以为你提供一个免费的服务器，免去了自己搭建服务器和写数据库的麻烦。可以绑定自己的域名(但只能绑定一个)。</p><p>PS.Github Pages可以被认为是用户编写的、托管在github上的静态网页。</p><h3 id="2-下载安装Node-js"><a href="#2-下载安装Node-js" class="headerlink" title="2.下载安装Node.js"></a>2.下载安装Node.js</h3><p>官网（<a class="link"   href="https://nodejs.org/en/download/" >https://nodejs.org/en/download/<i class="fas fa-external-link-alt"></i></a> ）下载对应版本安装就行。</p><p>（怕有问题，直接搜索安装教程照着来就行）</p><h3 id="3-下载安装Git"><a href="#3-下载安装Git" class="headerlink" title="3.下载安装Git"></a>3.下载安装Git</h3><p>官网（<a class="link"   href="https://git-scm.com/download/win" >https://git-scm.com/download/win<i class="fas fa-external-link-alt"></i></a> ）会根据你电脑参数，直接跳出对应版本让你下载。</p><p>官网下载很慢，可以到以下地址中下载git安装包（速度贼快）：<br><a class="link"   href="https://npm.taobao.org/mirrors/git-for-windows/" >https://npm.taobao.org/mirrors/git-for-windows/<i class="fas fa-external-link-alt"></i></a></p><p>拉到页面最下面是最新版本，比如windows 64位的系列就下载：<br>Git-2.30.0.2-64-bit.exe</p><p>安装完成后，在命令行输入<code>git version</code>查看是否安装成功。</p><p>也可以在桌面、右键，选择【Git Bash Here】，输入<code>git version</code>命令进行查看安装的git版本。</p><h2 id="二-、安装Hexo"><a href="#二-、安装Hexo" class="headerlink" title="二 、安装Hexo"></a>二 、安装Hexo</h2><p>Hexo 是一个快速、简洁且高效的博客框架。Hexo 使用 Markdown（或其他渲染引擎）解析文章，在几秒内，即可利用靓丽的主题生成静态网页。</p><h3 id="1-安装Hexo"><a href="#1-安装Hexo" class="headerlink" title="1.安装Hexo"></a>1.安装Hexo</h3><p>安装完了Git后，在桌面、右键，选择【Git Bash Here】，输入以下命令安装。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-cli -g</span><br><span class="line">npm install hexo-deployer-git --save</span><br></pre></td></tr></table></figure><p>第一句是安装hexo；<br>第二句是安装hexo部署到git page的deployer，两个都需要安装。</p><h3 id="2-Hexo初始化配置（创建Hexo文件夹）"><a href="#2-Hexo初始化配置（创建Hexo文件夹）" class="headerlink" title="2.Hexo初始化配置（创建Hexo文件夹）"></a>2.Hexo初始化配置（创建Hexo文件夹）</h3><p>安装完成后，根据自己喜好建立目录（如F:\Blog\Hexo），直接进入F:\Blog\Hexo文件夹下右键鼠标，点击【Git Bash Here】，进入Git命令框，输入以下命令。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo init</span><br></pre></td></tr></table></figure><p>安装 Hexo 完成后，Hexo 将会在指定文件夹中新建所需要的文件。</p><h3 id="3-本地运行（服务器）"><a href="#3-本地运行（服务器）" class="headerlink" title="3.本地运行（服务器）"></a>3.本地运行（服务器）</h3><p>依次执行下面命令，执行完即可登录网页 localhost:4000 查看效果</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">hexo generate</span><br><span class="line">hexo server</span><br></pre></td></tr></table></figure><h2 id="三、将博客部署到Github-Pages上"><a href="#三、将博客部署到Github-Pages上" class="headerlink" title="三、将博客部署到Github Pages上"></a>三、将博客部署到Github Pages上</h2><p>现在本地的博客已经搭建起来了，那么需要做的就是把本地的博客发布到服务器上，让别人也可以连接我们的博客，而Github Pages就帮我完成了这件事情。但是Github Pages的代码就是寄存在Github上面的。所以接下来我们需要在Github上面创建一个新的项目。</p><h3 id="1-登录Github账户"><a href="#1-登录Github账户" class="headerlink" title="1.登录Github账户"></a>1.登录Github账户</h3><h3 id="2-创建Github-Pages项目"><a href="#2-创建Github-Pages项目" class="headerlink" title="2.创建Github Pages项目"></a>2.创建Github Pages项目</h3><p>点击New repository</p><img                       lazyload                     src="/images/loading.svg"                     data-src="/img/Hexo_Github_blog_1.png"                                     ><h3 id="3-配置SSH密钥"><a href="#3-配置SSH密钥" class="headerlink" title="3.配置SSH密钥"></a>3.配置SSH密钥</h3><p>配置Github的SSH密钥可以让本地git项目与远程的github建立联系，让我们在本地写了代码之后直接通过git操作就可以实现本地代码库与Github代码库同步。</p><p>操作如下：</p><h4 id="第一步、看看是否存在SSH密钥-keys"><a href="#第一步、看看是否存在SSH密钥-keys" class="headerlink" title="第一步、看看是否存在SSH密钥(keys)"></a>第一步、看看是否存在SSH密钥(keys)</h4><p>首先，我们需要看看是否看看本机是否存在SSH keys，打开【Git Bash】，并运行：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> ~/. ssh</span><br></pre></td></tr></table></figure><p>检查你本机用户home目录下是否存在.ssh目录，如果，不存在此目录，则进行第二步操作；<br>否则，你本机已经存在ssh公钥和私钥，可以略过第二步，直接进入第三步操作。</p><h4 id="第二步、创建一对新的SSH密钥-keys"><a href="#第二步、创建一对新的SSH密钥-keys" class="headerlink" title="第二步、创建一对新的SSH密钥(keys)"></a>第二步、创建一对新的SSH密钥(keys)</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh-keygen -t rsa -C <span class="string">&quot;your_email@example.com&quot;</span></span><br></pre></td></tr></table></figure><p>#注意上面的邮箱是自己的邮箱地址，按这个邮箱地址会创建一对密钥</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Generating public/private rsa key pair.</span><br><span class="line">Enter file <span class="keyword">in</span> <span class="built_in">which</span> to save the key (/c/Users/yourusername/.ssh/id_rsa): [Press enter]</span><br></pre></td></tr></table></figure><p><strong>直接回车</strong>，则将密钥按默认文件进行存储。此时也可以输入特定的文件名，比如/c/Users/yourusername/.ssh/github_rsa</p><p>接着，根据提示，你<strong>需要输入密码和确认密码</strong></p><p>（说到这里，如果你很放心，其实可以不用密码，就是到输密码的地方，都直接回车，所以每次push就只管回车就行了。所谓的最安全的密码，就是没有密码 哈哈）。相关提示如下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Enter passphrase (empty <span class="keyword">for</span> no passphrase): [Type a passphrase]</span><br><span class="line">Enter same passphrase again: [Type passphrase again]</span><br></pre></td></tr></table></figure><p>输入完成之后，屏幕会显示如下信息：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Your identification has been saved <span class="keyword">in</span> /c/Users/you/.ssh/id_rsa.</span><br><span class="line">Your public key has been saved <span class="keyword">in</span> /c/Users/you/.ssh/id_rsa.pub.</span><br><span class="line">The key fingerprint is:</span><br><span class="line">01:0f:f4:3b:ca:85:d6:17:a1:7d:f0:68:9d:f0:a2:db your_email@example.com</span><br></pre></td></tr></table></figure><h4 id="第三步、在GitHub账户中添加你的公钥"><a href="#第三步、在GitHub账户中添加你的公钥" class="headerlink" title="第三步、在GitHub账户中添加你的公钥"></a>第三步、在GitHub账户中添加你的公钥</h4><p>运行如下命令，将公钥的内容复制到系统粘贴板(clipboard)中。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">clip &lt; ~/.ssh/id_rsa.pub</span><br></pre></td></tr></table></figure><ul><li>1).登陆GitHub，进入你的Account Settings</li><li>2).选择SSH Keys</li><li>3).粘贴密钥，添加即可<img                       lazyload                     src="/images/loading.svg"                     data-src="/img/Hexo_Github_blog_2.png"                                     ></li></ul><h4 id="第四步、测试"><a href="#第四步、测试" class="headerlink" title="第四步、测试"></a>第四步、测试</h4><p>可以输入下面的命令，看看设置是否成功，<strong><a class="link"   href="mailto:&#103;&#x69;&#116;&#x40;&#103;&#x69;&#116;&#104;&#117;&#98;&#46;&#99;&#111;&#x6d;" >&#103;&#x69;&#116;&#x40;&#103;&#x69;&#116;&#104;&#117;&#98;&#46;&#99;&#111;&#x6d;<i class="fas fa-external-link-alt"></i></a>的部分不要修改</strong>： </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh -T git@github.com</span><br></pre></td></tr></table></figure><p>如果是下面的反馈：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">The authenticityofhost<span class="string">&#x27;github.com (207.97.227.239)&#x27;</span>can<span class="string">&#x27;t be established.  RSA key fingerprint is 16:27:ac:a5:76:28:2d:36:63:1b:56:4d:eb:df:a6:48.  Are you sure you want to continue connecting (yes/no)? </span></span><br></pre></td></tr></table></figure><p>不要紧张，输入yes就好，然后会看到：<br><img                       lazyload                     src="/images/loading.svg"                     data-src="/img/Hexo_Github_blog_3.png"                                     ></p><h4 id="第五步、设置用户信息"><a href="#第五步、设置用户信息" class="headerlink" title="第五步、设置用户信息"></a>第五步、设置用户信息</h4><p>现在你已经可以通过SSH链接到GitHub了，还有一些个人信息需要完善的。 Git会根据用户的名字和邮箱来记录提交。GitHub也是用这些信息来做权限的处理，输入下面的代码进行个人信息的设置，把名称和邮箱替换成你自己的，名字根据自己的喜好自己取，而不是GitHub的昵称。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git config --global user.name <span class="string">&quot;ryanlijianchang&quot;</span> //用户名</span><br><span class="line">git config --global user.email <span class="string">&quot;liji.anchang@163.com&quot;</span> //填写自己的邮箱</span><br></pre></td></tr></table></figure><h4 id="第六步、SSH-Key配置成功"><a href="#第六步、SSH-Key配置成功" class="headerlink" title="第六步、SSH Key配置成功"></a>第六步、SSH Key配置成功</h4><p>本机已成功连接到github。</p><h2 id="四、将本地的Hexo文件更新到Github的库中"><a href="#四、将本地的Hexo文件更新到Github的库中" class="headerlink" title="四、将本地的Hexo文件更新到Github的库中"></a>四、将本地的Hexo文件更新到Github的库中</h2><h4 id="1、登录Github打开自己的项目-username-github-io"><a href="#1、登录Github打开自己的项目-username-github-io" class="headerlink" title="1、登录Github打开自己的项目 username.github.io"></a>1、登录Github打开自己的项目 username.github.io</h4><img                       lazyload                     src="/images/loading.svg"                     data-src="/img/Hexo_Github_blog_4.png"                                     ><h4 id="2、点击SSH，选择SSH类型地址"><a href="#2、点击SSH，选择SSH类型地址" class="headerlink" title="2、点击SSH，选择SSH类型地址"></a>2、点击SSH，选择SSH类型地址</h4><img                       lazyload                     src="/images/loading.svg"                     data-src="/img/Hexo_Github_blog_5.png"                                     ><h4 id="3、复制仓库对应的SSH地址"><a href="#3、复制仓库对应的SSH地址" class="headerlink" title="3、复制仓库对应的SSH地址"></a>3、复制仓库对应的SSH地址</h4><img                       lazyload                     src="/images/loading.svg"                     data-src="/img/Hexo_Github_blog_6.png"                                     ><h4 id="4、修改Hexo配置文件-config-ylml"><a href="#4、修改Hexo配置文件-config-ylml" class="headerlink" title="4、修改Hexo配置文件 _config.ylml"></a>4、修改Hexo配置文件 _config.ylml</h4><p>打开一开始创建的Hexo文件夹（如F:\Blog\Hexo），用记事本打开文件夹下的 <strong>_config.yml</strong> 文件。<br>在配置文件里作如下修改，保存。<br><img                       lazyload                     src="/images/loading.svg"                     data-src="/img/Hexo_Github_blog_7.png"                                     ></p><h4 id="5、在Hexo文件夹下用Git-Bash依次执行以下命令："><a href="#5、在Hexo文件夹下用Git-Bash依次执行以下命令：" class="headerlink" title="5、在Hexo文件夹下用Git Bash依次执行以下命令："></a>5、在Hexo文件夹下用Git Bash依次执行以下命令：</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">hexo generate</span><br><span class="line">hexo deploy</span><br></pre></td></tr></table></figure><p>或者直接执行 <code>hexo g -d</code></p><p>执行完之后会让你输入github的账号和密码，输入完后就可以登录我们自己的部署在Github Pages服务器上的博客了。对应的地址是 username.github.io(例如：ryanlijianchang.github.io)。</p><p>假如这时候，报错 ERROR Deployer not found: git，那么就是你的deployer没有安装成功，你需要执行如下命令再安装一次：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-deployer-git --save</span><br></pre></td></tr></table></figure><p>这样，你再执行hexo g -d，你的博客就部署到Github上了。</p><h4 id="6、在浏览器上输入自己的主页地址"><a href="#6、在浏览器上输入自己的主页地址" class="headerlink" title="6、在浏览器上输入自己的主页地址"></a>6、在浏览器上输入自己的主页地址</h4><p>在浏览器上输入Github Pager为我们生成的外链（例如：<a class="link"   href="https://ryanlijianchang.github.io/" >https://ryanlijianchang.github.io/<i class="fas fa-external-link-alt"></i></a> ，而ryanlijianchang为Github账号，专属博客地址就是：https://[githu的用户名].github.io/ ）即可看到自己的博客了。当然，每一个人都可以通过这个地址访问到你的博客了。</p><h2 id="五、美化博客"><a href="#五、美化博客" class="headerlink" title="五、美化博客"></a>五、美化博客</h2><h4 id="1、下载喜欢的Hexo主题"><a href="#1、下载喜欢的Hexo主题" class="headerlink" title="1、下载喜欢的Hexo主题"></a>1、下载喜欢的Hexo主题</h4><p>Hexo主题官网：<a class="link"   href="https://hexo.io/themes/" >https://hexo.io/themes/<i class="fas fa-external-link-alt"></i></a><br>下载自己喜欢的主题，比如：hexo-theme-next 主题。</p><h4 id="2、放到themes目录下"><a href="#2、放到themes目录下" class="headerlink" title="2、放到themes目录下"></a>2、放到themes目录下</h4><p>把解压后得到的主题文件夹放到Hexo文件夹下的themes目录下，如：F:\Blog\hexo\themes。</p><h4 id="3、修改Hexo配置文件"><a href="#3、修改Hexo配置文件" class="headerlink" title="3、修改Hexo配置文件"></a>3、修改Hexo配置文件</h4><p>打开Hexo文件夹下的配置文件_config.yml<br>修改参数为：theme: hexo-theme-next</p><h4 id="4、部署主题"><a href="#4、部署主题" class="headerlink" title="4、部署主题"></a>4、部署主题</h4><p>1).先本地部署，返回Hexo目录，右键  Git Bash，依次输入命令：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">hexo generate</span><br><span class="line">hexo server</span><br></pre></td></tr></table></figure><p>打开浏览器，输入 <a class="link"   href="http://localhost:4000/" >http://localhost:4000/<i class="fas fa-external-link-alt"></i></a> 即可看见我们的主题已经更换了。</p><p>2).部署到Github上</p><p>打开Hexo文件夹，右键Git Bash，依次输入命令：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">hexo clean</span><br><span class="line">hexo generate -deploy</span><br></pre></td></tr></table></figure><p>(第一条clean命令必须要，不然有时因为缓存问题，服务器更新不了主题；<br>第二条可简写成 hexo g -d，也可以分开写)</p><h2 id="六、小结"><a href="#六、小结" class="headerlink" title="六、小结"></a>六、小结</h2><p>在F:\blog\Hexo\source_posts 目录下添加.md的文章后，需要做的是：</p><p>回到 Hexo文件夹，右键，Git Bash，依次输入以下命令：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">hexo clean</span><br><span class="line">hexo generate</span><br><span class="line">hexo deploy</span><br></pre></td></tr></table></figure><p>执行 <code>hexo server</code> 后，可以打开浏览器，输入 <a class="link"   href="http://localhost:4000/" >http://localhost:4000/<i class="fas fa-external-link-alt"></i></a> 本地查看。</p><p>PS.图片上传用图床（用PicGo工具使用Github图床，教程：<a href="/2021/02/08/Github%E5%9B%BE%E5%BA%8A%E4%BD%BF%E7%94%A8%E6%95%99%E7%A8%8B/" title="Github 图床使用教程">Github 图床使用教程</a>）</p>]]></content>
      
      
      <categories>
          
          <category> Hexo </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Github </tag>
            
            <tag> Hexo </tag>
            
            <tag> PicGo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Typora+PicGo无法显示Github图床图片问题</title>
      <link href="/2022/04/09/Typora+PicGo%E6%97%A0%E6%B3%95%E6%98%BE%E7%A4%BAGithub%E5%9B%BE%E5%BA%8A%E5%9B%BE%E7%89%87%E9%97%AE%E9%A2%98/"/>
      <url>/2022/04/09/Typora+PicGo%E6%97%A0%E6%B3%95%E6%98%BE%E7%A4%BAGithub%E5%9B%BE%E5%BA%8A%E5%9B%BE%E7%89%87%E9%97%AE%E9%A2%98/</url>
      
        <content type="html"><![CDATA[<p>用Hexo+Github pages搭建的博客，图床就用的Github的图床，使用方法：<a href="/2021/02/08/Github%E5%9B%BE%E5%BA%8A%E4%BD%BF%E7%94%A8%E6%95%99%E7%A8%8B/" title="Github 图床使用教程">Github 图床使用教程</a></p><p>然后，用 Typora的时候，插入图片的链接后，没法显示图片。</p><a id="more"></a><p>按照网上的说法，在Typora的【偏好设置】-&gt;【图像】中也设置了上传图片用的 PicGo程序。</p><p>如下图：</p><img                       lazyload                     src="/images/loading.svg"                     data-src="/img/Typora_PicGo_Github_pic_1.png"                                     ><p>但是，在Typora中看不到图片。再查了一下，发现是 Github屏蔽掉了图片。</p><h3 id="解决办法："><a href="#解决办法：" class="headerlink" title="解决办法："></a>解决办法：</h3><p>修改host文件。</p><p>hosts文件在Windows系统中的路径：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">C:\Windows\System32\drivers\etc\hosts</span><br></pre></td></tr></table></figure><p>添加以下代码：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># GitHub Start </span></span><br><span class="line">140.82.113.3      github.com</span><br><span class="line">140.82.114.20     gist.github.com</span><br><span class="line">151.101.184.133    assets-cdn.github.com</span><br><span class="line">151.101.184.133    raw.githubusercontent.com</span><br><span class="line">151.101.184.133    gist.githubusercontent.com</span><br><span class="line">151.101.184.133    cloud.githubusercontent.com</span><br><span class="line">151.101.184.133    camo.githubusercontent.com</span><br><span class="line">151.101.184.133    avatars0.githubusercontent.com</span><br><span class="line">199.232.68.133     avatars0.githubusercontent.com</span><br><span class="line">199.232.28.133     avatars1.githubusercontent.com</span><br><span class="line">151.101.184.133    avatars1.githubusercontent.com</span><br><span class="line">151.101.184.133    avatars2.githubusercontent.com</span><br><span class="line">199.232.28.133     avatars2.githubusercontent.com</span><br><span class="line">151.101.184.133    avatars3.githubusercontent.com</span><br><span class="line">199.232.68.133     avatars3.githubusercontent.com</span><br><span class="line">151.101.184.133    avatars4.githubusercontent.com</span><br><span class="line">199.232.68.133     avatars4.githubusercontent.com</span><br><span class="line">151.101.184.133    avatars5.githubusercontent.com</span><br><span class="line">199.232.68.133     avatars5.githubusercontent.com</span><br><span class="line">151.101.184.133    avatars6.githubusercontent.com</span><br><span class="line">199.232.68.133     avatars6.githubusercontent.com</span><br><span class="line">151.101.184.133    avatars7.githubusercontent.com</span><br><span class="line">199.232.68.133     avatars7.githubusercontent.com</span><br><span class="line">151.101.184.133    avatars8.githubusercontent.com</span><br><span class="line">199.232.68.133     avatars8.githubusercontent.com</span><br><span class="line"><span class="comment"># GitHub End</span></span><br></pre></td></tr></table></figure><p>保存后重启下 Typora，果然可以了！</p><p>PS.如果hosts文件不可编辑的状态，右键【属性】，把“只读”的勾去掉就行。（当然需要管理员权限）</p>]]></content>
      
      
      <categories>
          
          <category> Hexo </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Github </tag>
            
            <tag> Hexo </tag>
            
            <tag> Typora </tag>
            
            <tag> PicGo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Navicat连接MySQL数据库不成功 解决方法</title>
      <link href="/2022/04/05/Navicat%E8%BF%9E%E6%8E%A5MySQL%E6%95%B0%E6%8D%AE%E5%BA%93%E4%B8%8D%E6%88%90%E5%8A%9F/"/>
      <url>/2022/04/05/Navicat%E8%BF%9E%E6%8E%A5MySQL%E6%95%B0%E6%8D%AE%E5%BA%93%E4%B8%8D%E6%88%90%E5%8A%9F/</url>
      
        <content type="html"><![CDATA[<p>当想用本地的 Navicat 连接 服务器上 Docker中的MySQL数据库时，出现如下问题：</p><p>1130 - Host ‘*<strong><strong>**</strong></strong>‘ is not allowed to connect to this MySQL server</p><a id="more"></a><img                       lazyload                     src="/images/loading.svg"                     data-src="/img/Navicat_connect_mysql_1.png"                                     ><h1 id="解决方法："><a href="#解决方法：" class="headerlink" title="解决方法："></a>解决方法：</h1><h2 id="1、远程联接到MySQL服务器"><a href="#1、远程联接到MySQL服务器" class="headerlink" title="1、远程联接到MySQL服务器"></a>1、远程联接到MySQL服务器</h2><h3 id="1-进入容器"><a href="#1-进入容器" class="headerlink" title="1).进入容器"></a>1).进入容器</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker <span class="built_in">exec</span> -it ewomail /bin/bash</span><br></pre></td></tr></table></figure><h3 id="2-进入MySQL"><a href="#2-进入MySQL" class="headerlink" title="2).进入MySQL"></a>2).进入MySQL</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mysql -u root -p</span><br></pre></td></tr></table></figure><p>输入密码：123MYSQL456</p><h2 id="2、查询允许连接的主机及用户信息"><a href="#2、查询允许连接的主机及用户信息" class="headerlink" title="2、查询允许连接的主机及用户信息"></a>2、查询允许连接的主机及用户信息</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt;select Host, User, Password from mysql.user;</span><br></pre></td></tr></table></figure><img                       lazyload                     src="/images/loading.svg"                     data-src="/img/Navicat_connect_mysql_2.png"                                     ><p>从结果中可以看到，MySql只允许使用root用户从localhost，127.0.0.1和::1主机上进行连接，也就是只能从本机连接。</p><p>注：%处原来是 <strong>::1</strong> ，是Ipv6地址127.0.0.1的缩写，也就是本机。</p><h2 id="3、解决方法"><a href="#3、解决方法" class="headerlink" title="3、解决方法"></a>3、解决方法</h2><h3 id="1-使用SQL语句将-1改为-："><a href="#1-使用SQL语句将-1改为-：" class="headerlink" title="1).使用SQL语句将 ::1改为%："></a>1).使用SQL语句将 ::1改为%：</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt;update mysql.user set &#96;Host&#96; &#x3D; &#39;%&#39; where &#96;Host&#96; &#x3D; &#39;::1&#39; and User &#x3D; &#39;root&#39;;</span><br></pre></td></tr></table></figure><p>执行结果：</p><blockquote><p>[SQL]<br>update mysql.user set <code>Host</code> = ‘%’ where <code>Host</code> = ‘::1’ and User = ‘root’;<br>受影响的行: 1<br>时间: 0.000ms</p></blockquote><p>然后再查询user表，结果就如上所示。</p><p>可以看到，已经将::1改为了%，**%表示匹配所有host的主机的，开放此权限，会增加MySql的风险，请根据实际情况而定！**</p><h3 id="2-执行下面的SQL，使上面的改动生效，否则仍然连接不上"><a href="#2-执行下面的SQL，使上面的改动生效，否则仍然连接不上" class="headerlink" title="2).执行下面的SQL，使上面的改动生效，否则仍然连接不上"></a>2).执行下面的SQL，使上面的改动生效，否则仍然连接不上</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt;flush privileges;</span><br></pre></td></tr></table></figure><p>再用Navicat连接MySQL服务器，提示成功！</p><h2 id="4、补充"><a href="#4、补充" class="headerlink" title="4、补充"></a>4、补充</h2><p>如果你想允许用户root从ip为192.168.0.8的主机连接到MySql服务器，并使用123456作为密码，可以执行下面的SQL语句：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt;GRANT ALL PRIVILEGES ON *.* TO &#39;root&#39;@&#39;192.168.0.8&#39; IDENTIFIED BY &#39;123456&#39; WITH GRANT OPTION;</span><br></pre></td></tr></table></figure><p>执行下面的语句，使上面的改动生效：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt;FLUSH PRIVILEGES;</span><br></pre></td></tr></table></figure><p>如果你想允许用户root从ip为192.168.0.8的主机连接到MySql服务器的testdb数据库，并使用123456作为密码：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt;GRANT ALL PRIVILEGES ON testdb.* TO &#39;root&#39;@&#39;192.168.0.8&#39; IDENTIFIED BY &#39;123456&#39; WITH GRANT OPTION;</span><br></pre></td></tr></table></figure><p>执行下面的语句，使上面的改动生效：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt;FLUSH PRIVILEGES;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 数据库 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> MySQL </tag>
            
            <tag> Navicat </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Docker EwoMail修改MySQL密码</title>
      <link href="/2022/04/05/Docker%20EwoMail%E4%BF%AE%E6%94%B9MySQL%E5%AF%86%E7%A0%81/"/>
      <url>/2022/04/05/Docker%20EwoMail%E4%BF%AE%E6%94%B9MySQL%E5%AF%86%E7%A0%81/</url>
      
        <content type="html"><![CDATA[<h2 id="1、查看容器是否启动"><a href="#1、查看容器是否启动" class="headerlink" title="1、查看容器是否启动"></a>1、查看容器是否启动</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker ps</span><br></pre></td></tr></table></figure><h2 id="2、进入容器"><a href="#2、进入容器" class="headerlink" title="2、进入容器"></a>2、进入容器</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker <span class="built_in">exec</span> -it ewomail /bin/bash</span><br></pre></td></tr></table></figure><a id="more"></a><h2 id="3、修改root账号密码"><a href="#3、修改root账号密码" class="headerlink" title="3、修改root账号密码"></a>3、修改root账号密码</h2><h3 id="1-登录mysql（root默认密码：mysql）"><a href="#1-登录mysql（root默认密码：mysql）" class="headerlink" title="1).登录mysql（root默认密码：mysql）"></a>1).登录mysql（root默认密码：mysql）</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mysql -u root -p</span><br></pre></td></tr></table></figure><p>输入密码：mysql</p><h3 id="2-使用mysql数据库"><a href="#2-使用mysql数据库" class="headerlink" title="2).使用mysql数据库"></a>2).使用mysql数据库</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt;show databases;</span><br><span class="line">mysql&gt;use mysql;</span><br></pre></td></tr></table></figure><h3 id="3-设置root新密码"><a href="#3-设置root新密码" class="headerlink" title="3).设置root新密码"></a>3).设置root新密码</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt;update user set password&#x3D;password(&#39;123MYSQL456&#39;) where user&#x3D;&#39;root&#39;;</span><br></pre></td></tr></table></figure><h2 id="4、修改ewomail账号密码"><a href="#4、修改ewomail账号密码" class="headerlink" title="4、修改ewomail账号密码"></a>4、修改ewomail账号密码</h2><h3 id="1-登录mysql（ewomail默认密码：123456）"><a href="#1-登录mysql（ewomail默认密码：123456）" class="headerlink" title="1).登录mysql（ewomail默认密码：123456）"></a>1).登录mysql（ewomail默认密码：123456）</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mysql -u ewomail -p</span><br></pre></td></tr></table></figure><p>输入密码：123456</p><h3 id="2-使用mysql数据库-1"><a href="#2-使用mysql数据库-1" class="headerlink" title="2).使用mysql数据库"></a>2).使用mysql数据库</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt;show databases;</span><br><span class="line">mysql&gt;use mysql;</span><br></pre></td></tr></table></figure><h3 id="3-设置ewomail新密码"><a href="#3-设置ewomail新密码" class="headerlink" title="3).设置ewomail新密码"></a>3).设置ewomail新密码</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt;update user set password&#x3D;password(&#39;111111MYSQL&#39;) where user&#x3D;&#39;ewomail&#39;;</span><br></pre></td></tr></table></figure><h2 id="5、修改MySQL配置文件my-cnf"><a href="#5、修改MySQL配置文件my-cnf" class="headerlink" title="5、修改MySQL配置文件my.cnf"></a>5、修改MySQL配置文件my.cnf</h2><h3 id="1-进入容器"><a href="#1-进入容器" class="headerlink" title="1).进入容器"></a>1).进入容器</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker <span class="built_in">exec</span> -it ewomail /bin/bash</span><br></pre></td></tr></table></figure><h3 id="2-查找Docker内，MySQL配置文件my-cnf的位置"><a href="#2-查找Docker内，MySQL配置文件my-cnf的位置" class="headerlink" title="2).查找Docker内，MySQL配置文件my.cnf的位置"></a>2).查找Docker内，MySQL配置文件my.cnf的位置</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mysql --<span class="built_in">help</span> | grep my.cnf</span><br></pre></td></tr></table></figure><h3 id="3-查看my-cnf-文件内容"><a href="#3-查看my-cnf-文件内容" class="headerlink" title="3).查看my.cnf 文件内容"></a>3).查看my.cnf 文件内容</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vi /ewomail/mysql/etc/my.cnf</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Docker </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Docker </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Docker 搭建开源邮件服务器 EwoMail</title>
      <link href="/2022/04/05/Docker%E6%90%AD%E5%BB%BA%E5%BC%80%E6%BA%90%E9%82%AE%E4%BB%B6%E6%9C%8D%E5%8A%A1%E5%99%A8%20EwoMail/"/>
      <url>/2022/04/05/Docker%E6%90%AD%E5%BB%BA%E5%BC%80%E6%BA%90%E9%82%AE%E4%BB%B6%E6%9C%8D%E5%8A%A1%E5%99%A8%20EwoMail/</url>
      
        <content type="html"><![CDATA[<p>为什么要用 Docker 装 EwoMail，因为开始试过了，不行。直接装的话，需要 Centos系统，于是服务器直接选了Centos7.6系统。</p><p>然后装个git，直接就可以下载EwoMail。然后安装的时候发现装 EwoMail 需要干净的系统，没有安装 mysql、nginx。<br>然后发现压根不行，这些不管直接的官方系统，还是别的，反正都带了mysql的。</p><p>于是，索性直接选个带 Docker的Centos系统，用Docker来装EwoMail，因为发现有这个镜像的。</p> <a id="more"></a><h2 id="1、下载（pull）镜像"><a href="#1、下载（pull）镜像" class="headerlink" title="1、下载（pull）镜像"></a>1、下载（pull）镜像</h2><ul><li><p>1).搜索镜像</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker search ewomail</span><br></pre></td></tr></table></figure></li><li><p>2).拉取ewomail 镜像（当然可以不搜索，直接拉取下面这个镜像）</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker pull bestwu/ewomail</span><br></pre></td></tr></table></figure></li></ul><p>docker官方文档上面还有详细的介绍：<a class="link"   href="https://hub.docker.com/r/bestwu/ewomail/" >https://hub.docker.com/r/bestwu/ewomail/<i class="fas fa-external-link-alt"></i></a></p><h2 id="2、构建容器"><a href="#2、构建容器" class="headerlink" title="2、构建容器"></a>2、构建容器</h2><h3 id="1-容器配置文件"><a href="#1-容器配置文件" class="headerlink" title="1).容器配置文件"></a>1).容器配置文件</h3><p>创建 <em>docker-compose.yml</em></p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">mail:</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">bestwu/ewomail</span></span><br><span class="line">    <span class="attr">hostname:</span> <span class="string">mail.szxx.fun</span></span><br><span class="line">    <span class="attr">container_name:</span> <span class="string">ewomail</span></span><br><span class="line">    <span class="attr">restart:</span> <span class="string">always</span></span><br><span class="line">    <span class="attr">ports:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">&quot;25:25&quot;</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">&quot;143:143&quot;</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">&quot;587:587&quot;</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">&quot;993:993&quot;</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">&quot;109:109&quot;</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">&quot;110:110&quot;</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">&quot;465:465&quot;</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">&quot;995:995&quot;</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">&quot;80:80&quot;</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">&quot;8080:8080&quot;</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">&quot;3307:3306&quot;</span></span><br><span class="line">    <span class="attr">volumes:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">`pwd`/ewomail/mysql:/ewomail/mysql/data</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">`pwd`/ewomail/vmail:/ewomail/mail</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">`pwd`/ewomail/rainloop:/ewomail/www/rainloop/data</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">`pwd`/ewomail/ssl/certs/:/etc/ssl/certs/</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">`pwd`/ewomail/ssl/private/:/etc/ssl/private/</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">`pwd`/ewomail/ssl/dkim/:/ewomail/dkim/</span></span><br><span class="line">    <span class="attr">environment:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">&quot;MYSQL_ROOT_PASSWORD=123MYSQL456&quot;</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">&quot;MYSQL_MAIL_PASSWORD=111111MYSQL&quot;</span></span><br></pre></td></tr></table></figure><blockquote><p>可配置参数<br>MYSQL_ROOT_PASSWORD：mysql数据库root密码，默认：mysql<br>MYSQL_MAIL_PASSWORD：mysql数据库ewomail密码，默认：123456<br>URL：网站链接，后面不要加/线<br>WEBMAIL_URL：邮件系统链接，后面不要加/线<br>TITLE：用户邮箱标题<br>COPYRIGHT： 邮箱管理后台网站版权<br>ICP：邮箱管理后台网站备案号<br>LANGUAGE：语言选择，默认:zh_CN</p></blockquote><h3 id="2-构建容器"><a href="#2-构建容器" class="headerlink" title="2).构建容器"></a>2).构建容器</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker-compose up -d</span><br></pre></td></tr></table></figure><p>注：如果容器启动失败，发现25端口被占用，执行以下命令(被postfix进程占用)：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">systemctl stop postfix</span><br></pre></td></tr></table></figure><h2 id="3、关闭10024端口"><a href="#3、关闭10024端口" class="headerlink" title="3、关闭10024端口"></a>3、关闭10024端口</h2><h3 id="1-进入容器"><a href="#1-进入容器" class="headerlink" title="1).进入容器"></a>1).进入容器</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker <span class="built_in">exec</span> -it ewomail bash</span><br></pre></td></tr></table></figure><h3 id="2-修改-main-cf-配置文件："><a href="#2-修改-main-cf-配置文件：" class="headerlink" title="2).修改 main.cf 配置文件："></a>2).修改 main.cf 配置文件：</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vi /etc/postfix/main.cf</span><br></pre></td></tr></table></figure><p>注释以下行（在文件最后几行）：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"># content_filter &#x3D; smtp-amavis:[127.0.0.1]:10024</span><br></pre></td></tr></table></figure><h2 id="4、域名解析"><a href="#4、域名解析" class="headerlink" title="4、域名解析"></a>4、域名解析</h2><h3 id="1-设置DNS类型"><a href="#1-设置DNS类型" class="headerlink" title="1).设置DNS类型"></a>1).设置DNS类型</h3><table><thead><tr><th>类型</th><th>主机</th><th>记录值</th></tr></thead><tbody><tr><td>A</td><td>mail</td><td>127.0.0.1</td></tr><tr><td>TXT</td><td>@</td><td>v=spf1 127.0.0.1 -all</td></tr><tr><td>CNAME</td><td>imap</td><td>mail.stephen520.cn</td></tr><tr><td>CNAME</td><td>smtp</td><td>mail.stephen520.cn</td></tr><tr><td>CNAME</td><td>pop</td><td>mail.stephen520.cn</td></tr><tr><td>CNAME</td><td>pop3</td><td>mail.stephen520.cn</td></tr><tr><td>MX</td><td>@</td><td>mail.stephen520.cn | 10</td></tr></tbody></table><p><em>将 127.0.0.1改为自己的服务器 IP地址；mail.stephen520.cn改为自己的域名对应的</em></p><h3 id="2-设置DKIM"><a href="#2-设置DKIM" class="headerlink" title="2).设置DKIM"></a>2).设置DKIM</h3><p>DKIM是电子邮件验证标准，域名密钥识别邮件标准，主要是用来防止被判定为垃圾邮件。<br>每个域名都需要添加一个dkim的key，EwoMail默认安装后已自动添加主域名dkim，只需要设置好dkim的dns即可。</p><p><strong>获取DKIM KEY</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker <span class="built_in">exec</span> ewomail amavisd showkeys</span><br></pre></td></tr></table></figure><p>复制输出的信息，打开 <a class="link"   href="http://www.ewomail.com/list-20.html" >http://www.ewomail.com/list-20.html<i class="fas fa-external-link-alt"></i></a> ，整理DKIM，得到：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">v=DKIM1;p=MIGfMA0GCSqGSIb3DQEBAQUAA4GNADCBiQKBgQC+GgBqnWRl/beLZeVBcz+iu8zB1Cl/mNf2rwVgj/qz0lMo+EFrJWtKE4GBbTzGzdkqksqPZ0Vjoh/P5o0YSGSFgr3GmLidAqCAelJ/sP36Kup9vkl4hprlFb0yjtyFVUtB2GOOFpME/JQdQ8exzY4gnt5bt3CbmMMnilPtOMgD5wIDAQAB</span><br></pre></td></tr></table></figure><table><thead><tr><th>类型</th><th>主机</th><th align="left">记录值</th></tr></thead><tbody><tr><td>TXT</td><td>dkim._domainkey</td><td align="left"><code>v=DKIM1;p=MIGfMA0GCSqGSIb3DQEBAQUAA4GNADCBiQKBgQC+GgBqnWRl/beLZeVBcz+iu8zB1Cl/mNf2rwVgj/qz0lMo+EFrJWtKE4GBbTzGzdkqksqPZ0Vjoh/P5o0YSGSFgr3GmLidAqCAelJ/sP36Kup9vkl4hprlFb0yjtyFVUtB2GOOFpME/JQdQ8exzY4gnt5bt3CbmMMnilPtOMgD5wIDAQAB</code></td></tr></tbody></table><h2 id="5、配置安全组"><a href="#5、配置安全组" class="headerlink" title="5、配置安全组"></a>5、配置安全组</h2><ul><li>1).在云服务器控制台配置腾讯云<a class="link"   href="https://console.cloud.tencent.com/vpc/securitygroup?rid=1&rid=1" >安全组<i class="fas fa-external-link-alt"></i></a>，打开以上容器监听的端口，并关闭防火墙。</li><li>2).服务器【防火墙】添加规则，允许端口，添加<strong>允许3307端口（映射的MySQL端口）</strong>。</li></ul><h2 id="6、完成"><a href="#6、完成" class="headerlink" title="6、完成"></a>6、完成</h2><p><em>以下将 127.0.0.1 改为自己的服务器 IP地址</em></p><p><strong>邮箱管理后台</strong>：<br><a class="link"   href="http://127.0.0.1:8080/" >http://127.0.0.1:8080/<i class="fas fa-external-link-alt"></i></a><br>默认账号：admin/ewomail123</p><p><strong>Rainloop 管理端</strong>：<br><a class="link"   href="http://127.0.0.1/?admin" >http://127.0.0.1/?admin<i class="fas fa-external-link-alt"></i></a><br>默认账号：admin/12345</p><p><strong>Rainloop用户端（前端）</strong>：<br><a class="link"   href="http://127.0.0.1/" >http://127.0.0.1/<i class="fas fa-external-link-alt"></i></a></p><h2 id="7、自定义证书"><a href="#7、自定义证书" class="headerlink" title="7、自定义证书"></a>7、自定义证书</h2><p><strong>映射路径</strong></p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">/etc/ssl/certs/dovecot.pem</span></span><br><span class="line"><span class="string">/etc/ssl/private/dovecot.pem</span></span><br><span class="line"><span class="string">/ewomail/dkim/mail.pem</span></span><br></pre></td></tr></table></figure><h2 id="8、容器相关命令"><a href="#8、容器相关命令" class="headerlink" title="8、容器相关命令"></a>8、容器相关命令</h2><p>查看docker容器是否启动：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">docker ps</span><br><span class="line">docker ps -a</span><br></pre></td></tr></table></figure><p>进入容器：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker <span class="built_in">exec</span> -it ewomail /bin/bash</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Docker </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
            <tag> Docker </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Python 对图片进行文字识别</title>
      <link href="/2021/03/13/Python%E5%AF%B9%E5%9B%BE%E7%89%87%E8%BF%9B%E8%A1%8C%E6%96%87%E5%AD%97%E8%AF%86%E5%88%AB/"/>
      <url>/2021/03/13/Python%E5%AF%B9%E5%9B%BE%E7%89%87%E8%BF%9B%E8%A1%8C%E6%96%87%E5%AD%97%E8%AF%86%E5%88%AB/</url>
      
        <content type="html"><![CDATA[<p>Python 文字识别，有个OCR 库——Tesseract，看网上评论说识别出来不精准，准确率不行。还是用百度的文字识别API精准得多。使用也很简单。</p><a id="more"></a><h1 id="一、在百度创建文字识别的应用"><a href="#一、在百度创建文字识别的应用" class="headerlink" title="一、在百度创建文字识别的应用"></a>一、在百度创建文字识别的应用</h1><h2 id="1-注册登录百度账号"><a href="#1-注册登录百度账号" class="headerlink" title="1.注册登录百度账号"></a>1.注册登录百度账号</h2><p>没有账号的，就注册一下。</p><h2 id="2-创建文字识别应用"><a href="#2-创建文字识别应用" class="headerlink" title="2.创建文字识别应用"></a>2.创建文字识别应用</h2><p>网址：<a class="link"   href="https://console.bce.baidu.com/ai/#/ai/ocr/overview/index" >https://console.bce.baidu.com/ai/#/ai/ocr/overview/index<i class="fas fa-external-link-alt"></i></a></p><ul><li>应用名称：自己取，比如：OCR识别；</li><li>接口选择：默认已经勾选<strong>文字识别</strong>了；</li><li>文字文字识别包名：不需要（默认）</li><li>应用归属：个人</li><li>应用描述：自己写</li></ul><p>然后就得到了这个应用的：<strong>AppID</strong>，<strong>API Key</strong>，<strong>Secret Key</strong>。（后面需要用到）</p><h1 id="二、Python代码实现"><a href="#二、Python代码实现" class="headerlink" title="二、Python代码实现"></a>二、Python代码实现</h1><h2 id="1-安装百度的OCR库"><a href="#1-安装百度的OCR库" class="headerlink" title="1.安装百度的OCR库"></a>1.安装百度的OCR库</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install baidu-aip</span><br></pre></td></tr></table></figure><p>这上项目在Github上地址：<a class="link"   href="https://github.com/Baidu-AIP/python-sdk" >https://github.com/Baidu-AIP/python-sdk<i class="fas fa-external-link-alt"></i></a></p><p>这个库的目录结构：<br>├── aip                   // SDK目录<br>    │   ├── <strong>init</strong>.py       // 导出类<br>    │   ├── base.py           // aip基类<br>    │   ├── speech.py         // 语音<br>    │   ├── face.py           // 人脸<br>    │   ├── ocr.py            // OCR<br>    │   ├── nlp.py            // NLP<br>    │   ├── kg.py             // 知识图谱<br>    │   ├── imagecensor.py    // 图像审核<br>    │   ├── imageclassify.py  // 图像识别<br>    │   └── imagesearch.py    // 图像搜索<br>    └── setup.py              //setuptools安装</p><p>文字识别OCR，就用到<code>ocr.py</code>这个。</p><h2 id="2-文字识别应用的文档"><a href="#2-文字识别应用的文档" class="headerlink" title="2.文字识别应用的文档"></a>2.文字识别应用的文档</h2><p>官网：<a class="link"   href="https://ai.baidu.com/ai-doc/OCR/wkibizyjk" >https://ai.baidu.com/ai-doc/OCR/wkibizyjk<i class="fas fa-external-link-alt"></i></a></p><p>HTTP-SDK文档下面有分Java语言、Python语言、PHP语言、C++语言、C#语言、Node.js语言、Android SDK、IOS SDK。反正各种语言都有，这里用的是Python。</p><p>文档中 <strong>快速入门</strong>、<strong>接口说明</strong> 反正都写的很清楚了，看看就会用了。</p><h2 id="3-代码实例"><a href="#3-代码实例" class="headerlink" title="3.代码实例"></a>3.代码实例</h2><p>主要看一下调用识别方法后，返回的示例有些什么，可以自己print出来看一下。</p><p>返回示例：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line">HTTP/<span class="number">1.1</span> <span class="number">200</span> OK</span><br><span class="line">x-bce-request-<span class="built_in">id</span>: 73c4e74c-<span class="number">3101</span>-4a00-bf44-fe246959c05e</span><br><span class="line">Cache-Control: no-cache</span><br><span class="line">Server: BWS</span><br><span class="line">Date: Tue, <span class="number">18</span> Oct <span class="number">2016</span> 02:<span class="number">21</span>:01 GMT</span><br><span class="line">Content-<span class="type">Type</span>: application/json;charset=UTF-<span class="number">8</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="string">&quot;log_id&quot;</span>: <span class="number">3523983603</span>,</span><br><span class="line"><span class="string">&quot;direction&quot;</span>: <span class="number">0</span>, //detect_direction=true时存在</span><br><span class="line"><span class="string">&quot;words_result_num&quot;</span>: <span class="number">2</span>,</span><br><span class="line"><span class="string">&quot;words_result&quot;</span>: [</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="string">&quot;location&quot;</span>: &#123;</span><br><span class="line">            <span class="string">&quot;left&quot;</span>: <span class="number">35</span>,</span><br><span class="line">            <span class="string">&quot;top&quot;</span>: <span class="number">53</span>,</span><br><span class="line">            <span class="string">&quot;width&quot;</span>: <span class="number">193</span>,</span><br><span class="line">            <span class="string">&quot;height&quot;</span>: <span class="number">109</span></span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="string">&quot;words&quot;</span>: <span class="string">&quot;感动&quot;</span>,</span><br><span class="line">        <span class="string">&quot;chars&quot;</span>: [    //recognize_granularity=small时存在</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="string">&quot;location&quot;</span>: &#123;</span><br><span class="line">                    <span class="string">&quot;left&quot;</span>: <span class="number">56</span>,</span><br><span class="line">                    <span class="string">&quot;top&quot;</span>: <span class="number">65</span>,</span><br><span class="line">                    <span class="string">&quot;width&quot;</span>: <span class="number">69</span>,</span><br><span class="line">                    <span class="string">&quot;height&quot;</span>: <span class="number">88</span></span><br><span class="line">                &#125;,</span><br><span class="line">                <span class="string">&quot;char&quot;</span>: <span class="string">&quot;感&quot;</span></span><br><span class="line">            &#125;,</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="string">&quot;location&quot;</span>: &#123;</span><br><span class="line">                    <span class="string">&quot;left&quot;</span>: <span class="number">140</span>,</span><br><span class="line">                    <span class="string">&quot;top&quot;</span>: <span class="number">65</span>,</span><br><span class="line">                    <span class="string">&quot;width&quot;</span>: <span class="number">70</span>,</span><br><span class="line">                    <span class="string">&quot;height&quot;</span>: <span class="number">88</span></span><br><span class="line">                &#125;,</span><br><span class="line">                <span class="string">&quot;char&quot;</span>: <span class="string">&quot;动&quot;</span></span><br><span class="line">            &#125;</span><br><span class="line">        ]</span><br><span class="line">    &#125;</span><br><span class="line">    ...</span><br><span class="line">]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>我们需要的文字内容就在：words_result 中的 <strong>words</strong> 内容。</p><h3 id="3-1-识别单张本地图片"><a href="#3-1-识别单张本地图片" class="headerlink" title="3-1.识别单张本地图片"></a>3-1.识别单张本地图片</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> aip <span class="keyword">import</span> AipOcr</span><br><span class="line"></span><br><span class="line"><span class="comment"># 读取图片</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_file_content</span>(<span class="params">pic_file</span>):</span></span><br><span class="line">    <span class="keyword">with</span> <span class="built_in">open</span>(pic_file, <span class="string">&#x27;rb&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">        <span class="keyword">return</span> f.read()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 本地单张图片文字识别</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">pic_ocr</span>(<span class="params">pic_file</span>):</span></span><br><span class="line">    app_id = <span class="string">&#x27;2******0&#x27;</span> <span class="comment"># 用自己的AppID</span></span><br><span class="line">    app_key = <span class="string">&#x27;6************a&#x27;</span></span><br><span class="line">    secret_key = <span class="string">&#x27;z************3&#x27;</span></span><br><span class="line"></span><br><span class="line">    client = AipOcr(app_id, app_key, secret_key)</span><br><span class="line"></span><br><span class="line">    image = get_file_content(pic_file)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 调用 通用文字识别（高精度版），提取图片中的文字内容</span></span><br><span class="line">    text = client.basicAccurate(image)</span><br><span class="line"></span><br><span class="line">    result = text[<span class="string">&#x27;words_result&#x27;</span>]</span><br><span class="line">    <span class="comment"># print(result) # result是一个列表，每一项是一个Dictionary，key为&#x27;words&#x27;</span></span><br><span class="line">    <span class="keyword">for</span> line <span class="keyword">in</span> result:</span><br><span class="line">        <span class="built_in">print</span>(line[<span class="string">&#x27;words&#x27;</span>])</span><br><span class="line"></span><br><span class="line"><span class="comment"># 本地单张图片文字识别</span></span><br><span class="line">pic_ocr(<span class="string">&#x27;ocr_test.jpg&#x27;</span>)</span><br></pre></td></tr></table></figure><p>最后结果直接print打印出来了，如果要写入文档就自己改成写入文档的方法就行。</p><h3 id="3-2-识别网络图片"><a href="#3-2-识别网络图片" class="headerlink" title="3-2.识别网络图片"></a>3-2.识别网络图片</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 网络图片文字识别</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">url_pic_ocr</span>(<span class="params">pic_url</span>):</span></span><br><span class="line">    app_id = <span class="string">&#x27;2******0&#x27;</span> <span class="comment"># 用自己的AppID</span></span><br><span class="line">    app_key = <span class="string">&#x27;6************a&#x27;</span></span><br><span class="line">    secret_key = <span class="string">&#x27;z************3&#x27;</span></span><br><span class="line"></span><br><span class="line">    client = AipOcr(app_id, app_key, secret_key)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 调用 通用文字识别（含位置信息版），提取图片中的文字内容</span></span><br><span class="line">    text = client.generalUrl(pic_url)</span><br><span class="line"></span><br><span class="line">    result = text[<span class="string">&#x27;words_result&#x27;</span>]</span><br><span class="line">    <span class="comment"># print(result)</span></span><br><span class="line">    <span class="keyword">for</span> line <span class="keyword">in</span> result:</span><br><span class="line">        <span class="built_in">print</span>(line[<span class="string">&#x27;words&#x27;</span>])</span><br><span class="line"></span><br><span class="line"><span class="comment"># 网络图片文字识别</span></span><br><span class="line">url_pic_ocr(<span class="string">r&#x27;http://n.sinaimg.cn/henan/transform/20160114/6sMt-fxnrahr8267165.jpg&#x27;</span>)</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Python selenium 切换到新的窗口方法</title>
      <link href="/2021/02/19/Python-selenium3-%E5%88%87%E6%8D%A2%E5%88%B0%E6%96%B0%E7%9A%84%E7%AA%97%E5%8F%A3%E6%96%B9%E6%B3%95/"/>
      <url>/2021/02/19/Python-selenium3-%E5%88%87%E6%8D%A2%E5%88%B0%E6%96%B0%E7%9A%84%E7%AA%97%E5%8F%A3%E6%96%B9%E6%B3%95/</url>
      
        <content type="html"><![CDATA[<p>Python 用selenium（文章代码中使用selenium3版本） 在网页上操作的时候，我们经常遇到，点击一个链接 或者 按钮，就会打开一个新窗口 。</p><p>然后会出现一个问题，新的窗口虽然打开了，但是 WebDriver对象对应的还是老窗口，自动化操作也还是在老窗口进行。那就无法在新窗口上进行自动化操作了。</p><a id="more"></a><h2 id="重现问题"><a href="#重现问题" class="headerlink" title="重现问题"></a>重现问题</h2><p>举个例子，比如我要打开下面代码中的 site的网址，然后点击最上面一排的【基金净值】，会打开一个新的网页。但我们通过打印 webdriver的标题(title)，就知道还是在原来的老窗口。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> selenium <span class="keyword">import</span> webdriver</span><br><span class="line"></span><br><span class="line">driver_path = <span class="string">r&#x27;F:\python\chromedriver.exe&#x27;</span></span><br><span class="line">option = webdriver.ChromeOptions()</span><br><span class="line">option.add_argument(<span class="string">&quot;headless&quot;</span>)</span><br><span class="line">wd = webdriver.Chrome(driver_path, options=option)</span><br><span class="line">wd.implicitly_wait(<span class="number">10</span>)</span><br><span class="line"></span><br><span class="line">site = <span class="string">&#x27;https://fund.eastmoney.com/&#x27;</span></span><br><span class="line">wd.get(site)</span><br><span class="line"></span><br><span class="line">fund_element = wd.find_element_by_css_selector(<span class="string">&#x27;.wrapper_min .jz a&#x27;</span>)</span><br><span class="line">element_name = fund_element.text</span><br><span class="line">element_site = fund_element.get_attribute(<span class="string">&#x27;href&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;当前窗口标题：&#x27;</span>, wd.title)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;当前窗口网址：&#x27;</span>, wd.current_url)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;点击的链接为：&#x27;</span>, element_site)</span><br><span class="line"></span><br><span class="line">fund_element.click()</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;当前窗口标题：&#x27;</span>, wd.title)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;当前窗口网址：&#x27;</span>, wd.current_url) <span class="comment">#网址后面 # 后面的一串忽略</span></span><br></pre></td></tr></table></figure><p>运行后的结果是：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">前窗口标题： 天天基金网(1234567.com.cn) --首批独立基金销售机构-- 东方财富网旗下基金平台!</span><br><span class="line">当前窗口网址： https://fund.eastmoney.com/</span><br><span class="line">点击的链接为： http://fund.eastmoney.com/fund.html</span><br><span class="line">当前窗口标题： 天天基金网(1234567.com.cn) --首批独立基金销售机构-- 东方财富网旗下基金平台!</span><br><span class="line">当前窗口网址： https://fund.eastmoney.com/</span><br></pre></td></tr></table></figure><h2 id="解决方法"><a href="#解决方法" class="headerlink" title="解决方法"></a>解决方法</h2><p>可以使用Webdriver对象的switch_to属性的 window方法：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">driver.switch_to.window(handle)</span><br></pre></td></tr></table></figure><p>其中，参数handle就是句柄，可以想象成对应网页窗口的一个ID。<br>WebDriver对象有window_handles 属性，这是一个列表对象， 里面包括了当前浏览器里面所有的窗口句柄。</p><p><strong>解决思路</strong>：</p><ul><li>我们可以通过循环这个handles列表，一个个handle对应的窗口找过去；</li><li>当找到handle对应的窗口的current_url属性 和我们点击的链接url相同的时候，就找到了我们需要的窗口的handle，然后就跳出循环。</li></ul><p>下面这段代码就放在 <code>fund_element.click()</code> 之后：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 切换到新链接的窗口</span></span><br><span class="line"><span class="keyword">for</span> handle <span class="keyword">in</span> wd.window_handles:</span><br><span class="line">    wd.switch_to.window(handle) <span class="comment"># 先切换到新的窗口</span></span><br><span class="line">    <span class="keyword">if</span>(wd.current_url == element_site):</span><br><span class="line">        <span class="keyword">break</span></span><br></pre></td></tr></table></figure><p>完整代码如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> selenium <span class="keyword">import</span> webdriver</span><br><span class="line"></span><br><span class="line">driver_path = <span class="string">r&#x27;F:\python\chromedriver.exe&#x27;</span></span><br><span class="line">option = webdriver.ChromeOptions()</span><br><span class="line">option.add_argument(<span class="string">&quot;headless&quot;</span>)</span><br><span class="line">wd = webdriver.Chrome(driver_path, options=option)</span><br><span class="line">wd.implicitly_wait(<span class="number">10</span>)</span><br><span class="line"></span><br><span class="line">site = <span class="string">&#x27;https://fund.eastmoney.com/&#x27;</span></span><br><span class="line">wd.get(site)</span><br><span class="line"></span><br><span class="line">fund_element = wd.find_element_by_css_selector(<span class="string">&#x27;.wrapper_min .jz a&#x27;</span>)</span><br><span class="line">element_name = fund_element.text</span><br><span class="line">element_site = fund_element.get_attribute(<span class="string">&#x27;href&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;当前窗口标题：&#x27;</span>, wd.title)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;当前窗口网址：&#x27;</span>, wd.current_url)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;点击的链接为：&#x27;</span>, element_site)</span><br><span class="line"></span><br><span class="line">fund_element.click()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 切换到新链接的窗口</span></span><br><span class="line"><span class="keyword">for</span> handle <span class="keyword">in</span> wd.window_handles:</span><br><span class="line">    wd.switch_to.window(handle)</span><br><span class="line">    <span class="keyword">if</span>(wd.current_url == element_site):</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;当前窗口标题：&#x27;</span>, wd.title)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;当前窗口网址：&#x27;</span>, wd.current_url)</span><br></pre></td></tr></table></figure><p>运行结果如下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">当前窗口标题： 天天基金网(1234567.com.cn) --首批独立基金销售机构-- 东方财富网旗下基金平台!</span><br><span class="line">当前窗口网址： https://fund.eastmoney.com/</span><br><span class="line">点击的链接为： http://fund.eastmoney.com/fund.html</span><br><span class="line">当前窗口标题： 每日开放式基金净值表 _ 天天基金网</span><br><span class="line">当前窗口网址： http://fund.eastmoney.com/fund.html<span class="comment">#os_0;isall_0;ft_;pt_1</span></span><br></pre></td></tr></table></figure><p>当前窗口网址后面 # 符号后面的一串可以忽略。</p>]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
            <tag> Selenium </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Python openpyxl.load_workbook excel file error 解决方法</title>
      <link href="/2021/02/17/Python-openpyxl.load_workbook-excel-file-error/"/>
      <url>/2021/02/17/Python-openpyxl.load_workbook-excel-file-error/</url>
      
        <content type="html"><![CDATA[<p>这个错误是在我频繁load excel文件，写入内容的时候出现的，循环要写入上千页的内容，每页写一次，然后写了上百次之后，就每写入几次就报这个错了。</p><p>windows10 的环境有这个问题，在 linux(ubuntu) 上运行同样的代码并没有这个问题。</p><a id="more"></a><h2 id="错误提示"><a href="#错误提示" class="headerlink" title="错误提示"></a>错误提示</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">Traceback (most recent call last):</span><br><span class="line">  File <span class="string">&quot;g:\SynologyDrive\Python\code2\funds\open_funds_details.py&quot;</span>, line 54, <span class="keyword">in</span> &lt;module&gt;</span><br><span class="line">    main()</span><br><span class="line">  File <span class="string">&quot;g:\SynologyDrive\Python\code2\funds\open_funds_details.py&quot;</span>, line 49, <span class="keyword">in</span> main</span><br><span class="line">    one_open_fund.insert_one_fund_into_excel(ex_details_file, data_list, position_sheet, info_sheet)</span><br><span class="line">  File <span class="string">&quot;g:\SynologyDrive\Python\code2\funds\one_open_fund.py&quot;</span>, line 203, <span class="keyword">in</span> insert_one_fund_into_excel</span><br><span class="line">    book = openpyxl.load_workbook(ex_file)</span><br><span class="line">  File <span class="string">&quot;C:\Python39\lib\site-packages\openpyxl\reader\excel.py&quot;</span>, line 315, <span class="keyword">in</span> load_workbook</span><br><span class="line">    reader = ExcelReader(filename, read_only, keep_vba,</span><br><span class="line">  File <span class="string">&quot;C:\Python39\lib\site-packages\openpyxl\reader\excel.py&quot;</span>, line 124, <span class="keyword">in</span> __init__</span><br><span class="line">    self.archive = _validate_archive(fn)</span><br><span class="line">  File <span class="string">&quot;C:\Python39\lib\site-packages\openpyxl\reader\excel.py&quot;</span>, line 96, <span class="keyword">in</span> _validate_archive</span><br><span class="line">    archive = ZipFile(filename, <span class="string">&#x27;r&#x27;</span>)</span><br><span class="line">  File <span class="string">&quot;C:\Python39\lib\zipfile.py&quot;</span>, line 1257, <span class="keyword">in</span> __init__</span><br><span class="line">    self._RealGetContents()</span><br><span class="line">  File <span class="string">&quot;C:\Python39\lib\zipfile.py&quot;</span>, line 1324, <span class="keyword">in</span> _RealGetContents</span><br><span class="line">    raise BadZipFile(<span class="string">&quot;File is not a zip file&quot;</span>)</span><br><span class="line">zipfile.BadZipFile: File is not a zip file</span><br></pre></td></tr></table></figure><p>这个错误主要是由于下面这行代码引起的：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">book = openpyxl.load_workbook(ex_file)</span><br></pre></td></tr></table></figure><p>网上查了下，打开excel 文件时，改用安全的打开方式就行了。<br>用安全的打开、关闭方法就不会有这些小问题了。</p><p><strong>安全的打开Excel</strong>：</p><ul><li>如果已经存在原文件，就直接load；</li><li>如果不存在，就新建workbook。</li></ul><p><strong>安全的保存Excel</strong>：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">book.save(ex_file) <span class="comment"># 写入内容，保存文件 save</span></span><br><span class="line">book.close()  <span class="comment"># 不需要写入内容，打开过文件要 close</span></span><br></pre></td></tr></table></figure><h2 id="解决方法"><a href="#解决方法" class="headerlink" title="解决方法"></a>解决方法</h2><p>把原来那一句代码改成以下代码：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> openpyxl</span><br><span class="line"><span class="keyword">if</span> os.path.exists(ex_file):</span><br><span class="line">    book = openpyxl.load_workbook(ex_file)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    book = openpyxl.Workbook()</span><br></pre></td></tr></table></figure><p>注：我这里的ex_file 是绝对路径，比如：<code>G:\Drive\funds\test1.xlsx</code></p>]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
            <tag> Excel </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SyntaxError EOL while scanning string literal</title>
      <link href="/2021/02/13/SyntaxError-EOL-while-scanning-string-literal/"/>
      <url>/2021/02/13/SyntaxError-EOL-while-scanning-string-literal/</url>
      
        <content type="html"><![CDATA[<h2 id="错误提示"><a href="#错误提示" class="headerlink" title="错误提示"></a>错误提示</h2><p>python中字符串的最后一个字符是斜杠会导致出错：<br>SyntaxError: EOL while scanning string literal</p><a id="more"></a><p>报错的提示里也有提示是src这个字符串后面有 \ 的原因。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">File <span class="string">&quot;g:\SynologyDrive\Python\code2\config.py&quot;</span>, line 13</span><br><span class="line">    src = r<span class="string">&#x27;G:\SynologyDrive\ubuntu\ETF\&#x27;</span></span><br><span class="line">                                        ^</span><br></pre></td></tr></table></figure><h2 id="解决方法"><a href="#解决方法" class="headerlink" title="解决方法"></a>解决方法</h2><p>把代码改成以下就行了：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">file = <span class="string">&#x27;a.xlsx&#x27;</span></span><br><span class="line">src = <span class="string">r&#x27;G:\SynologyDrive\ubuntu\ETF&#x27;</span></span><br><span class="line">src_file = src + <span class="string">&#x27;\\&#x27;</span> + file</span><br><span class="line"><span class="built_in">print</span>(src_file)</span><br></pre></td></tr></table></figure><p>路径与文件名中间用 \ 拼接 一下就行了。</p>]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Linux 定时执行 python脚本</title>
      <link href="/2021/02/08/Linux%E5%AE%9A%E6%97%B6%E6%89%A7%E8%A1%8Cpython%E8%84%9A%E6%9C%AC/"/>
      <url>/2021/02/08/Linux%E5%AE%9A%E6%97%B6%E6%89%A7%E8%A1%8Cpython%E8%84%9A%E6%9C%AC/</url>
      
        <content type="html"><![CDATA[<p>Linux系统里有个定时任务的管理器 crontab，所以只需要编辑下定时任务，再重启下定时任务就行了。</p><p>因为是一台Ubuntu的服务器，一直开机的状态，所以开着定时任务就等于一直开着了。</p><p>CentOS如果没带的，用以下命令安装一下，一样的：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum install crontabs</span><br></pre></td></tr></table></figure><a id="more"></a><h2 id="一、crontab命令格式详解"><a href="#一、crontab命令格式详解" class="headerlink" title="一、crontab命令格式详解"></a>一、crontab命令格式详解</h2><h3 id="1-命令格式："><a href="#1-命令格式：" class="headerlink" title="1.命令格式："></a>1.命令格式：</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">m h dom mon dow <span class="built_in">command</span></span><br></pre></td></tr></table></figure><p>以上是缩写，全拼是：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">minute(m), hour(h), day of month(dom), month(mon), day of week(dow), <span class="built_in">command</span></span><br></pre></td></tr></table></figure><p><strong>含义</strong>：</p><ul><li>m: 每个小时的第几分钟执行，0-59</li><li>h: 第天的第几个小时执行，0-23</li><li>dom: 每月的第几天执行，1-31</li><li>mon: 每年的第几个月执行，1-12</li><li>dow: 每周的第几天执行，0-6（0表示星期天）</li><li>command: 定时执行的命令</li></ul><p><strong>其它</strong>：</p><ul><li>*： 表示任何时间</li><li>*/2: 表示每隔2分钟</li><li>-：表示区间，比如1-3</li><li>,：表示区间不连续，比如1,3,6</li></ul><h3 id="2-命令举例"><a href="#2-命令举例" class="headerlink" title="2.命令举例"></a>2.命令举例</h3><table><thead><tr><th>命令</th><th>含义</th><th>举例</th></tr></thead><tbody><tr><td>*  * * * * ifconfig</td><td>每天第一分钟都在执行ifconfig 命令</td><td>—</td></tr><tr><td>1 * * * * ifconfig</td><td>每天每个小时的第1分钟都在执行ifconfig 命令</td><td>01:01, 02:01, 03:01, 04:01……</td></tr><tr><td>0 9 * * * ifconfig</td><td>每天 9:00 执行ifconfig 命令</td><td>—</td></tr><tr><td>0 9 10 * * ifconfig</td><td>每个月的10号 9:00 执行ifconfig 命令</td><td>—</td></tr><tr><td>0 9 * * 1,2 ifconfig</td><td>每周一、周二 9:00 执行ifconfig 命令</td><td>—</td></tr></tbody></table><h2 id="二、编辑定时任务crontab："><a href="#二、编辑定时任务crontab：" class="headerlink" title="二、编辑定时任务crontab："></a>二、编辑定时任务crontab：</h2><p>运行以下命令进入编辑：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">crontab -e</span><br></pre></td></tr></table></figure><p>第一次输入这个命令，会让你选择一下编辑软件，有4种，就直接输入 2 回车，选择用 vim。</p><ol><li>/bin/nano</li><li>/usr/bin/vim.basic</li><li>/usr/bin/vim.tiny</li><li>/bin/ed</li></ol><p>vim命令如果没用过不会用，也不用慌，会几个简单的命令就行了。上一篇文章 <a href="/2021/02/08/Linux%20vim%E5%91%BD%E4%BB%A4%E7%AE%80%E5%8D%95%E4%BD%BF%E7%94%A8/" title="Linux vim&#x2F;vi 命令简单使用">Linux vim&#x2F;vi 命令简单使用</a> 有介绍。</p><p>打开了编辑定时任务后，里面有一堆前面带 # 的行，这些都是注释内容，不用管，其实也有关于定时任务设置的示例，有这么2行：</p><blockquote><p># at 5 a.m every week with:<br># 0 5 * * 1 tar -zcf /var/backups/home.tgz /home/</p></blockquote><p>表示第2行的定时任务的意思是：在每周一的5:00 am 执行 tar 这条命令。</p><p>最后一行是命令格式：</p><blockquote><p># m h dom mon dow command</p></blockquote><p>在最下面添加自己的任务就可以了。</p><h2 id="三、定时执行python-脚本"><a href="#三、定时执行python-脚本" class="headerlink" title="三、定时执行python 脚本"></a>三、定时执行python 脚本</h2><p>注意，这里在定时任务中一定要用绝对路径。</p><p>比如平常运行 pythone脚本，因为添加到PATH环境变量中了，所以直接运行以下命令就可以了。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python3 test.py</span><br></pre></td></tr></table></figure><h3 id="1-python路径"><a href="#1-python路径" class="headerlink" title="1.python路径"></a>1.python路径</h3><p>所以首先要找到python3的路径，通过which命令就可以：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">which</span> python3</span><br></pre></td></tr></table></figure><p>得到结果比如是：<code>/usr/bin/python3</code></p><h3 id="2-python文件的绝对路径"><a href="#2-python文件的绝对路径" class="headerlink" title="2.python文件的绝对路径"></a>2.python文件的绝对路径</h3><p>比如我的 test.py 存放在 <code>/home/ubuntu/python/code/</code> 中。</p><p>如果你不知道当前目录是什么，执行 <code>pwd</code> 命令就可以得到。</p><p>最后想把 test.py 定时运行输出的内容存放到 log文件中：<code>/home/ubuntu/tmp/test.log</code></p><p>所以，最终添加的这条定时任务记录是：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">0 17 * * * /usr/bin/python3 /home/ubuntu/python/code/test.py &gt;&gt; /home/ubuntu/tmp/test.log</span><br></pre></td></tr></table></figure><p>表示：每天17点将执行 test.py，把输出内容打印到 test.log文件中。</p><h2 id="四、小结"><a href="#四、小结" class="headerlink" title="四、小结"></a>四、小结</h2><p>一共3步。</p><p>1.设计好自己想要执行的 python任务</p><p>比如：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">0 17 * * * /usr/bin/python3 /home/ubuntu/python/code/test.py &gt;&gt; /home/ubuntu/tmp/test.log</span><br></pre></td></tr></table></figure><p>2.打开定时任务编辑，添加任务记录</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">crontab -e</span><br></pre></td></tr></table></figure><p>3.重启 cron服务</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo service cron restart</span><br></pre></td></tr></table></figure><p>PS.查看定时任务内容（非编辑状态）：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">crontab -l</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
            <tag> Python </tag>
            
            <tag> Ubuntu </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Linux 修改文件权限</title>
      <link href="/2021/02/08/Linux%20%E4%BF%AE%E6%94%B9%E6%96%87%E4%BB%B6%E6%9D%83%E9%99%90/"/>
      <url>/2021/02/08/Linux%20%E4%BF%AE%E6%94%B9%E6%96%87%E4%BB%B6%E6%9D%83%E9%99%90/</url>
      
        <content type="html"><![CDATA[<p>用 Linux系统的时候，经常会碰到文件权限的问题，比如没执行权限，没写入权限等。</p><a id="more"></a><h2 id="Linux下对于文件的权限"><a href="#Linux下对于文件的权限" class="headerlink" title="Linux下对于文件的权限"></a>Linux下对于文件的权限</h2><p>有4种：</p><ul><li>read</li><li>write</li><li>execute</li><li>none</li></ul><p>例如：运行命令 <code>ls -l</code> 后</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">-rw-r--r-- 1 z------07 member   32 Jun 26 20:35 Readme.txt</span><br><span class="line">-rw-r--r-- 1 z------07 member8 Jun 26 21:13 example.txt</span><br><span class="line">drwxr-xr-x 2 z------07 member 4096 Jun 26 20:40 linux</span><br></pre></td></tr></table></figure><p>第1位：- 代表文件，d 代表目录，l 代表链接。<br>后9位中：</p><ul><li>r 代表read，可读</li><li>w 代表write，可写入</li><li>x 代表execute，可执行</li><li>-代表none</li></ul><p>这里就代表什么样的人对文件有什么样的权限。</p><p>以 -rw-r–r– 1 z——7 member   32 Jun 26 20:35 Readme.txt 为例：</p><ul><li>第2-4位(rw-)表示：文件所有者，能读写，不能执行</li><li>之后3位(r–)表示：文件所有者同组的其它人，只读</li><li>最后3位(r–)表示：其它人，只读</li></ul><h2 id="修改文件权限方法"><a href="#修改文件权限方法" class="headerlink" title="修改文件权限方法"></a>修改文件权限方法</h2><h4 id="1、普通修改文件权限-模式"><a href="#1、普通修改文件权限-模式" class="headerlink" title="1、普通修改文件权限(模式)"></a>1、普通修改文件权限(模式)</h4><ul><li><code>chmod +x Readme.txt</code>  表示给Readme.txt文件添加了可执行(x)权限</li><li><code>chmod -x Readme.txt</code> 给Readme.txt文件除去了可执行(x)权限</li><li><code>chmod u+x Readme.txt</code> 给Readme.txt文件的当前用户(user)添加了可执行(x)权限</li><li><code>chmod g+x Readme.txt</code> 给Readme.txt文件的当前用户同组其它人(group)添加了可执行(x)权限</li><li>`chmod o+x Readme.tx``t 给Readme.txt文件的其它用户(others)添加了可执行(x)权限</li></ul><h4 id="2、专业方法"><a href="#2、专业方法" class="headerlink" title="2、专业方法"></a>2、专业方法</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">chmod 755 Readme.txt</span><br></pre></td></tr></table></figure><p>linux/unix内部用9位来代表权限<br>1表示有权限，0表示没权限</p><p>例如rw-r–r–，即为110100100，三位三位读后就是644。则<br>如运行<code>chmod 644 Readme.txt</code>，将能改回原来权限状态</p><h4 id="3、修改文件所有者"><a href="#3、修改文件所有者" class="headerlink" title="3、修改文件所有者"></a>3、修改文件所有者</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">chown testuser Readme.txt</span><br></pre></td></tr></table></figure><p>Readme.txt文件的所有者就变为testuser</p>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Linux vim/vi 命令简单使用</title>
      <link href="/2021/02/08/Linux%20vim%E5%91%BD%E4%BB%A4%E7%AE%80%E5%8D%95%E4%BD%BF%E7%94%A8/"/>
      <url>/2021/02/08/Linux%20vim%E5%91%BD%E4%BB%A4%E7%AE%80%E5%8D%95%E4%BD%BF%E7%94%A8/</url>
      
        <content type="html"><![CDATA[<p>vim平常如果很少使用，偶尔用用的，我觉得掌握这点就够用了。</p><p>vim有两种模式，一种是命令模式，另一种是编辑模式。</p><p>在命令模式下，只能输入命令操作，并不能输入内容；<br>在编辑模式下，则能正常编辑内容。</p><a id="more"></a><h2 id="1-两种模式切换"><a href="#1-两种模式切换" class="headerlink" title="1.两种模式切换"></a>1.两种模式切换</h2><p>例如 运行 vim 1.txt 后，即进入了命令模式，此刻不能输入内容。</p><ul><li>当按下 i 键后，即进入编辑模式，可输入内容。</li><li>再按 Esc 键后，退出编辑模式，回到命令模式。</li></ul><p>当进入编辑模式后，页面最下方会有显示 – INSERT – 的提示，表示当前是编辑模式。</p><h2 id="2-保存文件"><a href="#2-保存文件" class="headerlink" title="2.保存文件"></a>2.保存文件</h2><p>需要在命令模式下输入 <code>:wq</code> 后回车即保存退出。</p><table><thead><tr><th align="left">命令</th><th>功能</th></tr></thead><tbody><tr><td align="left">:w</td><td>保存</td></tr><tr><td align="left">:wq</td><td>保存并退出</td></tr><tr><td align="left">:q</td><td>不保存退出</td></tr></tbody></table><h2 id="3-命令-功能"><a href="#3-命令-功能" class="headerlink" title="3.命令 功能"></a>3.命令 功能</h2><table><thead><tr><th align="left">命令</th><th>功能</th></tr></thead><tbody><tr><td align="left">o</td><td>插入一行</td></tr><tr><td align="left">dd</td><td>删除一行</td></tr><tr><td align="left">dw</td><td>删除选中字母开始的第一个字母</td></tr></tbody></table><h2 id="4-小结"><a href="#4-小结" class="headerlink" title="4.小结"></a>4.小结</h2><p>简单的使用，会这么4条就行了。</p><ul><li>1.用vim 打开文件后，是命令模式；</li><li>2.按 o 键增加新的一行，会自动进入编辑模式；</li><li>3.编辑完内容后，按 Esc 键回到命令模式；</li><li>4.最后输入命令 :wq 回车，保存退出或者 :q不保存退出。</li></ul>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Ubuntu 查看CPU占用和使用情况</title>
      <link href="/2021/02/08/Ubuntu%E6%9F%A5%E7%9C%8BCPU%E5%8D%A0%E7%94%A8%E5%92%8C%E4%BD%BF%E7%94%A8%E6%83%85%E5%86%B5/"/>
      <url>/2021/02/08/Ubuntu%E6%9F%A5%E7%9C%8BCPU%E5%8D%A0%E7%94%A8%E5%92%8C%E4%BD%BF%E7%94%A8%E6%83%85%E5%86%B5/</url>
      
        <content type="html"><![CDATA[<p>使用自带的 top命令和 htop命令就可以查看，个人推荐第2种。</p><h2 id="方法一：用自带的-top命令查看"><a href="#方法一：用自带的-top命令查看" class="headerlink" title="方法一：用自带的 top命令查看"></a>方法一：用自带的 top命令查看</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">top</span><br></pre></td></tr></table></figure><a id="more"></a><img                       lazyload                     src="/images/loading.svg"                     data-src="/img/ubuntu_cpu_1.png"                                     ><ul><li>第1行：当前系统时间，系统已运行的时间，几个在线用户(user)；</li><li>第2行 Tasks：总进程数(total)，正在运行的进程数(running)等；</li><li>第3行 %Cpu：用户进程 CPU占用率(us)，系统进程 CPU占用率(sy)，CPU空闲率(id)；</li><li>第4行 KiB Mem：内存总量(total) ，内存空闲(free)。单位都是KB。上图中内存约1.8 G。</li><li>第5行：略</li><li>第6行 PID：显示具体进程情况。%CPU是CPU情况，%MEM是内存使用情况。</li></ul><h2 id="方法二：使用-htop查看（推荐使用）"><a href="#方法二：使用-htop查看（推荐使用）" class="headerlink" title="方法二：使用 htop查看（推荐使用）"></a>方法二：使用 htop查看（推荐使用）</h2><h3 id="1-安装-htop"><a href="#1-安装-htop" class="headerlink" title="1.安装 htop"></a>1.安装 htop</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get install htop</span><br></pre></td></tr></table></figure><h3 id="2-使用htop命令可以更直观的查看CPU使用信息"><a href="#2-使用htop命令可以更直观的查看CPU使用信息" class="headerlink" title="2.使用htop命令可以更直观的查看CPU使用信息"></a>2.使用htop命令可以更直观的查看CPU使用信息</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">htop</span><br></pre></td></tr></table></figure><img                       lazyload                     src="/images/loading.svg"                     data-src="/img/ubuntu_cpu_2.png"                                     >- 上方左侧：CPU、Mem(内存) 看得更清楚明白。内存总共 1.79G，已使用 159M。- 上方右侧：全部进程(Task)数为：33。- 下方一样的是全部进程的情况。<p>如果想要结束进程，按上面的提示按F9(Kill) 就可以结束进程，需要再按回车键(Enter)确认。</p>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
            <tag> Ubuntu </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Github 图床使用教程</title>
      <link href="/2021/02/08/Github%E5%9B%BE%E5%BA%8A%E4%BD%BF%E7%94%A8%E6%95%99%E7%A8%8B/"/>
      <url>/2021/02/08/Github%E5%9B%BE%E5%BA%8A%E4%BD%BF%E7%94%A8%E6%95%99%E7%A8%8B/</url>
      
        <content type="html"><![CDATA[<p>自己用的是 Github Pages + Hexo的博客，Markdown语言的静态网站，所以直接再用一个 Github的图床就比较方便。<br>前提当时是先注册一个 Github的账号。</p><a id="more"></a><h2 id="1-Create-a-repository"><a href="#1-Create-a-repository" class="headerlink" title="1.Create a repository"></a>1.Create a repository</h2><p>创建一个仓库，专门准备用来放博客使用的图片。</p><p><strong>repository 设置</strong></p><p>名称只要是可用的都行，默认选择的是 Public，可以把 Add a README file勾选上。</p><p>设置好之后，最后点击【Create repository】。<br><img                       lazyload                     src="/images/loading.svg"                     data-src="/img/github_picbed_1.png"                                     ></p><h2 id="2-创建-token"><a href="#2-创建-token" class="headerlink" title="2.创建 token"></a>2.创建 token</h2><p>右上角头像下面的【Settings】-&gt;【Developer settings】-&gt;【Personal access tokens】-&gt;点击【Generate new token】。</p><ul><li>Note：取个备注名</li><li>勾选 repo</li></ul><p>最后拉到页面最下面点击【Generate token】就创建好了token。<br><img                       lazyload                     src="/images/loading.svg"                     data-src="/img/github_picbed_2.png"                                     ></p><p>完成之后有一长串字母+数字的token，复制下来就行了。</p><h2 id="3-用-PicGo工具上传图片"><a href="#3-用-PicGo工具上传图片" class="headerlink" title="3.用 PicGo工具上传图片"></a>3.用 PicGo工具上传图片</h2><p>PicGo 官方下载：<a class="link"   href="https://github.com/Molunerfinn/PicGo/releases" >https://github.com/Molunerfinn/PicGo/releases<i class="fas fa-external-link-alt"></i></a></p><p>PicGo 官方介绍页面：<a class="link"   href="https://picgo.github.io/PicGo-Doc/zh/guide/#%E5%90%AC%E8%AF%B4%E4%BD%A0%E4%B9%9F%E6%83%B3%E7%94%A8picgo" >https://picgo.github.io/PicGo-Doc/zh/guide/#%E5%90%AC%E8%AF%B4%E4%BD%A0%E4%B9%9F%E6%83%B3%E7%94%A8picgo<i class="fas fa-external-link-alt"></i></a></p><p>下载之后安装运行。</p><p>1).在PicGo设置中选择 Github图床</p><p>2).图床设置</p><ul><li>仓库名为：h***n/Picbed_Go （[github用户名]/[图床仓库名]）创建的时候上面有；</li><li>分支名：点进 repository就能看到，之前默认都是 master；</li><li>Token：就是上面的token<img                       lazyload                     src="/images/loading.svg"                     data-src="/img/github_picbed_3.png"                                     ></li></ul><p>3).上传区上传图片</p><p>把图片拖进去就能上传。</p><p>4).在相册里面可以看到上传的图片，图片下方第一个按钮就是复制，把地址复制出来直接就能在markdown中用。</p><p>地址示例：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;img src=<span class="string">&quot;/img/github_picbed_3.png&quot;</span>/&gt;</span><br></pre></td></tr></table></figure><h2 id="4-使用示例"><a href="#4-使用示例" class="headerlink" title="4.使用示例"></a>4.使用示例</h2><p>比如图片上传后的地址是：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;img src=<span class="string">&quot;/img/github_picbed_3.png&quot;</span>/&gt;</span><br></pre></td></tr></table></figure><p>直接放在markdown的.md文件中，有预览效果的就能直接预览看到了。</p>]]></content>
      
      
      <categories>
          
          <category> Hexo </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Github </tag>
            
            <tag> Hexo </tag>
            
            <tag> Markdown </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Ubuntu 安装Selenium自动化测试</title>
      <link href="/2021/02/08/Ubuntu%E5%AE%89%E8%A3%85Selenium%E8%87%AA%E5%8A%A8%E5%8C%96%E6%B5%8B%E8%AF%95/"/>
      <url>/2021/02/08/Ubuntu%E5%AE%89%E8%A3%85Selenium%E8%87%AA%E5%8A%A8%E5%8C%96%E6%B5%8B%E8%AF%95/</url>
      
        <content type="html"><![CDATA[<p>Selenium自动化测试环境，主要是有浏览器和浏览器对应的WebDriver版本就可以了。</p><h2 id="一、安装-Google-Chrome浏览器"><a href="#一、安装-Google-Chrome浏览器" class="headerlink" title="一、安装 Google Chrome浏览器"></a>一、安装 Google Chrome浏览器</h2><h3 id="1-下载-Google-Chrome"><a href="#1-下载-Google-Chrome" class="headerlink" title="1.下载 Google Chrome"></a>1.下载 Google Chrome</h3><p>如果是可视化界面的，就用 Ctrl+Alt+T 快捷键打开终端。</p><a id="more"></a><p>如果你的服务器上下载不方便的，本地下载方便，那推荐直接在本地把文件下载好再上传方便。</p><p>Ubuntu中使用 wget来下载 Google Chrome .deb 软件包：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">wget https://dl.google.com/linux/direct/google-chrome-stable_current_amd64.deb</span><br></pre></td></tr></table></figure><p>比如我这里下载好了用xftp工具直接上传到 <code>python/software</code> 目录中。再用 cd 命令先进入到 software目录中。</p><h3 id="2-安装-Google-Chrome"><a href="#2-安装-Google-Chrome" class="headerlink" title="2.安装 Google Chrome"></a>2.安装 Google Chrome</h3><p>在 Ubuntu 系统上安装软件包需要管理员权限。以 sudo 用户身份在你的系统上运行下面的命令来安装 Chrome .deb软件包：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt install ./google-chrome-stable_current_amd64.deb</span><br></pre></td></tr></table></figure><p>如果有提示需要密码的，输入一下密码，安装将会开始。</p><h3 id="3-查看-Google-Chrome版本"><a href="#3-查看-Google-Chrome版本" class="headerlink" title="3.查看 Google Chrome版本"></a>3.查看 Google Chrome版本</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">google-chrome --version</span><br></pre></td></tr></table></figure><p>比如我这里安装完的版本是：Google Chrome 88.0.4324.146<br>此时，你已经在你的 Ubuntu 系统上安装好了 Chrome。</p><p>这里需要知道 Chrome版本才好下载对应的 WebDriver，不同的版本是不同的。</p><h2 id="二、安装浏览器驱动"><a href="#二、安装浏览器驱动" class="headerlink" title="二、安装浏览器驱动"></a>二、安装浏览器驱动</h2><p>（不同的浏览器不同的版本都是不同的）</p><h3 id="1、下载-Chrome-WebDriver"><a href="#1、下载-Chrome-WebDriver" class="headerlink" title="1、下载 Chrome WebDriver"></a>1、下载 Chrome WebDriver</h3><p>我这里安装的是 Chrome 88.0.4324.146 版本对应的WebDriver。</p><h4 id="方法一：在本地Windows机下载"><a href="#方法一：在本地Windows机下载" class="headerlink" title="方法一：在本地Windows机下载"></a>方法一：在本地Windows机下载</h4><p>Chrome WebDriver 官方下载地址：<br><a class="link"   href="https://chromedriver.storage.googleapis.com/index.html" >https://chromedriver.storage.googleapis.com/index.html<i class="fas fa-external-link-alt"></i></a><br><a class="link"   href="https://sites.google.com/a/chromium.org/chromedriver/downloads" >https://sites.google.com/a/chromium.org/chromedriver/downloads<i class="fas fa-external-link-alt"></i></a></p><p>这里没有88.0.4324.146版本的，88.最新的是88.0.4324.96，就用的最新的就行。</p><p>下载好后，用 xftp工具上传到 <code>python/pydriver</code> 目录中。</p><h4 id="方法二：直接在Ubuntu中直接下载"><a href="#方法二：直接在Ubuntu中直接下载" class="headerlink" title="方法二：直接在Ubuntu中直接下载"></a>方法二：直接在Ubuntu中直接下载</h4><p>在上面 Chrome WebDriver 官方下载地址中查看对应版本对应文件的链接：<br><a class="link"   href="https://chromedriver.storage.googleapis.com/index.html" >https://chromedriver.storage.googleapis.com/index.html<i class="fas fa-external-link-alt"></i></a></p><p>得到 chromedriver_linux64.zip的文件链接，然后用 wget命令下载：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">wget https://chromedriver.storage.googleapis.com/88.0.4324.96/chromedriver_linux64.zip</span><br></pre></td></tr></table></figure><p>下载之后用unzip 命令解压出来。反正看你在哪边能快速下载吧，哪边下载方便就在哪边下载。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">unzip chromedriver_linux64.zip</span><br></pre></td></tr></table></figure><p>下载好/解压好的 chromedriver 文件都放到  <code>python/pydriver</code> 目录中。</p><h3 id="2、给chromedriver-文件添加可执行的权限"><a href="#2、给chromedriver-文件添加可执行的权限" class="headerlink" title="2、给chromedriver 文件添加可执行的权限"></a>2、给chromedriver 文件添加可执行的权限</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo chmod a+x chromedriver</span><br></pre></td></tr></table></figure><h2 id="三、安装-Selenium-包"><a href="#三、安装-Selenium-包" class="headerlink" title="三、安装 Selenium 包"></a>三、安装 Selenium 包</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip3 install selenium</span><br></pre></td></tr></table></figure><h2 id="四、python代码示例"><a href="#四、python代码示例" class="headerlink" title="四、python代码示例"></a>四、python代码示例</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> selenium <span class="keyword">import</span> webdriver</span><br><span class="line">driver_path = <span class="string">r&#x27;/home/ubuntu/python/pydriver/chromedriver&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># open site mode 打开浏览器模式</span></span><br><span class="line"><span class="comment"># wd = webdriver.Chrome(driver_path)</span></span><br><span class="line"><span class="comment"># not open site mode 不打开浏览器的模式</span></span><br><span class="line">option = webdriver.ChromeOptions()</span><br><span class="line">option.add_argument(<span class="string">&#x27;headless&#x27;</span>)</span><br><span class="line">wd = webdriver.Chrome(driver_path, options=option)</span><br><span class="line"></span><br><span class="line">wd.implicitly_wait(<span class="number">10</span>) <span class="comment"># sleep</span></span><br><span class="line"></span><br><span class="line">site = <span class="string">&#x27;https://www.baidu.com/&#x27;</span></span><br><span class="line">wd.get(site)</span><br><span class="line"><span class="built_in">print</span>(wd.title)</span><br><span class="line">wd.quit()</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
            <tag> Python </tag>
            
            <tag> Selenium </tag>
            
            <tag> Ubuntu </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Ubuntu 命令行安装Chrome浏览器</title>
      <link href="/2021/02/08/Ubuntu%E5%AE%89%E8%A3%85Chrome%E6%B5%8F%E8%A7%88%E5%99%A8/"/>
      <url>/2021/02/08/Ubuntu%E5%AE%89%E8%A3%85Chrome%E6%B5%8F%E8%A7%88%E5%99%A8/</url>
      
        <content type="html"><![CDATA[<p>这里在Ubuntu服务器上安装Google Chrome浏览器，主要是为了Python Selenium跑自动化测试用的，所以直接用命令行安装。</p><h3 id="1-下载-Google-Chrome"><a href="#1-下载-Google-Chrome" class="headerlink" title="1.下载 Google Chrome"></a>1.下载 Google Chrome</h3><p>如果是可视化的，就用 Ctrl+Alt+T 快捷键打开终端。</p><p>使用wget来下载 Google Chrome .deb 软件包：</p><a id="more"></a><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">wget https://dl.google.com/linux/direct/google-chrome-stable_current_amd64.deb</span><br></pre></td></tr></table></figure><p>或者手动下载好放进去。<br>比如我这里下载好了用xftp工具直接上传到 <code>python/software</code> 目录中。那就需要用 cd 命令先进入到 software目录中。</p><h3 id="2-安装-Google-Chrome"><a href="#2-安装-Google-Chrome" class="headerlink" title="2.安装 Google Chrome"></a>2.安装 Google Chrome</h3><p>在 Ubuntu 系统上安装软件包需要管理员权限。以 sudo 用户身份在你的系统上运行下面的命令来安装 Chrome .deb软件包：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt install ./google-chrome-stable_current_amd64.deb</span><br></pre></td></tr></table></figure><p>如果有提示需要密码的，输入一下密码，安装将会开始。</p><h3 id="3-查看-Google-Chrome版本"><a href="#3-查看-Google-Chrome版本" class="headerlink" title="3.查看 Google Chrome版本"></a>3.查看 Google Chrome版本</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">google-chrome --version</span><br></pre></td></tr></table></figure><p>比如我这里安装完的版本是：Google Chrome 88.0.4324.146<br>此时，你已经在你的 Ubuntu 系统上安装好了 Chrome。</p><p>这里需要知道 Chrome版本才好下载对应的 WebDriver，不同的版本是不同的。</p>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
            <tag> Ubuntu </tag>
            
            <tag> Chrome </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SQLite 清空表数据并将自增量归0</title>
      <link href="/2021/02/07/SQLite%E6%B8%85%E7%A9%BA%E8%A1%A8%E6%95%B0%E6%8D%AE%E5%B9%B6%E5%B0%86%E8%87%AA%E5%A2%9E%E9%87%8F%E5%BD%920/"/>
      <url>/2021/02/07/SQLite%E6%B8%85%E7%A9%BA%E8%A1%A8%E6%95%B0%E6%8D%AE%E5%B9%B6%E5%B0%86%E8%87%AA%E5%A2%9E%E9%87%8F%E5%BD%920/</url>
      
        <content type="html"><![CDATA[<p>在普通的SQL中，实现如题这个只需要通过truncate [tablename]就能实现，但在SQLite中，没有truncate，所以需要分2步实现。</p><p>比如要<strong>清空test表中的所有记录数据</strong>。</p><a id="more"></a><p>test表中数据如下（其中id是自动增加的）：</p><table><thead><tr><th>id</th><th>code</th><th>name</th></tr></thead><tbody><tr><td>1</td><td>213122</td><td>张三</td></tr><tr><td>2</td><td>213124</td><td>李四</td></tr><tr><td>3</td><td>213125</td><td>王五</td></tr></tbody></table><h3 id="1、清空表数据"><a href="#1、清空表数据" class="headerlink" title="1、清空表数据"></a>1、清空表数据</h3><p>清空test表的SQL语句是：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">delete</span> <span class="keyword">from</span> test</span><br></pre></td></tr></table></figure><h3 id="2、自增量归0"><a href="#2、自增量归0" class="headerlink" title="2、自增量归0"></a>2、自增量归0</h3><p>当SQLite数据库中 表中包含自动增加类型的字段后，会自动建立一个名为 sqlite_sequence 的表。这个表包含两个字段：name 和 seq。</p><ul><li>name：表示记录自增的表名（即 tablename）；</li><li>seq：记录当前的序号（下一条记录就是当前序号+1）</li></ul><p>所以，当清空表中记录后，如果没有把这个自增的序号归0，添加下一条记录的时候，序号会从之前的数+1。</p><p>自增量归0的SQL语句是：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">update sqlite_sequence <span class="keyword">set</span> seq <span class="operator">=</span> <span class="number">0</span> <span class="keyword">where</span> name <span class="operator">=</span> <span class="string">&#x27;test&#x27;</span></span><br></pre></td></tr></table></figure><h3 id="3、python代码实现"><a href="#3、python代码实现" class="headerlink" title="3、python代码实现"></a>3、python代码实现</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> sqlite3</span><br><span class="line">conn = sqlite3.connect(<span class="string">&#x27;test.db&#x27;</span>)</span><br><span class="line">cursor = conn.cursor()</span><br><span class="line">table_name = <span class="string">&#x27;test&#x27;</span></span><br><span class="line"></span><br><span class="line">sql1 = <span class="string">&#x27;delete from &#x27;</span> + table_name</span><br><span class="line">cursor.execute(sql1)</span><br><span class="line">sql2 = <span class="string">&#x27;update sqlite_sequence set seq = 0 where name = &#x27;</span> + <span class="string">&quot;&#x27;&quot;</span> + table_name + <span class="string">&quot;&#x27;&quot;</span></span><br><span class="line">cursor.execute(sql2)</span><br><span class="line"></span><br><span class="line">cursor.close()</span><br><span class="line">conn.commit()</span><br><span class="line">conn.close()</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
            <tag> SQLite </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Python 数据库（SQLite）教程</title>
      <link href="/2021/02/07/Python-%E6%95%B0%E6%8D%AE%E5%BA%93%EF%BC%88SQLite%EF%BC%89%E6%95%99%E7%A8%8B/"/>
      <url>/2021/02/07/Python-%E6%95%B0%E6%8D%AE%E5%BA%93%EF%BC%88SQLite%EF%BC%89%E6%95%99%E7%A8%8B/</url>
      
        <content type="html"><![CDATA[<p>SQLite是一种嵌入式数据库，它的数据库就是一个文件。由于SQLite本身是C写的，而且体积很小，所以，经常被集成到各种应用程序中，甚至在iOS和Android的App中都可以集成。</p><p>Python就内置了SQLite3，所以，在Python中使用SQLite，不需要安装任何东西，直接使用。</p><a id="more"></a><h1 id="选择SQLite的原因"><a href="#选择SQLite的原因" class="headerlink" title="选择SQLite的原因"></a>选择SQLite的原因</h1><p>自己的小东西，轻量极感觉用SQLite3也可以了，省得装MySQL这些了。然后再装个 DB Browser for SQLite的软件，开源的免费可视化工具，用来操作SQLite数据库文件溜溜的、贼方便了~</p><p>所以自己选择SQLite的2个主要原因是：</p><ol><li>Python内置了SQLite3，不需要再装任何东西；</li><li>有DB Browser for SQLite这样开源免费的软件工具，操作又方便，建库、建表、修改表之类都很方便，保存成一个.db文件也方便。</li></ol><p>当然，这是看自己需求选择的原因。</p><h1 id="数据库相关概念简介"><a href="#数据库相关概念简介" class="headerlink" title="数据库相关概念简介"></a>数据库相关概念简介</h1><p>一个数据库对应保存成一个 .db文件；<br>一个数据库里面可以有很多表（Table）；</p><p>比如有一个学校的数据库，一般就会有：</p><ul><li>教职工表（里面有教师姓名之类的信息）</li><li>班级表（里面有班级名称、人数等信息）</li><li>全体学生表（里面有学生姓名、班级等信息）</li></ul><p>关于数据库知识，随便搜几篇文章看一下，自己去了解一下SQL，这里就不介绍了。<br>数据库的使用，自己设计几个表，就懂了点基础了，平常自己用用够用就行了（表的设计靠实践）。</p><h1 id="Python-SQLite"><a href="#Python-SQLite" class="headerlink" title="Python SQLite"></a>Python SQLite</h1><h3 id="一、SQLite使用过程描述"><a href="#一、SQLite使用过程描述" class="headerlink" title="一、SQLite使用过程描述"></a>一、SQLite使用过程描述</h3><p>1.要操作关系数据库，首先要连接到数据库，一个数据库连接称为connection。</p><p>2.连接到数据库之后，需要打开游标（Cursor），通过Cursor执行SQL语句，然后获得执行的结果。</p><p>3.最后关闭数据库连接。</p><h3 id="二、操作数据库举例"><a href="#二、操作数据库举例" class="headerlink" title="二、操作数据库举例"></a>二、操作数据库举例</h3><p>数据库的操作，概括一下主要就是【增 删 改 查】，这4个会了，基础就差不多可以上了。</p><ul><li>增：insert into 语句</li><li>删：delete from 语句</li><li>改：update 语句</li><li>查：select 语句</li></ul><h4 id="1-创建数据库、表"><a href="#1-创建数据库、表" class="headerlink" title="1.创建数据库、表"></a>1.创建数据库、表</h4><p>创建一个test的表，表里面有 id、code、name 3个字段。</p><p><strong>字段的类型</strong> 有：<br>INTEGER(int数值)、TEXT(string字符串)、REAL(float符点数)，主要这3种。</p><p><strong>字段的属性</strong> 有：</p><ul><li>NOT NULL：非空，表示字段不能是空的；</li><li>PRIMARY KEY：主键；</li><li>AUTOINCREMENT：自动增加（这一项是自动增加的，一般用于id）；</li><li>UNIQUE：唯一，表示在这个表里这个字段是唯一的。</li><li>DEFAULT ‘ ‘：表示默认值为 ‘ ‘</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> sqlite3</span><br><span class="line"><span class="comment"># 数据库文件是 test.db，如果文件不存在，会自动创建</span></span><br><span class="line">conn = sqlite3.connect(<span class="string">&#x27;test.db&#x27;</span>)</span><br><span class="line">cursor = conn.cursor()</span><br><span class="line">sql = <span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">    CREATE TABLE &quot;test&quot; (</span></span><br><span class="line"><span class="string">    &quot;id&quot;    INTEGER NOT NULL PRIMARY KEY AUTOINCREMENT UNIQUE,</span></span><br><span class="line"><span class="string">    &quot;code&quot;  TEXT NOT NULL UNIQUE,</span></span><br><span class="line"><span class="string">    &quot;name&quot;  TEXT DEFAULT &#x27; &#x27;</span></span><br><span class="line"><span class="string">    )</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line">cursor.execute(sql)</span><br><span class="line">cursor.close()</span><br><span class="line">conn.commit()</span><br><span class="line">conn.close()</span><br></pre></td></tr></table></figure><h4 id="2-增：表中添加一条数据"><a href="#2-增：表中添加一条数据" class="headerlink" title="2.增：表中添加一条数据"></a>2.增：表中添加一条数据</h4><p>sql语句中可以用参数的形式，execute执行sql的时候把参数传进去就可以了。</p><p>对应是Tuple（元组的数据类型），Python里List列表用的比较多，可以通过tuple()函数转成Tuple，当然，也可以直接定义成Tuple类型。</p><p>因为一般别的地方获取的数据List类型比较多，所以这里举例用了List。</p><p>添加一条的SQL语句是：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> test (code, name) <span class="keyword">values</span> (<span class="string">&#x27;213123&#x27;</span>, <span class="string">&#x27;张三&#x27;</span>)</span><br></pre></td></tr></table></figure><p>python代码示例：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> sqlite3</span><br><span class="line">conn = sqlite3.connect(<span class="string">&#x27;test.db&#x27;</span>)</span><br><span class="line">cursor = conn.cursor()</span><br><span class="line">table_name = <span class="string">&#x27;test&#x27;</span></span><br><span class="line">sql = <span class="string">&#x27;insert into &#x27;</span> + table_name + <span class="string">&#x27; (code, name) values (?,?)&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 添加一条数据</span></span><br><span class="line">list1 = [<span class="string">&#x27;213123&#x27;</span>, <span class="string">&#x27;张三&#x27;</span>]    </span><br><span class="line">cursor.execute(sql, <span class="built_in">tuple</span>(list1))</span><br><span class="line"><span class="comment"># 添加多条数据</span></span><br><span class="line">list2 = [[<span class="string">&#x27;213124&#x27;</span>, <span class="string">&#x27;李四&#x27;</span>], [<span class="string">&#x27;213125&#x27;</span>, <span class="string">&#x27;王五&#x27;</span>]]</span><br><span class="line"><span class="keyword">for</span> one <span class="keyword">in</span> list2:</span><br><span class="line">    cursor.execute(sql, <span class="built_in">tuple</span>(one))</span><br><span class="line"><span class="comment"># 添加多条数据2</span></span><br><span class="line">list3 = [[<span class="string">&#x27;213126&#x27;</span>, <span class="string">&#x27;赵六&#x27;</span>], [<span class="string">&#x27;213127&#x27;</span>, <span class="string">&#x27;钱七&#x27;</span>]]</span><br><span class="line">cursor.executemany(sql, list3)</span><br><span class="line"></span><br><span class="line">cursor.close()</span><br><span class="line">conn.commit()</span><br><span class="line">conn.close()</span><br></pre></td></tr></table></figure><p>sql的语句用参数的好处就是可以在for循环中直接使用，不用每一条固定一条sql语句。</p><h4 id="3-删：删除一条指定数据"><a href="#3-删：删除一条指定数据" class="headerlink" title="3.删：删除一条指定数据"></a>3.删：删除一条指定数据</h4><p>删除一条的SQL语句是 ：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">delete</span> <span class="keyword">from</span> test <span class="keyword">where</span> code <span class="operator">=</span> <span class="string">&#x27;213123&#x27;</span></span><br></pre></td></tr></table></figure><p>python代码示例：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> sqlite3</span><br><span class="line">conn = sqlite3.connect(<span class="string">&#x27;test.db&#x27;</span>)</span><br><span class="line">cursor = conn.cursor()</span><br><span class="line">table_name = <span class="string">&#x27;test&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 删除多条数据</span></span><br><span class="line">code_list = [<span class="string">&#x27;213123&#x27;</span>, <span class="string">&#x27;213124&#x27;</span>]</span><br><span class="line">sql = <span class="string">&#x27;delete from &#x27;</span> +  table_name + <span class="string">&#x27; where code = ?&#x27;</span></span><br><span class="line"><span class="keyword">for</span> code <span class="keyword">in</span> code_list:</span><br><span class="line">    cursor.execute(sql, (code,))</span><br><span class="line">cursor.close()</span><br><span class="line">conn.commit()</span><br><span class="line">conn.close()</span><br></pre></td></tr></table></figure><h4 id="4-改：修改一条记录"><a href="#4-改：修改一条记录" class="headerlink" title="4.改：修改一条记录"></a>4.改：修改一条记录</h4><p>修改一条的SQL语句是：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">update test <span class="keyword">set</span> code <span class="operator">=</span> <span class="string">&#x27;213122&#x27;</span> <span class="keyword">where</span> name <span class="operator">=</span> <span class="string">&#x27;张三&#x27;</span></span><br></pre></td></tr></table></figure><p>python代码示例：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> sqlite3</span><br><span class="line">conn = sqlite3.connect(<span class="string">&#x27;test.db&#x27;</span>)</span><br><span class="line">cursor = conn.cursor()</span><br><span class="line">table_name = <span class="string">&#x27;test&#x27;</span></span><br><span class="line"></span><br><span class="line">new_code = <span class="string">&#x27;213122&#x27;</span></span><br><span class="line">name = <span class="string">&#x27;张三&#x27;</span></span><br><span class="line">sql = <span class="string">&#x27;update &#x27;</span> +  table_name + <span class="string">&#x27; set code = ? where name = ?&#x27;</span></span><br><span class="line">cursor.execute(sql, (new_code,name))</span><br><span class="line">cursor.close()</span><br><span class="line">conn.commit()</span><br><span class="line">conn.close()</span><br></pre></td></tr></table></figure><h4 id="5-查：查询记录"><a href="#5-查：查询记录" class="headerlink" title="5.查：查询记录"></a>5.查：查询记录</h4><p>查属于最常用的部分了，因为存储在数据库的数据，通常都用select语句去查询。</p><p>查询的SQL语句有：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> test</span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> test <span class="keyword">where</span> code <span class="operator">=</span> <span class="string">&#x27;213124&#x27;</span></span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> test <span class="keyword">where</span> code <span class="operator">=</span> <span class="string">&#x27;213124&#x27;</span> <span class="keyword">and</span> name <span class="operator">=</span> <span class="string">&#x27;李四&#x27;</span></span><br><span class="line"><span class="keyword">select</span> code,name <span class="keyword">from</span> test <span class="keyword">where</span> code <span class="operator">=</span> <span class="string">&#x27;213124&#x27;</span></span><br></pre></td></tr></table></figure><p>查询可以查询全部字段，也可以查询部分需要的字段；<br>查询后面的where条件可以是 UNIQUE 字段，那查询结果就是唯一的，如果不是 UNIQUE字段，查询结果可能会有多条。</p><p>python代码示例：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> sqlite3</span><br><span class="line">conn = sqlite3.connect(<span class="string">&#x27;test.db&#x27;</span>)</span><br><span class="line">cursor = conn.cursor()</span><br><span class="line">table_name = <span class="string">&#x27;test&#x27;</span></span><br><span class="line"></span><br><span class="line">name = <span class="string">&#x27;张三&#x27;</span></span><br><span class="line">sql1 = <span class="string">&#x27;select * from &#x27;</span> + table_name + <span class="string">&#x27; where name = ?&#x27;</span></span><br><span class="line">cursor.execute(sql1, (name,))</span><br><span class="line">values1 = cursor.fetchall()</span><br><span class="line"><span class="built_in">print</span>(values1) <span class="comment"># [(1, &#x27;213122&#x27;, &#x27;张三&#x27;)]</span></span><br><span class="line">sql2 = <span class="string">&#x27;select code,name from &#x27;</span> + table_name</span><br><span class="line">cursor.execute(sql2)</span><br><span class="line">values2 = cursor.fetchall()</span><br><span class="line"><span class="built_in">print</span>(values2) <span class="comment"># [(&#x27;213122&#x27;, &#x27;张三&#x27;), (&#x27;213124&#x27;, &#x27;李四&#x27;), (&#x27;213125&#x27;, &#x27;王五&#x27;)]</span></span><br><span class="line"></span><br><span class="line">cursor.close()</span><br><span class="line">conn.close()</span><br></pre></td></tr></table></figure><h4 id="6-小结"><a href="#6-小结" class="headerlink" title="6.小结"></a>6.小结</h4><p><strong>使用Cursor对象执行insert，update，delete语句时，执行结果由rowcount返回影响的行数，就可以拿到执行结果。</strong></p><p><strong>使用Cursor对象执行select语句时，通过fetchall()可以拿到结果集。结果集是一个list，每个元素都是一个tuple，对应一行记录。</strong></p><p>像上面查询中的第4条sql语句，查询结果只需要 code,name 两个字段，那查询的结果会是一个List，每一个元素是一个tuple元组。<br>比如查询到的结果是：</p><p>[(‘213124’, ‘李四’), (‘213125’, ‘王五’)]</p><p>对于这样的List，Python里可以直接转换成 Dictionary（字典）类型，那用起来就更方便了。</p><p>最后，记得用完 关闭connection和Cursor对象。</p>]]></content>
      
      
      <categories>
          
          <category> 数据库 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
            <tag> SQLite </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Ubuntu 升级OpenSSL教程</title>
      <link href="/2021/02/05/Ubuntu%E5%8D%87%E7%BA%A7OpenSSL%E6%95%99%E7%A8%8B/"/>
      <url>/2021/02/05/Ubuntu%E5%8D%87%E7%BA%A7OpenSSL%E6%95%99%E7%A8%8B/</url>
      
        <content type="html"><![CDATA[<p>因为腾讯云的服务器提示了漏洞，就顺便修复了一下。</p><p><strong>OpenSSL 拒绝服务漏洞(CVE-2020-1971)</strong><br>披露时间 2020-12-09 00:00:00CVE编号 CVE-2020-1971</p><a id="more"></a><blockquote><p>漏洞描述：<br>2020年12月08日，OpenSSL官方发布安全公告，披露CVE-2020-1971 OpenSSL GENERAL_NAME_cmp 拒绝服务漏洞。当两个GENERAL_NAME都包含同一个EDIPARTYNAME时，由于GENERAL_NAME_cmp函数未能正确处理，从而导致空指针引用，并可能导致拒绝服务。<br>漏洞类型：系统组件漏洞<br>威胁等级：中危</p></blockquote><p>修复方案：将 OpenSSL 升级至最新版本。</p><p>升级方法可以参考如下：<a class="link"   href="https://cloud.tencent.com/developer/article/1759794?from=information.detail.linux%20openssl%E5%8D%87%E7%BA%A7" >https://cloud.tencent.com/developer/article/1759794?from=information.detail.linux%20openssl%E5%8D%87%E7%BA%A7<i class="fas fa-external-link-alt"></i></a></p><p>温馨提示：升级OpenSSL前务必先做好快照备份，以免操作失误导致系统崩溃。<br>漏洞详细说明 <a class="link"   href="https://s.tencent.com/research/bsafe/1193.html" >https://s.tencent.com/research/bsafe/1193.html<i class="fas fa-external-link-alt"></i></a><br>检测到服务器存在漏洞风险，<strong>建议立即对相关主机进行快照备份</strong>，避免遭受损失。</p><p>以上内容是腾讯云后台提示的。</p><hr><h2 id="【修复过程】"><a href="#【修复过程】" class="headerlink" title="【修复过程】"></a>【修复过程】</h2><p>没有快照，先创建快照。</p><h3 id="1-下载最新-OpenSSL"><a href="#1-下载最新-OpenSSL" class="headerlink" title="1.下载最新 OpenSSL"></a>1.下载最新 OpenSSL</h3><p>比如我这现在最新的是：openssl-1.1.1i</p><p>官网：<a class="link"   href="https://www.openssl.org/source/openssl-1.1.1i.tar.gz" >https://www.openssl.org/source/openssl-1.1.1i.tar.gz<i class="fas fa-external-link-alt"></i></a></p><p>官网访问的速度再慢了，在国内还是用腾讯的镜像好了。</p><p>腾讯镜像：<a class="link"   href="https://mirrors.cloud.tencent.com/openssl/source/openssl-1.1.1i.tar.gz" >https://mirrors.cloud.tencent.com/openssl/source/openssl-1.1.1i.tar.gz<i class="fas fa-external-link-alt"></i></a></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">wget https://mirrors.cloud.tencent.com/openssl/source/openssl-1.1.1i.tar.gz</span><br></pre></td></tr></table></figure><h3 id="2-解压-openssl-1-1-1i"><a href="#2-解压-openssl-1-1-1i" class="headerlink" title="2.解压 openssl-1.1.1i"></a>2.解压 openssl-1.1.1i</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tar xzvf openssl-1.1.1i.tar.gz</span><br></pre></td></tr></table></figure><blockquote><p>xzvf 释义<br>x 解压<br>z gzip压缩格式<br>v 显示详细信息<br>f file</p></blockquote><p>解压后得到 openssl-1.1.1i 文件夹。</p><h3 id="3-进入-OpenSSL-解压后的-openssl-1-1-1i-文件夹"><a href="#3-进入-OpenSSL-解压后的-openssl-1-1-1i-文件夹" class="headerlink" title="3.进入 OpenSSL 解压后的 openssl-1.1.1i 文件夹"></a>3.进入 OpenSSL 解压后的 openssl-1.1.1i 文件夹</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> openssl-1.1.1i</span><br></pre></td></tr></table></figure><h3 id="4-安装-OpenSSL"><a href="#4-安装-OpenSSL" class="headerlink" title="4.安装 OpenSSL"></a>4.安装 OpenSSL</h3><p><strong>1).配置</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./config</span><br></pre></td></tr></table></figure><p>运行成功后有提示：OpenSSL has been successfully configured</p><p><strong>2).make</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">make（如果失败，就运行 sudo apt install make gcc 命令先）</span><br><span class="line">sudo make install</span><br></pre></td></tr></table></figure><h3 id="5-使用新版-OpenSSL"><a href="#5-使用新版-OpenSSL" class="headerlink" title="5.使用新版 OpenSSL"></a>5.使用新版 OpenSSL</h3><p><strong>1).找到新旧版本 openssl</strong></p><p>通过 <code>find / -name &quot;openssl&quot; -print</code> 命令可以查到，</p><p>新版openssl 默认在：/usr/local/bin/openssl<br>老版本的openssl 在 /usr/bin/openssl</p><p><strong>2).备份老版本openssl</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo mv /usr/bin/openssl ~/tmp</span><br></pre></td></tr></table></figure><p>也可以在sudo make install之前就把老版本的先备份移走。</p><p><strong>3).给新版本的openssl创建软件链接</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo ln -s /usr/<span class="built_in">local</span>/bin/openssl /usr/bin/openssl</span><br></pre></td></tr></table></figure><h3 id="6-更新配置"><a href="#6-更新配置" class="headerlink" title="6.更新配置"></a>6.更新配置</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">update symlinks and rebuild the library cache</span><br><span class="line">sudo ldconfig</span><br></pre></td></tr></table></figure><h3 id="7-检查OpenSSL-版本"><a href="#7-检查OpenSSL-版本" class="headerlink" title="7.检查OpenSSL 版本"></a>7.检查OpenSSL 版本</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">openssl version</span><br></pre></td></tr></table></figure><p>我这的运行结果是：<br>OpenSSL 1.1.1i  8 Dec 2020</p>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
            <tag> Ubuntu </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hexo 主题添加 Valine 评论功能</title>
      <link href="/2021/02/05/Hexo%E4%B8%BB%E9%A2%98%E6%B7%BB%E5%8A%A0Valine%E8%AF%84%E8%AE%BA%E5%8A%9F%E8%83%BD/"/>
      <url>/2021/02/05/Hexo%E4%B8%BB%E9%A2%98%E6%B7%BB%E5%8A%A0Valine%E8%AF%84%E8%AE%BA%E5%8A%9F%E8%83%BD/</url>
      
        <content type="html"><![CDATA[<h1 id="一、关于Valine"><a href="#一、关于Valine" class="headerlink" title="一、关于Valine"></a>一、关于Valine</h1><p>Valine 诞生于2017年8月7日，是一款基于 Leancloud 的快速、简洁且高效的无后端评论系统，支持但不限于静态博客。<br>具有以下特性：</p><ul><li>快速、安全</li><li>Emoji</li><li>无后端实现<a id="more"></a></li><li>MarkDown 全语法支持</li><li>轻量易用(~15kb gzipped)</li><li>文章阅读量统计 v1.2.0+</li></ul><h1 id="二、配置Leancloud账号"><a href="#二、配置Leancloud账号" class="headerlink" title="二、配置Leancloud账号"></a>二、配置Leancloud账号</h1><p>Valine 是基于 leancloud的评论模块，评论数据都存储在 Leancloud 平台，因此需要先在 leancloud 申请帐号。<br>官网：<a class="link"   href="https://leancloud.cn/" >https://leancloud.cn/<i class="fas fa-external-link-alt"></i></a></p><p><strong>1.注册Leancloud 账号</strong><br><strong>2.创建应用</strong><br>【控制台】-&gt;【创建应用】<br>应用名称 自己填写，选择默认的【开发版】，应用描述自己写，直接【创建】。</p><p><strong>3.获取应用的AppID和AppKey</strong><br>创建完成后，进入该应用。<br>【设置】-&gt;【应用Keys】，得到AppID和AppKey。这个后面配置博客主题文件时会用到。</p><p><strong>4.配置安全域名</strong><br>【设置】-&gt;【安全中心】，在【Web安全域名】中填写自己博客的域名后保存。比如我这里是：</p><blockquote><p><a class="link"   href="http://i007it.com/" >http://i007it.com/<i class="fas fa-external-link-alt"></i></a><br><a class="link"   href="http://www.i007it.com/" >http://www.i007it.com/<i class="fas fa-external-link-alt"></i></a><br><a class="link"   href="http://localhost:4000/" >http://localhost:4000<i class="fas fa-external-link-alt"></i></a></p></blockquote><h1 id="三、Hexo中添加Valine评论"><a href="#三、Hexo中添加Valine评论" class="headerlink" title="三、Hexo中添加Valine评论"></a>三、Hexo中添加Valine评论</h1><p>首先，看看你用的Hexo主题是否已添加Valine模块，如果添加了的话就很简单了。<br>查看地址：<a class="link"   href="https://valine.js.org/hexo.html" >https://valine.js.org/hexo.html<i class="fas fa-external-link-alt"></i></a><br>比如 <code>hexo-theme-landscape</code>，<code>hexo-theme-next</code> 就都已经添加了（当然要安装支持的版本，最新版）</p><h2 id="（一）、主题已经添加了Valine模块"><a href="#（一）、主题已经添加了Valine模块" class="headerlink" title="（一）、主题已经添加了Valine模块"></a>（一）、主题已经添加了Valine模块</h2><p>只需要直接在主题下面的_config.yml 配置文件中填写valine相关内容就行。</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># valine comment system. https://valine.js.org</span></span><br><span class="line"><span class="attr">valine:</span> </span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span> <span class="comment"># if you want use valine,please set this value is true</span></span><br><span class="line">  <span class="attr">appId:</span> <span class="string">U******************************z</span> <span class="comment"># leancloud application app id</span></span><br><span class="line">  <span class="attr">appKey:</span> <span class="string">y************************7</span> <span class="comment"># leancloud application app key</span></span><br><span class="line">  <span class="attr">notify:</span> <span class="literal">false</span> <span class="comment"># valine mail notify (true/false) https://github.com/xCss/Valine/wiki</span></span><br><span class="line">  <span class="attr">verify:</span> <span class="literal">false</span> <span class="comment"># valine verify code (true/false)</span></span><br><span class="line">  <span class="attr">pageSize:</span> <span class="number">10</span> <span class="comment"># comment list page size</span></span><br><span class="line">  <span class="attr">avatar:</span> <span class="string">mm</span> <span class="comment"># gravatar style https://valine.js.org/#/avatar</span></span><br><span class="line">  <span class="attr">lang:</span> <span class="string">zh-cn</span> <span class="comment"># i18n: zh-cn/en</span></span><br><span class="line">  <span class="attr">placeholder:</span> <span class="string">Just</span> <span class="string">go</span> <span class="string">go</span> <span class="comment"># valine comment input placeholder(like: Please leave your footprints )</span></span><br><span class="line">  <span class="attr">guest_info:</span> <span class="string">nick,mail,link</span> <span class="comment">#valine comment header info</span></span><br></pre></td></tr></table></figure><p>enable设置为true；填写应用的appId和appKey就行了（注意填写的时候冒号后面有一个空格）。</p><h2 id="（二）、主题未添加Valine模块"><a href="#（二）、主题未添加Valine模块" class="headerlink" title="（二）、主题未添加Valine模块"></a>（二）、主题未添加Valine模块</h2><p>我用的是paperbox主题，是landscape 的一个优化版本（作者几年也没更新了，所以也没更新评论系统，原来主题中配置的还是已经关闭了的duoshuo的评论系统），那就需要自己添加了。</p><p>然后我也顺便删除了duoshuo评论的模块，如果你用的主题原来没有的，直接添加相关文件的valine部分内容就行，不用改别的地方。</p><p>因为landscape 最新版本已经内置了 valine模块了，那我直接把 landscape 主题下载下来，查看一下里面的 valine相关内容，再复制到我自己的主题里就可以啦。</p><p>所以几个文件的修改添加，都是直接参考 landscape主题那边搬过来的。</p><h3 id="1-在主题的配置文件中添加valine内容"><a href="#1-在主题的配置文件中添加valine内容" class="headerlink" title="1.在主题的配置文件中添加valine内容"></a>1.在主题的配置文件中添加valine内容</h3><p><strong>hexo-theme-paperbox_config.yml</strong></p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Valine.</span></span><br><span class="line"><span class="comment"># You can get your appid and appkey from https://leancloud.cn</span></span><br><span class="line"><span class="comment"># more info please open https://valine.js.org</span></span><br><span class="line"><span class="attr">valine:</span></span><br><span class="line">    <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line">    <span class="attr">appId:</span></span><br><span class="line">    <span class="attr">appKey:</span></span><br><span class="line">    <span class="attr">placeholder:</span> <span class="string">请在此输入您的留言</span></span><br><span class="line">    <span class="attr">notify:</span> <span class="literal">false</span>   <span class="comment"># 新留言是否需要通知 https://github.com/xCss/Valine/wiki</span></span><br><span class="line">    <span class="attr">verify:</span> <span class="literal">false</span>   <span class="comment"># 是否需要验证，验证比较反人类建议false关闭</span></span><br><span class="line">    <span class="attr">avatar:</span> <span class="string">mm</span> <span class="comment"># 默认头像</span></span><br><span class="line">    <span class="attr">lang:</span> <span class="string">zh-cn</span></span><br><span class="line">    <span class="attr">guest_info:</span> <span class="string">nick,mail,link</span>  <span class="comment"># 默认留言框的头部需要访问者输入的信息</span></span><br><span class="line">    <span class="attr">pageSize:</span> <span class="number">10</span>                <span class="comment"># 默认单页的留言条数</span></span><br></pre></td></tr></table></figure><h3 id="2-article-ejs文件中添加内容"><a href="#2-article-ejs文件中添加内容" class="headerlink" title="2.article.ejs文件中添加内容"></a>2.article.ejs文件中添加内容</h3><p><strong>hexo-theme-paperbox\layout_partial\article.ejs</strong></p><p>有两个部分有添加，都在文件的最后面。</p><h4 id="1-第一部分，-lt-footer-gt-部分修改"><a href="#1-第一部分，-lt-footer-gt-部分修改" class="headerlink" title="1).第一部分，&lt;footer&gt;部分修改"></a>1).第一部分，<code>&lt;footer&gt;</code>部分修改</h4><p>其实添加的就是valine有关的这一块，因为我paperbox主题原来还有duoshuo的部分，我也直接删掉了。</p><p>改成如下：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">footer</span> <span class="attr">class</span>=<span class="string">&quot;article-footer&quot;</span>&gt;</span>      </span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;article-footer-content&quot;</span>&gt;</span></span><br><span class="line">        &lt;%- partial(&#x27;post/tag&#x27;) %&gt;</span><br><span class="line">        <span class="tag">&lt;<span class="name">a</span> <span class="attr">data-url</span>=<span class="string">&quot;&lt;%- post.permalink %&gt;&quot;</span> <span class="attr">data-id</span>=<span class="string">&quot;&lt;%= post._id %&gt;&quot;</span> <span class="attr">class</span>=<span class="string">&quot;article-share-link&quot;</span>&gt;</span>&lt;%= __(&#x27;share&#x27;) %&gt;&lt;<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">        &lt;% if (post.comments &amp;&amp; config.disqus_shortname)&#123; %&gt;</span><br><span class="line">          <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;&lt;%- post.permalink %&gt;#disqus_thread&quot;</span> <span class="attr">class</span>=<span class="string">&quot;article-comment-link&quot;</span>&gt;</span>&lt;%= __(&#x27;comment&#x27;) %&gt;<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">        &lt;% &#125; %&gt;</span><br><span class="line">       &lt;% if (post.comments &amp;&amp; theme.valine.enable &amp;&amp; theme.valine.appId &amp;&amp; theme.valine.appKey )&#123; %&gt;</span><br><span class="line">          <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;&lt;%- url_for(post.path) %&gt;#comments&quot;</span> <span class="attr">class</span>=<span class="string">&quot;article-comment-link&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">&quot;post-comments-count valine-comment-count&quot;</span> <span class="attr">data-xid</span>=<span class="string">&quot;&lt;%- url_for(post.path) %&gt;&quot;</span> <span class="attr">itemprop</span>=<span class="string">&quot;commentCount&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">            &lt;%= __(&#x27;comment&#x27;) %&gt;</span><br><span class="line">          <span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">        &lt;% &#125; %&gt;</span><br><span class="line">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">footer</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="2-第二部分，文件最下面"><a href="#2-第二部分，文件最下面" class="headerlink" title="2).第二部分，文件最下面"></a>2).第二部分，文件最下面</h4><p>添加的也就是最后valine相关的这一段。</p><p>改成如下：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">&lt;% if (!index &amp;&amp; post.comments &amp;&amp; config.disqus_shortname)&#123; %&gt;</span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">section</span> <span class="attr">id</span>=<span class="string">&quot;comments&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;disqus_thread&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">noscript</span>&gt;</span>Please enable JavaScript to view the <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;//disqus.com/?ref_noscript&quot;</span>&gt;</span>comments powered by Disqus.<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">noscript</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">section</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  &lt;% &#125; %&gt;</span><br><span class="line">&lt;% if (!index &amp;&amp; post.comments &amp;&amp; theme.valine.enable &amp;&amp; theme.valine.appId &amp;&amp; theme.valine.appKey)&#123; %&gt;</span><br><span class="line">    <span class="tag">&lt;<span class="name">section</span> <span class="attr">id</span>=<span class="string">&quot;comments&quot;</span> <span class="attr">class</span>=<span class="string">&quot;vcomment&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;/<span class="name">section</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  &lt;% &#125; %&gt;</span><br></pre></td></tr></table></figure><h3 id="3-添加valine-ejs文件"><a href="#3-添加valine-ejs文件" class="headerlink" title="3.添加valine.ejs文件"></a>3.添加valine.ejs文件</h3><p>为了看着更方便，就直接把valine单独拎了个文件出来，当然，这部分内容直接写在 after-footer.ejs文件里也是一样的。</p><p>添加 <strong>hexo-theme-paperbox\layout_partial\post\valine.ejs</strong> 文件，内容如下：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">&lt;% if(theme.valine.enable &amp;&amp; theme.valine.appId &amp;&amp; theme.valine.appKey)&#123; %&gt;</span><br><span class="line">    &lt;%- js(&#x27;https://unpkg.com/valine@latest/dist/Valine.min.js&#x27;) %&gt;</span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">      <span class="keyword">var</span> GUEST_INFO = [<span class="string">&#x27;nick&#x27;</span>,<span class="string">&#x27;mail&#x27;</span>,<span class="string">&#x27;link&#x27;</span>];</span></span><br><span class="line"><span class="javascript">      <span class="keyword">var</span> guest_info = <span class="string">&#x27;&lt;%= theme.valine.guest_info %&gt;&#x27;</span>.split(<span class="string">&#x27;,&#x27;</span>).filter(<span class="function"><span class="keyword">function</span>(<span class="params">item</span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">          <span class="keyword">return</span> GUEST_INFO.indexOf(item) &gt; -<span class="number">1</span></span></span><br><span class="line">      &#125;);</span><br><span class="line"><span class="javascript">      <span class="keyword">var</span> notify = <span class="string">&#x27;&lt;%= theme.valine.notify %&gt;&#x27;</span> == <span class="literal">true</span>;</span></span><br><span class="line"><span class="javascript">      <span class="keyword">var</span> verify = <span class="string">&#x27;&lt;%= theme.valine.verify %&gt;&#x27;</span> == <span class="literal">true</span>;</span></span><br><span class="line"><span class="javascript">      <span class="keyword">new</span> Valine(&#123;</span></span><br><span class="line"><span class="javascript">          el: <span class="string">&#x27;.vcomment&#x27;</span>,</span></span><br><span class="line">          notify: notify,</span><br><span class="line">          verify: verify,</span><br><span class="line"><span class="javascript">          appId: <span class="string">&quot;&lt;%= theme.valine.appId %&gt;&quot;</span>,</span></span><br><span class="line"><span class="javascript">          appKey: <span class="string">&quot;&lt;%= theme.valine.appKey %&gt;&quot;</span>,</span></span><br><span class="line"><span class="javascript">          placeholder: <span class="string">&quot;&lt;%= theme.valine.placeholder %&gt;&quot;</span>,</span></span><br><span class="line"><span class="javascript">          pageSize:<span class="string">&#x27;&lt;%= theme.valine.pageSize %&gt;&#x27;</span>,</span></span><br><span class="line"><span class="javascript">          avatar:<span class="string">&#x27;&lt;%= theme.valine.avatar %&gt;&#x27;</span>,</span></span><br><span class="line"><span class="javascript">          lang:<span class="string">&#x27;&lt;%= theme.valine.lang %&gt;&#x27;</span></span></span><br><span class="line">      &#125;);</span><br><span class="line">  <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  &lt;% &#125; %&gt;</span><br></pre></td></tr></table></figure><h3 id="4-在after-footer-ejs文件中添加相关内容"><a href="#4-在after-footer-ejs文件中添加相关内容" class="headerlink" title="4.在after-footer.ejs文件中添加相关内容"></a>4.在after-footer.ejs文件中添加相关内容</h3><p>在 <strong>hexo-theme-paperbox\layout_partial\after-footer.ejs</strong> 文件中找一块内容添加如下代码：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- valine start --&gt;</span></span><br><span class="line">&lt;%- partial(&#x27;post/valine&#x27;) %&gt;</span><br><span class="line"><span class="comment">&lt;!-- valine end --&gt;</span></span><br></pre></td></tr></table></figure><p>这段代码，第一句和和第三句都是注释，所以其实就是中间一句，调用post目录下的valine.ejs文件的内容。所以把文件的内容全部扔这里也行。</p><p>因为删除duoshuo的评论模块，所以相关代码删掉后就改成了：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">&lt;% if (config.disqus_shortname)&#123; %&gt;</span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> disqus_shortname = <span class="string">&#x27;&lt;%= config.disqus_shortname %&gt;&#x27;</span>;</span></span><br><span class="line">    &lt;% if (page.permalink)&#123; %&gt;</span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> disqus_url = <span class="string">&#x27;&lt;%= page.permalink %&gt;&#x27;</span>;</span></span><br><span class="line">    &lt;% &#125; %&gt;</span><br><span class="line"><span class="javascript">    (<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">      <span class="keyword">var</span> dsq = <span class="built_in">document</span>.createElement(<span class="string">&#x27;script&#x27;</span>);</span></span><br><span class="line"><span class="javascript">      dsq.async = <span class="literal">true</span>;</span></span><br><span class="line"><span class="javascript">      dsq.src = <span class="string">&#x27;https://&#x27;</span> + disqus_shortname + <span class="string">&#x27;.disqus.com/&lt;% if (page.comments) &#123; %&gt;embed.js&lt;% &#125; else &#123; %&gt;count.js&lt;% &#125; %&gt;&#x27;</span>;</span></span><br><span class="line"><span class="javascript">      (<span class="built_in">document</span>.getElementsByTagName(<span class="string">&#x27;head&#x27;</span>)[<span class="number">0</span>] || <span class="built_in">document</span>.getElementsByTagName(<span class="string">&#x27;body&#x27;</span>)[<span class="number">0</span>]).appendChild(dsq);</span></span><br><span class="line">    &#125;)();</span><br><span class="line">  <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  &lt;% &#125; %&gt;</span><br></pre></td></tr></table></figure><p>以上就成功使用了 Valine 模块最基本的评论功能。</p><p>然后需要关于评论的更多功能的话，就用Valine Admin，这是 Valine 评论系统的扩展和增强，主要实现评论邮件通知、评论管理、垃圾评论过滤等功能。</p>]]></content>
      
      
      <categories>
          
          <category> Hexo </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Hexo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>2022年，继续重新开始</title>
      <link href="/2021/02/05/2021start/"/>
      <url>/2021/02/05/2021start/</url>
      
        <content type="html"><![CDATA[<p>用了几年云笔记后，吐槽一大堆，最后还是决定继续写回博客。云笔记记录一些别的东西，做个笔记备份挺好。</p><a id="more"></a><p>N多年前开始，写笔记从百度空间、CSDN空间，到自建的Wordpress、Typecho博客，这些都是动态博客，都是在管理后台，发布文章，前端显示。</p><p>再到后来，用上Hexo这个静态博客后，真香！~ 静态博客，真是太香了！~</p><p>原来用的是免费的Github pages，在上面部署了Hexo博客，文章中的图片也是用的Github的图床。</p><p>但是考虑到Github的问题，动不动不能访问了，访问速度慢了，图片打开不了之类，就想着从Github 迁移回 Gitee上，结果这个Gitee还不支持域名绑定之类，然后反正问题太多，各种麻烦~</p><p>于是，最后的最后，还是选择把Hexo放到自己的云服务器上吧，重新“收拾”了下 ，换了个新主题，好好看呀~ 等域名备案后，就正式可以用了。</p><p>更新于【2022-05-01】</p>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
